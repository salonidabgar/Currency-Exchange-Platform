{"version":3,"sources":["../../node_modules/tsup/assets/cjs_shims.js","../../node_modules/buffer-reverse/index.js","../../node_modules/crypto-js/core.js","../../node_modules/crypto-js/sha256.js","../../node_modules/crypto-js/x64-core.js","../../node_modules/crypto-js/lib-typedarrays.js","../../node_modules/crypto-js/enc-utf16.js","../../node_modules/crypto-js/enc-base64.js","../../node_modules/crypto-js/md5.js","../../node_modules/crypto-js/sha1.js","../../node_modules/crypto-js/sha224.js","../../node_modules/crypto-js/sha512.js","../../node_modules/crypto-js/sha384.js","../../node_modules/crypto-js/sha3.js","../../node_modules/crypto-js/ripemd160.js","../../node_modules/crypto-js/hmac.js","../../node_modules/crypto-js/pbkdf2.js","../../node_modules/crypto-js/evpkdf.js","../../node_modules/crypto-js/cipher-core.js","../../node_modules/crypto-js/mode-cfb.js","../../node_modules/crypto-js/mode-ctr.js","../../node_modules/crypto-js/mode-ctr-gladman.js","../../node_modules/crypto-js/mode-ofb.js","../../node_modules/crypto-js/mode-ecb.js","../../node_modules/crypto-js/pad-ansix923.js","../../node_modules/crypto-js/pad-iso10126.js","../../node_modules/crypto-js/pad-iso97971.js","../../node_modules/crypto-js/pad-zeropadding.js","../../node_modules/crypto-js/pad-nopadding.js","../../node_modules/crypto-js/format-hex.js","../../node_modules/crypto-js/aes.js","../../node_modules/crypto-js/tripledes.js","../../node_modules/crypto-js/rc4.js","../../node_modules/crypto-js/rabbit.js","../../node_modules/crypto-js/rabbit-legacy.js","../../node_modules/crypto-js/index.js","../../node_modules/merkletreejs/dist/Base.js","../../node_modules/treeify/treeify.js","../../node_modules/merkletreejs/dist/MerkleTree.js","../../node_modules/merkletreejs/dist/MerkleMountainRange.js","../../node_modules/merkletreejs/dist/index.js","../../src/index.ts","../../src/schema/contracts/common/index.ts","../../src/schema/shared.ts","../../src/common/utils.ts","../../src/schema/contracts/common/claim-conditions.ts","../../src/constants/currency.ts","../../src/constants/chains.ts","../../src/schema/contracts/common/currency.ts","../../src/schema/contracts/common/snapshots.ts","../../src/schema/contracts/common/signature.ts","../../src/schema/tokens/common/index.ts","../../src/schema/tokens/common/properties.ts","../../src/common/signature-minting.ts","../../src/schema/tokens/token.ts","../../src/schema/tokens/edition.ts","../../src/schema/contracts/custom.ts","../../src/common/error.ts","../../src/constants/addresses.ts","../../src/constants/contract.ts","../../src/constants/events.ts","../../src/constants/urls.ts","../../src/common/snapshots.ts","../../src/common/role.ts","../../src/common/feature-detection.ts","../../src/constants/contract-features.ts","../../src/constants/erc721-features.ts","../../src/constants/erc20-features.ts","../../src/constants/erc1155-features.ts","../../src/constants/thirdweb-features.ts","../../src/common/version-checker.ts","../../src/core/auth/wallet-authenticator.ts","../../src/schema/auth.ts","../../src/core/classes/rpc-connection-handler.ts","../../src/schema/sdk-options.ts","../../src/core/classes/ipfs-storage.ts","../../src/core/helpers/storage.ts","../../src/core/uploaders/pinata-uploader.ts","../../src/core/classes/remote-storage.ts","../../src/core/classes/contract-encoder.ts","../../src/core/classes/contract-metadata.ts","../../src/core/classes/contract-roles.ts","../../src/core/classes/contract-royalty.ts","../../src/core/classes/contract-sales.ts","../../src/core/classes/delayed-reveal.ts","../../src/common/nft.ts","../../src/core/classes/drop-claim-conditions.ts","../../src/common/currency.ts","../../src/core/classes/contract-wrapper.ts","../../src/common/forwarder.ts","../../typechain/index.ts","../../typechain/factories/Forwarder__factory.ts","../../typechain/factories/IERC20__factory.ts","../../typechain/factories/IThirdwebContract__factory.ts","../../typechain/factories/TWFactory__factory.ts","../../typechain/factories/TWRegistry__factory.ts","../../src/common/permit.ts","../../src/common/sign.ts","../../src/common/gas-price.ts","../../src/enums/marketplace/ListingType.ts","../../src/enums/vote/ProposalState.ts","../../src/enums/vote/Vote.ts","../../src/enums/ClaimEligibility.ts","../../src/common/claim-conditions.ts","../../src/schema/contracts/drop-erc721.ts","../../src/schema/contracts/drop-erc1155.ts","../../src/schema/contracts/marketplace.ts","../../src/schema/contracts/packs.ts","../../src/schema/contracts/splits.ts","../../src/schema/contracts/token-erc20.ts","../../src/schema/contracts/token-erc721.ts","../../src/schema/contracts/token-erc1155.ts","../../src/schema/contracts/vote.ts","../../src/schema/tokens/pack.ts","../../src/schema/tokens/common/wrap.ts","../../src/core/classes/drop-erc1155-claim-conditions.ts","../../src/core/classes/drop-erc1155-history.ts","../../src/core/classes/erc-20.ts","../../src/core/classes/erc-20-mintable.ts","../../src/core/classes/erc-20-batch-mintable.ts","../../src/core/classes/erc-20-signature-mintable.ts","../../src/core/classes/erc-20-burnable.ts","../../src/core/classes/erc-20-droppable.ts","../../src/core/classes/erc-20-history.ts","../../src/core/classes/erc-721.ts","../../src/core/classes/erc-721-supply.ts","../../src/types/QueryParams.ts","../../src/core/classes/erc-721-enumerable.ts","../../src/core/classes/erc-721-mintable.ts","../../src/core/classes/erc-721-batch-mintable.ts","../../src/core/classes/erc-721-droppable.ts","../../src/core/classes/erc-721-claimable.ts","../../src/core/classes/TransactionTask.ts","../../src/core/classes/gas-cost-estimator.ts","../../src/core/classes/erc-721-with-quantity-signature-mintable.ts","../../src/core/classes/erc-721-burnable.ts","../../src/core/classes/erc-1155.ts","../../src/schema/contracts/common/airdrop.ts","../../src/core/classes/erc-1155-enumerable.ts","../../src/core/classes/erc-1155-mintable.ts","../../src/core/classes/erc-1155-batch-mintable.ts","../../src/core/classes/erc-1155-signature-mintable.ts","../../src/core/classes/erc-1155-droppable.ts","../../src/core/classes/erc-1155-claimable.ts","../../src/core/classes/erc-1155-burnable.ts","../../src/core/classes/marketplace-direct.ts","../../src/common/marketplace.ts","../../src/core/classes/marketplace-auction.ts","../../src/core/classes/contract-deployer.ts","../../src/core/classes/registry.ts","../../src/core/classes/factory.ts","../../src/contracts/maps.ts","../../src/contracts/nft-collection.ts","../../src/core/classes/contract-interceptor.ts","../../src/core/classes/contract-events.ts","../../src/core/classes/contract-platform-fee.ts","../../src/contracts/edition-drop.ts","../../src/contracts/edition.ts","../../src/contracts/token.ts","../../src/contracts/vote.ts","../../src/contracts/split.ts","../../src/contracts/marketplace.ts","../../src/contracts/pack.ts","../../src/contracts/nft-drop.ts","../../src/contracts/token-drop.ts","../../src/schema/contracts/drop-erc20.ts","../../src/contracts/smart-contract.ts","../../src/core/classes/contract-published-metadata.ts","../../src/contracts/signature-drop.ts","../../src/contracts/multiwrap.ts","../../src/schema/contracts/multiwrap.ts","../../src/core/sdk.ts","../../src/core/classes/contract-publisher.ts","../../src/core/wallet/UserWallet.ts"],"names":[],"mappings":"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GAAG,GAAG,aAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AAEzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AAEzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,GAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,aAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AACzC,gBAAI,GAAG,GAAG,GAAG,GAAG,GAAG,YAAa,IAAI,EAAE,GAAG;AAGzC,cAAE,KAAM,EAAE,KAAK,IAAK;AACpB,cAAE,KAAM,EAAE,KAAK,IAAK;AACpB,cAAE,KAAM,EAAE,KAAK,IAAK;AACpB,cAAE,KAAM,EAAE,KAAK,IAAK;;UAGxB,aAAa,WAAY;AAErB,gBAAI,OAAO,KAAK;AAChB,gBAAI,YAAY,KAAK;AAErB,gBAAI,aAAa,KAAK,cAAc;AACpC,gBAAI,YAAY,KAAK,WAAW;AAGhC,sBAAU,cAAc,MAAM,OAAS,KAAK,YAAY;AAExD,gBAAI,cAAc,MAAK,MAAM,aAAa,UAAW;AACrD,gBAAI,cAAc;AAClB,sBAAa,aAAY,OAAQ,KAAM,KAAK,MACrC,gBAAe,IAAO,gBAAgB,MAAO,WAC7C,gBAAe,KAAO,gBAAgB,KAAO;AAEpD,sBAAa,aAAY,OAAQ,KAAM,KAAK,MACrC,gBAAe,IAAO,gBAAgB,MAAO,WAC7C,gBAAe,KAAO,gBAAgB,KAAO;AAGpD,iBAAK,WAAY,WAAU,SAAS,KAAK;AAGzC,iBAAK,SAAQ;AAGb,gBAAI,OAAO,KAAK;AAChB,gBAAI,IAAI,KAAK;AAGb,qBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAExB,kBAAI,MAAM,EAAE;AAEZ,gBAAE,KAAQ,QAAO,IAAO,QAAQ,MAAO,WAC7B,QAAO,KAAO,QAAQ,KAAO;;AAI3C,mBAAO;;UAGX,OAAO,WAAY;AACf,gBAAI,QAAQ,OAAO,MAAM,KAAK,IAAI;AAClC,kBAAM,QAAQ,KAAK,MAAM,MAAK;AAE9B,mBAAO;;SAEd;AAED,oBAAY,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7B,cAAI,IAAI,IAAM,KAAI,IAAM,CAAC,IAAI,KAAM,IAAI;AACvC,iBAAS,MAAK,IAAM,MAAO,KAAK,KAAO;;AAFlC;AAKT,oBAAY,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7B,cAAI,IAAI,IAAM,KAAI,IAAM,IAAI,CAAC,KAAM,IAAI;AACvC,iBAAS,MAAK,IAAM,MAAO,KAAK,KAAO;;AAFlC;AAKT,oBAAY,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7B,cAAI,IAAI,IAAK,KAAI,IAAI,KAAK,IAAI;AAC9B,iBAAS,MAAK,IAAM,MAAO,KAAK,KAAO;;AAFlC;AAKT,oBAAY,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7B,cAAI,IAAI,IAAK,KAAK,KAAI,CAAC,MAAM,IAAI;AACjC,iBAAS,MAAK,IAAM,MAAO,KAAK,KAAO;;AAFlC;AAmBT,UAAE,MAAM,OAAO,cAAc,GAAG;AAgBhC,UAAE,UAAU,OAAO,kBAAkB,GAAG;SAC1C,IAAI;AAGN,aAAO,SAAS;KAEhB;;;;;AC3QD;;;AAAE,IAAA,UAAU,MAAM,SAAS;AAC1B,UAAI,OAAO,YAAY,UAAU;AAEhC,gBAAO,UAAU,UAAU,QAAQ,cAAiB;iBAE5C,OAAO,WAAW,cAAc,OAAO,KAAK;AAEpD,eAAO;UAAC;WAAW,OAAO;aAEtB;AAEJ,gBAAQ,KAAK,QAAQ;;OAErB,SAAM,SAAU,UAAU;AAE1B,MAAA,YAAY;AAET,YAAI,IAAI;AACR,YAAI,QAAQ,EAAE;AACd,YAAI,YAAY,MAAM;AACtB,YAAI,SAAS,MAAM;AACnB,YAAI,SAAS,EAAE;AAGf,YAAI,IAAI,CAAA;AAKR,YAAI,OAAO,OAAO,OAAO,OAAO,OAAO;UACnC,UAAU,WAAY;AAClB,iBAAK,QAAQ,IAAI,UAAU,KAAK;cAC5B;cAAY;cACZ;cAAY;cACZ;aACH;;UAGL,iBAAiB,SAAU,GAAG,QAAQ;AAElC,gBAAI,IAAI,KAAK,MAAM;AAGnB,gBAAI,IAAI,EAAE;AACV,gBAAI,IAAI,EAAE;AACV,gBAAI,IAAI,EAAE;AACV,gBAAI,IAAI,EAAE;AACV,gBAAI,IAAI,EAAE;AAGV,qBAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,kBAAI,IAAI,IAAI;AACR,kBAAE,KAAK,EAAE,SAAS,KAAK;qBACpB;AACH,oBAAI,IAAI,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,MAAM,EAAE,IAAI;AAChD,kBAAE,KAAM,KAAK,IAAM,MAAM;;AAG7B,kBAAI,IAAM,MAAK,IAAM,MAAM,MAAO,IAAI,EAAE;AACxC,kBAAI,IAAI,IAAI;AACR,qBAAO,KAAI,IAAM,CAAC,IAAI,KAAM;yBACrB,IAAI,IAAI;AACf,qBAAM,KAAI,IAAI,KAAK;yBACZ,IAAI,IAAI;AACf,qBAAO,KAAI,IAAM,IAAI,IAAM,IAAI,KAAM;qBAChB;AACrB,qBAAM,KAAI,IAAI,KAAK;;AAGvB,kBAAI;AACJ,kBAAI;AACJ,kBAAK,KAAK,KAAO,MAAM;AACvB,kBAAI;AACJ,kBAAI;;AAIR,cAAE,KAAM,EAAE,KAAK,IAAK;AACpB,cAAE,KAAM,EAAE,KAAK,IAAK;AACpB,cAAE,KAAM,EAAE,KAAK,IAAK;AACpB,cAAE,KAAM,EAAE,KAAK,IAAK;AACpB,cAAE,KAAM,EAAE,KAAK,IAAK;;UAGxB,aAAa,WAAY;AAErB,gBAAI,OAAO,KAAK;AAChB,gBAAI,YAAY,KAAK;AAErB,gBAAI,aAAa,KAAK,cAAc;AACpC,gBAAI,YAAY,KAAK,WAAW;AAGhC,sBAAU,cAAc,MAAM,OAAS,KAAK,YAAY;AACxD,sBAAa,aAAY,OAAQ,KAAM,KAAK,MAAM,KAAK,MAAM,aAAa,UAAW;AACrF,sBAAa,aAAY,OAAQ,KAAM,KAAK,MAAM;AAClD,iBAAK,WAAW,UAAU,SAAS;AAGnC,iBAAK,SAAQ;AAGb,mBAAO,KAAK;;UAGhB,OAAO,WAAY;AACf,gBAAI,QAAQ,OAAO,MAAM,KAAK,IAAI;AAClC,kBAAM,QAAQ,KAAK,MAAM,MAAK;AAE9B,mBAAO;;SAEd;AAgBD,UAAE,OAAO,OAAO,cAAc,IAAI;AAgBlC,UAAE,WAAW,OAAO,kBAAkB,IAAI;SAC7C;AAGD,aAAO,SAAS;KAEhB;;;;;ACrJD;;;AAAE,IAAA,UAAU,MAAM,SAAS,OAAO;AACjC,UAAI,OAAO,YAAY,UAAU;AAEhC,gBAAO,UAAU,UAAU,QAAQ,gBAAmB,gBAAmB;iBAEjE,OAAO,WAAW,cAAc,OAAO,KAAK;AAEpD,eAAO;UAAC;UAAU;WAAa,OAAO;aAElC;AAEJ,gBAAQ,KAAK,QAAQ;;OAErB,SAAM,SAAU,UAAU;AAE1B,MAAA,YAAY;AAET,YAAI,IAAI;AACR,YAAI,QAAQ,EAAE;AACd,YAAI,YAAY,MAAM;AACtB,YAAI,SAAS,EAAE;AACf,YAAI,SAAS,OAAO;AAKpB,YAAI,SAAS,OAAO,SAAS,OAAO,OAAO;UACvC,UAAU,WAAY;AAClB,iBAAK,QAAQ,IAAI,UAAU,KAAK;cAC5B;cAAY;cAAY;cAAY;cACpC;cAAY;cAAY;cAAY;aACvC;;UAGL,aAAa,WAAY;AACrB,gBAAI,OAAO,OAAO,YAAY,KAAK,IAAI;AAEvC,iBAAK,YAAY;AAEjB,mBAAO;;SAEd;AAgBD,UAAE,SAAS,OAAO,cAAc,MAAM;AAgBtC,UAAE,aAAa,OAAO,kBAAkB,MAAM;SACjD;AAGD,aAAO,SAAS;KAEhB;;;;;AC/ED;;;AAAE,IAAA,UAAU,MAAM,SAAS,OAAO;AACjC,UAAI,OAAO,YAAY,UAAU;AAEhC,gBAAO,UAAU,UAAU,QAAQ,gBAAmB,kBAAqB;iBAEnE,OAAO,WAAW,cAAc,OAAO,KAAK;AAEpD,eAAO;UAAC;UAAU;WAAe,OAAO;aAEpC;AAEJ,gBAAQ,KAAK,QAAQ;;OAErB,SAAM,SAAU,UAAU;AAE1B,MAAA,YAAY;AAET,YAAI,IAAI;AACR,YAAI,QAAQ,EAAE;AACd,YAAI,SAAS,MAAM;AACnB,YAAI,QAAQ,EAAE;AACd,YAAI,UAAU,MAAM;AACpB,YAAI,eAAe,MAAM;AACzB,YAAI,SAAS,EAAE;AAEf,kCAA0B;AACtB,iBAAO,QAAQ,OAAO,MAAM,SAAS,SAAS;;AADzC;AAKT,YAAI,IAAI;UACJ,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,WAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,YAAY,SAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,WAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,WAAY,SAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,WAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,WAAY,SAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,WAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,WAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,YAAY,SAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,SAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,WAAY,UAAU;UAC7E,eAAe,WAAY,UAAU;UAAG,eAAe,WAAY,SAAU;UAC7E,eAAe,WAAY,SAAU;UAAG,eAAe,WAAY,UAAU;UAC7E,eAAe,YAAY,SAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,UAAU;UAAG,eAAe,YAAY,UAAU;UAC7E,eAAe,YAAY,SAAU;UAAG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","sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","module.exports = function reverse (src) {\n  var buffer = new Buffer(src.length)\n\n  for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {\n    buffer[i] = src[j]\n    buffer[j] = src[i]\n  }\n\n  return buffer\n}\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone \"words\" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\n\t    /**\n\t     * SHA-224 hash algorithm.\n\t     */\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA256._doFinalize.call(this);\n\n\t            hash.sigBytes -= 4;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA224('message');\n\t     *     var hash = CryptoJS.SHA224(wordArray);\n\t     */\n\t    C.SHA224 = SHA256._createHelper(SHA224);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);\n\t     */\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n\t}());\n\n\n\treturn CryptoJS.SHA224;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\n\t    function X64Word_create() {\n\t        return X64Word.create.apply(X64Word, arguments);\n\t    }\n\n\t    // Constants\n\t    var K = [\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n\t    ];\n\n\t    // Reusable objects\n\t    var W = [];\n\t    (function () {\n\t        for (var i = 0; i < 80; i++) {\n\t            W[i] = X64Word_create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-512 hash algorithm.\n\t     */\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var H0 = H[0];\n\t            var H1 = H[1];\n\t            var H2 = H[2];\n\t            var H3 = H[3];\n\t            var H4 = H[4];\n\t            var H5 = H[5];\n\t            var H6 = H[6];\n\t            var H7 = H[7];\n\n\t            var H0h = H0.high;\n\t            var H0l = H0.low;\n\t            var H1h = H1.high;\n\t            var H1l = H1.low;\n\t            var H2h = H2.high;\n\t            var H2l = H2.low;\n\t            var H3h = H3.high;\n\t            var H3l = H3.low;\n\t            var H4h = H4.high;\n\t            var H4l = H4.low;\n\t            var H5h = H5.high;\n\t            var H5l = H5.low;\n\t            var H6h = H6.high;\n\t            var H6l = H6.low;\n\t            var H7h = H7.high;\n\t            var H7l = H7.low;\n\n\t            // Working variables\n\t            var ah = H0h;\n\t            var al = H0l;\n\t            var bh = H1h;\n\t            var bl = H1l;\n\t            var ch = H2h;\n\t            var cl = H2l;\n\t            var dh = H3h;\n\t            var dl = H3l;\n\t            var eh = H4h;\n\t            var el = H4l;\n\t            var fh = H5h;\n\t            var fl = H5l;\n\t            var gh = H6h;\n\t            var gl = H6l;\n\t            var hh = H7h;\n\t            var hl = H7l;\n\n\t            // Rounds\n\t            for (var i = 0; i < 80; i++) {\n\t                // Shortcut\n\t                var Wi = W[i];\n\n\t                // Extend message\n\t                if (i < 16) {\n\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;\n\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n\t                } else {\n\t                    // Gamma0\n\t                    var gamma0x  = W[i - 15];\n\t                    var gamma0xh = gamma0x.high;\n\t                    var gamma0xl = gamma0x.low;\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n\t                    // Gamma1\n\t                    var gamma1x  = W[i - 2];\n\t                    var gamma1xh = gamma1x.high;\n\t                    var gamma1xl = gamma1x.low;\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t                    var Wi7  = W[i - 7];\n\t                    var Wi7h = Wi7.high;\n\t                    var Wi7l = Wi7.low;\n\n\t                    var Wi16  = W[i - 16];\n\t                    var Wi16h = Wi16.high;\n\t                    var Wi16l = Wi16.low;\n\n\t                    var Wil = gamma0l + Wi7l;\n\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + gamma1l;\n\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + Wi16l;\n\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n\t                    Wi.high = Wih;\n\t                    Wi.low  = Wil;\n\t                }\n\n\t                var chh  = (eh & fh) ^ (~eh & gh);\n\t                var chl  = (el & fl) ^ (~el & gl);\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]\n\t                var Ki  = K[i];\n\t                var Kih = Ki.high;\n\t                var Kil = Ki.low;\n\n\t                var t1l = hl + sigma1l;\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + chl;\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Kil;\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Wil;\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n\t                // t2 = sigma0 + maj\n\t                var t2l = sigma0l + majl;\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n\t                // Update working variables\n\t                hh = gh;\n\t                hl = gl;\n\t                gh = fh;\n\t                gl = fl;\n\t                fh = eh;\n\t                fl = el;\n\t                el = (dl + t1l) | 0;\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n\t                dh = ch;\n\t                dl = cl;\n\t                ch = bh;\n\t                cl = bl;\n\t                bh = ah;\n\t                bl = al;\n\t                al = (t1l + t2l) | 0;\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H0l = H0.low  = (H0l + al);\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n\t            H1l = H1.low  = (H1l + bl);\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n\t            H2l = H2.low  = (H2l + cl);\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n\t            H3l = H3.low  = (H3l + dl);\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n\t            H4l = H4.low  = (H4l + el);\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n\t            H5l = H5.low  = (H5l + fl);\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n\t            H6l = H6.low  = (H6l + gl);\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n\t            H7l = H7.low  = (H7l + hl);\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Convert hash to 32-bit word array before returning\n\t            var hash = this._hash.toX32();\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        },\n\n\t        blockSize: 1024/32\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA512('message');\n\t     *     var hash = CryptoJS.SHA512(wordArray);\n\t     */\n\t    C.SHA512 = Hasher._createHelper(SHA512);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);\n\t     */\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n\t}());\n\n\n\treturn CryptoJS.SHA512;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA512 = C_algo.SHA512;\n\n\t    /**\n\t     * SHA-384 hash algorithm.\n\t     */\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA512._doFinalize.call(this);\n\n\t            hash.sigBytes -= 16;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA384('message');\n\t     *     var hash = CryptoJS.SHA384(wordArray);\n\t     */\n\t    C.SHA384 = SHA512._createHelper(SHA384);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);\n\t     */\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n\t}());\n\n\n\treturn CryptoJS.SHA384;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var _zl = WordArray.create([\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);\n\t    var _zr = WordArray.create([\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);\n\t    var _sl = WordArray.create([\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);\n\t    var _sr = WordArray.create([\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);\n\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n\t    /**\n\t     * RIPEMD160 hash algorithm.\n\t     */\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                // Swap\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\t            // Shortcut\n\t            var H  = this._hash.words;\n\t            var hl = _hl.words;\n\t            var hr = _hr.words;\n\t            var zl = _zl.words;\n\t            var zr = _zr.words;\n\t            var sl = _sl.words;\n\t            var sr = _sr.words;\n\n\t            // Working variables\n\t            var al, bl, cl, dl, el;\n\t            var ar, br, cr, dr, er;\n\n\t            ar = al = H[0];\n\t            br = bl = H[1];\n\t            cr = cl = H[2];\n\t            dr = dl = H[3];\n\t            er = el = H[4];\n\t            // Computation\n\t            var t;\n\t            for (var i = 0; i < 80; i += 1) {\n\t                t = (al +  M[offset+zl[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f1(bl,cl,dl) + hl[0];\n\t                } else if (i<32) {\n\t\t            t +=  f2(bl,cl,dl) + hl[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(bl,cl,dl) + hl[2];\n\t                } else if (i<64) {\n\t\t            t +=  f4(bl,cl,dl) + hl[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f5(bl,cl,dl) + hl[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sl[i]);\n\t                t = (t+el)|0;\n\t                al = el;\n\t                el = dl;\n\t                dl = rotl(cl, 10);\n\t                cl = bl;\n\t                bl = t;\n\n\t                t = (ar + M[offset+zr[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f5(br,cr,dr) + hr[0];\n\t                } else if (i<32) {\n\t\t            t +=  f4(br,cr,dr) + hr[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(br,cr,dr) + hr[2];\n\t                } else if (i<64) {\n\t\t            t +=  f2(br,cr,dr) + hr[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f1(br,cr,dr) + hr[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sr[i]) ;\n\t                t = (t+er)|0;\n\t                ar = er;\n\t                er = dr;\n\t                dr = rotl(cr, 10);\n\t                cr = br;\n\t                br = t;\n\t            }\n\t            // Intermediate hash value\n\t            t    = (H[1] + cl + dr)|0;\n\t            H[1] = (H[2] + dl + er)|0;\n\t            H[2] = (H[3] + el + ar)|0;\n\t            H[3] = (H[4] + al + br)|0;\n\t            H[4] = (H[0] + bl + cr)|0;\n\t            H[0] =  t;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t            );\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 5; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                // Swap\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\n\t    function f1(x, y, z) {\n\t        return ((x) ^ (y) ^ (z));\n\n\t    }\n\n\t    function f2(x, y, z) {\n\t        return (((x)&(y)) | ((~x)&(z)));\n\t    }\n\n\t    function f3(x, y, z) {\n\t        return (((x) | (~(y))) ^ (z));\n\t    }\n\n\t    function f4(x, y, z) {\n\t        return (((x) & (z)) | ((y)&(~(z))));\n\t    }\n\n\t    function f5(x, y, z) {\n\t        return ((x) ^ ((y) |(~(z))));\n\n\t    }\n\n\t    function rotl(x,n) {\n\t        return (x<<n) | (x>>>(32-n));\n\t    }\n\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.RIPEMD160('message');\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);\n\t     */\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n\t     */\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n\t}(Math));\n\n\n\treturn CryptoJS.RIPEMD160;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                var block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ANSI X.923 padding strategy.\n\t */\n\tCryptoJS.pad.AnsiX923 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcuts\n\t        var dataSigBytes = data.sigBytes;\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n\t        // Compute last byte position\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n\t        data.sigBytes += nPaddingBytes;\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Ansix923;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO/IEC 9797-1 Padding Method 2.\n\t */\n\tCryptoJS.pad.Iso97971 = {\n\t    pad: function (data, blockSize) {\n\t        // Add 0x80 byte\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n\t        // Zero pad the rest\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Remove zero padding\n\t        CryptoJS.pad.ZeroPadding.unpad(data);\n\n\t        // Remove one more byte -- the 0x80 byte\n\t        data.sigBytes--;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso97971;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Zero padding strategy.\n\t */\n\tCryptoJS.pad.ZeroPadding = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Shortcut\n\t        var dataWords = data.words;\n\n\t        // Unpad\n\t        var i = data.sigBytes - 1;\n\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n\t            i--;\n\t        }\n\t        data.sigBytes = i + 1;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.ZeroPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * A noop padding strategy.\n\t */\n\tCryptoJS.pad.NoPadding = {\n\t    pad: function () {\n\t    },\n\n\t    unpad: function () {\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.NoPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * RC4 stream cipher algorithm.\n\t     */\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySigBytes = key.sigBytes;\n\n\t            // Init sbox\n\t            var S = this._S = [];\n\t            for (var i = 0; i < 256; i++) {\n\t                S[i] = i;\n\t            }\n\n\t            // Key setup\n\t            for (var i = 0, j = 0; i < 256; i++) {\n\t                var keyByteIndex = i % keySigBytes;\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n\t                j = (j + S[i] + keyByte) % 256;\n\n\t                // Swap\n\t                var t = S[i];\n\t                S[i] = S[j];\n\t                S[j] = t;\n\t            }\n\n\t            // Counters\n\t            this._i = this._j = 0;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            M[offset] ^= generateKeystreamWord.call(this);\n\t        },\n\n\t        keySize: 256/32,\n\n\t        ivSize: 0\n\t    });\n\n\t    function generateKeystreamWord() {\n\t        // Shortcuts\n\t        var S = this._S;\n\t        var i = this._i;\n\t        var j = this._j;\n\n\t        // Generate keystream word\n\t        var keystreamWord = 0;\n\t        for (var n = 0; n < 4; n++) {\n\t            i = (i + 1) % 256;\n\t            j = (j + S[i]) % 256;\n\n\t            // Swap\n\t            var t = S[i];\n\t            S[i] = S[j];\n\t            S[j] = t;\n\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n\t        }\n\n\t        // Update counters\n\t        this._i = i;\n\t        this._j = j;\n\n\t        return keystreamWord;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4 = StreamCipher._createHelper(RC4);\n\n\t    /**\n\t     * Modified RC4 stream cipher algorithm.\n\t     */\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} drop The number of keystream words to drop. Default 192\n\t         */\n\t        cfg: RC4.cfg.extend({\n\t            drop: 192\n\t        }),\n\n\t        _doReset: function () {\n\t            RC4._doReset.call(this);\n\n\t            // Drop\n\t            for (var i = this.cfg.drop; i > 0; i--) {\n\t                generateKeystreamWord.call(this);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n\t}());\n\n\n\treturn CryptoJS.RC4;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm\n\t     */\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);\n\t}());\n\n\n\treturn CryptoJS.Rabbit;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm.\n\t     *\n\t     * This is a legacy version that neglected to convert the key to little-endian.\n\t     * This error doesn't affect the cipher's security,\n\t     * but it does affect its compatibility with other implementations.\n\t     */\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n\t}());\n\n\n\treturn CryptoJS.RabbitLegacy;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Base = void 0;\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\nclass Base {\n    /**\n     * print\n     * @desc Prints out a visual representation of the merkle tree.\n     * @example\n     *```js\n     *tree.print()\n     *```\n     */\n    print() {\n        Base.print(this);\n    }\n    /**\n     * bufferIndexOf\n     * @desc Returns the first index of which given buffer is found in array.\n     * @param {Buffer[]} haystack - Array of buffers.\n     * @param {Buffer} needle - Buffer to find.\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.bufferIndexOf(haystack, needle)\n     *```\n     */\n    _bufferIndexOf(array, element) {\n        for (let i = 0; i < array.length; i++) {\n            if (element.equals(array[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer|ArrayBuffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = MerkleTree.bufferify('0x1234')\n     *```\n     */\n    static bufferify(value) {\n        if (!Buffer.isBuffer(value)) {\n            // crypto-js support\n            if (typeof value === 'object' && value.words) {\n                return Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n            }\n            else if (Base.isHexString(value)) {\n                return Buffer.from(value.replace(/^0x/, ''), 'hex');\n            }\n            else if (typeof value === 'string') {\n                return Buffer.from(value);\n            }\n            else if (typeof value === 'number') {\n                let s = value.toString();\n                if (s.length % 2) {\n                    s = `0${s}`;\n                }\n                return Buffer.from(s, 'hex');\n            }\n            else if (ArrayBuffer.isView(value)) {\n                return Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n            }\n        }\n        return value;\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    static isHexString(v) {\n        return (typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v));\n    }\n    /**\n     * print\n     * @desc Prints out a visual representation of the given merkle tree.\n     * @param {Object} tree - Merkle tree instance.\n     * @return {String}\n     * @example\n     *```js\n     *MerkleTree.print(tree)\n     *```\n     */\n    static print(tree) {\n        console.log(tree.toString());\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = tree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    bufferToHex(value, withPrefix = true) {\n        return Base.bufferToHex(value, withPrefix);\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    static bufferToHex(value, withPrefix = true) {\n        return `${withPrefix ? '0x' : ''}${(value || Buffer.alloc(0)).toString('hex')}`;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = tree.bufferify('0x1234')\n     *```\n     */\n    bufferify(value) {\n        return Base.bufferify(value);\n    }\n    /**\n     * bufferifyFn\n     * @desc Returns a function that will bufferify the return value.\n     * @param {Function}\n     * @return {Function}\n     *\n     * @example\n     * ```js\n     *const fn = tree.bufferifyFn((value) => sha256(value))\n     *```\n     */\n    bufferifyFn(f) {\n        return (value) => {\n            const v = f(value);\n            if (Buffer.isBuffer(v)) {\n                return v;\n            }\n            if (this._isHexString(v)) {\n                return Buffer.from(v.replace('0x', ''), 'hex');\n            }\n            if (typeof v === 'string') {\n                return Buffer.from(v);\n            }\n            if (ArrayBuffer.isView(v)) {\n                return Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n            }\n            // crypto-js support\n            return Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n        };\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    _isHexString(value) {\n        return Base.isHexString(value);\n    }\n    /**\n     * log2\n     * @desc Returns the log2 of number.\n     * @param {Number} value\n     * @return {Number}\n     */\n    _log2(n) {\n        return n === 1 ? 0 : 1 + this._log2((n / 2) | 0);\n    }\n    /**\n     * zip\n     * @desc Returns true if value is a hex string.\n     * @param {String[]|Number[]|Buffer[]} a - first array\n     * @param {String[]|Number[]|Buffer[]} b -  second array\n     * @return {String[][]|Number[][]|Buffer[][]}\n     *\n     * @example\n     * ```js\n     *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n     *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n     *```\n     */\n    _zip(a, b) {\n        return a.map((e, i) => [e, b[i]]);\n    }\n}\nexports.Base = Base;\nexports.default = Base;\n","//     treeify.js\n//     Luke Plaster <notatestuser@gmail.com>\n//     https://github.com/notatestuser/treeify.js\n\n// do the universal module definition dance\n(function (root, factory) {\n\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.treeify = factory();\n  }\n\n}(this, function() {\n\n  function makePrefix(key, last) {\n    var str = (last ? '└' : '├');\n    if (key) {\n      str += '─ ';\n    } else {\n      str += '──┐';\n    }\n    return str;\n  }\n\n  function filterKeys(obj, hideFunctions) {\n    var keys = [];\n    for (var branch in obj) {\n      // always exclude anything in the object's prototype\n      if (!obj.hasOwnProperty(branch)) {\n        continue;\n      }\n      // ... and hide any keys mapped to functions if we've been told to\n      if (hideFunctions && ((typeof obj[branch])===\"function\")) {\n        continue;\n      }\n      keys.push(branch);\n    }\n    return keys;\n  }\n\n  function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {\n    var line = '', index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);\n\n    if (lastStatesCopy.push([ root, last ]) && lastStates.length > 0) {\n      // based on the \"was last element\" states of whatever we're nested within,\n      // we need to append either blankness or a branch to our line\n      lastStates.forEach(function(lastState, idx) {\n        if (idx > 0) {\n          line += (lastState[1] ? ' ' : '│') + '  ';\n        }\n        if ( ! circular && lastState[0] === root) {\n          circular = true;\n        }\n      });\n\n      // the prefix varies based on whether the key contains something to show and\n      // whether we're dealing with the last element in this collection\n      line += makePrefix(key, last) + key;\n\n      // append values and the circular reference indicator\n      showValues && (typeof root !== 'object' || root instanceof Date) && (line += ': ' + root);\n      circular && (line += ' (circular ref.)');\n\n      callback(line);\n    }\n\n    // can we descend into the next item?\n    if ( ! circular && typeof root === 'object') {\n      var keys = filterKeys(root, hideFunctions);\n      keys.forEach(function(branch){\n        // the last key is always printed with a different prefix, so we'll need to know if we have it\n        lastKey = ++index === keys.length;\n\n        // hold your breath for recursive action\n        growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);\n      });\n    }\n  };\n\n  // --------------------\n\n  var Treeify = {};\n\n  // Treeify.asLines\n  // --------------------\n  // Outputs the tree line-by-line, calling the lineCallback when each one is available.\n\n  Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {\n    /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */\n    var hideFunctionsArg = typeof hideFunctions !== 'function' ? hideFunctions : false;\n    growBranch('.', obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);\n  };\n\n  // Treeify.asTree\n  // --------------------\n  // Outputs the entire tree, returning it as a string with line breaks.\n\n  Treeify.asTree = function(obj, showValues, hideFunctions) {\n    var tree = '';\n    growBranch('.', obj, false, [], showValues, hideFunctions, function(line) {\n      tree += line + '\\n';\n    });\n    return tree;\n  };\n\n  // --------------------\n\n  return Treeify;\n\n}));\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleTree = void 0;\nconst buffer_reverse_1 = __importDefault(require(\"buffer-reverse\"));\nconst sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\nconst Base_1 = __importDefault(require(\"./Base\"));\nconst treeify_1 = __importDefault(require(\"treeify\"));\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */\nclass MerkleTree extends Base_1.default {\n    /**\n     * @desc Constructs a Merkle Tree.\n     * All nodes and leaves are stored as Buffers.\n     * Lonely leaf nodes are promoted to the next level up without being hashed again.\n     * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n     * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n     * @param {Object} options - Additional options\n     * @example\n     *```js\n     *const MerkleTree = require('merkletreejs')\n     *const crypto = require('crypto')\n     *\n     *function sha256(data) {\n     *  // returns Buffer\n     *  return crypto.createHash('sha256').update(data).digest()\n     *}\n     *\n     *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n     *\n     *const tree = new MerkleTree(leaves, sha256)\n     *```\n     */\n    constructor(leaves, hashFn = sha256_1.default, options = {}) {\n        super();\n        this.duplicateOdd = false;\n        this.hashLeaves = false;\n        this.isBitcoinTree = false;\n        this.leaves = [];\n        this.layers = [];\n        this.sortLeaves = false;\n        this.sortPairs = false;\n        this.sort = false;\n        this.fillDefaultHash = null;\n        this.isBitcoinTree = !!options.isBitcoinTree;\n        this.hashLeaves = !!options.hashLeaves;\n        this.sortLeaves = !!options.sortLeaves;\n        this.sortPairs = !!options.sortPairs;\n        if (options.fillDefaultHash) {\n            if (typeof options.fillDefaultHash === 'function') {\n                this.fillDefaultHash = options.fillDefaultHash;\n            }\n            else if (Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === 'string') {\n                this.fillDefaultHash = (idx, hashFn) => options.fillDefaultHash;\n            }\n            else {\n                throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n            }\n        }\n        this.sort = !!options.sort;\n        if (this.sort) {\n            this.sortLeaves = true;\n            this.sortPairs = true;\n        }\n        this.duplicateOdd = !!options.duplicateOdd;\n        this.hashFn = this.bufferifyFn(hashFn);\n        this.processLeaves(leaves);\n    }\n    processLeaves(leaves) {\n        if (this.hashLeaves) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.leaves = leaves.map(this.bufferify);\n        if (this.sortLeaves) {\n            this.leaves = this.leaves.sort(Buffer.compare);\n        }\n        if (this.fillDefaultHash) {\n            for (let i = 0; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {\n                if (i >= this.leaves.length) {\n                    this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n                }\n            }\n        }\n        this.layers = [this.leaves];\n        this._createHashes(this.leaves);\n    }\n    _createHashes(nodes) {\n        while (nodes.length > 1) {\n            const layerIndex = this.layers.length;\n            this.layers.push([]);\n            for (let i = 0; i < nodes.length; i += 2) {\n                if (i + 1 === nodes.length) {\n                    if (nodes.length % 2 === 1) {\n                        let data = nodes[nodes.length - 1];\n                        let hash = data;\n                        // is bitcoin tree\n                        if (this.isBitcoinTree) {\n                            // Bitcoin method of duplicating the odd ending nodes\n                            data = Buffer.concat([buffer_reverse_1.default(data), buffer_reverse_1.default(data)]);\n                            hash = this.hashFn(data);\n                            hash = buffer_reverse_1.default(this.hashFn(hash));\n                            this.layers[layerIndex].push(hash);\n                            continue;\n                        }\n                        else {\n                            if (this.duplicateOdd) {\n                                // continue with creating layer\n                            }\n                            else {\n                                // push copy of hash and continue iteration\n                                this.layers[layerIndex].push(nodes[i]);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                const left = nodes[i];\n                const right = i + 1 === nodes.length ? left : nodes[i + 1];\n                let data = null;\n                let combined = null;\n                if (this.isBitcoinTree) {\n                    combined = [buffer_reverse_1.default(left), buffer_reverse_1.default(right)];\n                }\n                else {\n                    combined = [left, right];\n                }\n                if (this.sortPairs) {\n                    combined.sort(Buffer.compare);\n                }\n                data = Buffer.concat(combined);\n                let hash = this.hashFn(data);\n                // double hash if bitcoin tree\n                if (this.isBitcoinTree) {\n                    hash = buffer_reverse_1.default(this.hashFn(hash));\n                }\n                this.layers[layerIndex].push(hash);\n            }\n            nodes = this.layers[layerIndex];\n        }\n    }\n    /**\n     * addLeaf\n     * @desc Adds a leaf to the tree and re-calculates layers.\n     * @param {String|Buffer} - Leaf\n     * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaf(newLeaf)\n     *```\n     */\n    addLeaf(leaf, shouldHash = false) {\n        if (shouldHash) {\n            leaf = this.hashFn(leaf);\n        }\n        this.processLeaves(this.leaves.concat(leaf));\n    }\n    /**\n     * addLeaves\n     * @desc Adds multiple leaves to the tree and re-calculates layers.\n     * @param {String[]|Buffer[]} - Array of leaves\n     * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaves(newLeaves)\n     *```\n     */\n    addLeaves(leaves, shouldHash = false) {\n        if (shouldHash) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.processLeaves(this.leaves.concat(leaves));\n    }\n    /**\n     * getLeaves\n     * @desc Returns array of leaves of Merkle Tree.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *```\n     */\n    getLeaves(values) {\n        if (Array.isArray(values)) {\n            if (this.hashLeaves) {\n                values = values.map(this.hashFn);\n                if (this.sortLeaves) {\n                    values = values.sort(Buffer.compare);\n                }\n            }\n            return this.leaves.filter(leaf => this._bufferIndexOf(values, leaf) !== -1);\n        }\n        return this.leaves;\n    }\n    /**\n     * getLeaf\n     * @desc Returns the leaf at the given index.\n     * @param {Number} - Index number\n     * @return {Buffer}\n     * @example\n     *```js\n     *const leaf = tree.getLeaf(1)\n     *```\n     */\n    getLeaf(index) {\n        if (index < 0 || index > this.leaves.length - 1) {\n            return Buffer.from([]);\n        }\n        return this.leaves[index];\n    }\n    /**\n     * getLeafIndex\n     * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n     * @param {String|Buffer} - Target leaf\n     * @return {number}\n     * @example\n     *```js\n     *const leaf = Buffer.from('abc')\n     *const index = tree.getLeafIndex(leaf)\n     *```\n     */\n    getLeafIndex(target) {\n        target = this.bufferify(target);\n        const leaves = this.getLeaves();\n        for (let i = 0; i < leaves.length; i++) {\n            const leaf = leaves[i];\n            if (leaf.equals(target)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * getLeafCount\n     * @desc Returns the total number of leaves.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLeafCount()\n     *```\n     */\n    getLeafCount() {\n        return this.leaves.length;\n    }\n    /**\n     * getHexLeaves\n     * @desc Returns array of leaves of Merkle Tree as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const leaves = tree.getHexLeaves()\n     *```\n     */\n    getHexLeaves() {\n        return this.leaves.map(leaf => this.bufferToHex(leaf));\n    }\n    /**\n     * marshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a JSON string.\n     * @param {String[]|Buffer[]} - Merkle tree leaves\n     * @return {String} - List of leaves as JSON string\n     * @example\n     *```js\n     *const jsonStr = MerkleTree.marshalLeaves(leaves)\n     *```\n     */\n    static marshalLeaves(leaves) {\n        return JSON.stringify(leaves.map(leaf => MerkleTree.bufferToHex(leaf)), null, 2);\n    }\n    /**\n     * unmarshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a Buffers.\n     * @param {String|Object} - JSON stringified leaves\n     * @return {Buffer[]} - Unmarshalled list of leaves\n     * @example\n     *```js\n     *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n     *```\n     */\n    static unmarshalLeaves(jsonStr) {\n        let parsed = null;\n        if (typeof jsonStr === 'string') {\n            parsed = JSON.parse(jsonStr);\n        }\n        else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        }\n        else {\n            throw new Error('Expected type of string or object');\n        }\n        if (!parsed) {\n            return [];\n        }\n        if (!Array.isArray(parsed)) {\n            throw new Error('Expected JSON string to be array');\n        }\n        return parsed.map(MerkleTree.bufferify);\n    }\n    /**\n     * getLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayers()\n     *```\n     */\n    getLayers() {\n        return this.layers;\n    }\n    /**\n     * getHexLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayers()\n     *```\n     */\n    getHexLayers() {\n        return this.layers.reduce((acc, item) => {\n            if (Array.isArray(item)) {\n                acc.push(item.map(layer => this.bufferToHex(layer)));\n            }\n            else {\n                acc.push(item);\n            }\n            return acc;\n        }, []);\n    }\n    /**\n     * getLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayersFlat()\n     *```\n     */\n    getLayersFlat() {\n        const layers = this.layers.reduce((acc, item) => {\n            if (Array.isArray(item)) {\n                acc.unshift(...item);\n            }\n            else {\n                acc.unshift(item);\n            }\n            return acc;\n        }, []);\n        layers.unshift(Buffer.from([0]));\n        return layers;\n    }\n    /**\n     * getHexLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayersFlat()\n     *```\n     */\n    getHexLayersFlat() {\n        return this.getLayersFlat().map(layer => this.bufferToHex(layer));\n    }\n    /**\n     * getLayerCount\n     * @desc Returns the total number of layers.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLayerCount()\n     *```\n     */\n    getLayerCount() {\n        return this.getLayers().length;\n    }\n    /**\n     * getRoot\n     * @desc Returns the Merkle root hash as a Buffer.\n     * @return {Buffer}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *```\n     */\n    getRoot() {\n        if (this.layers.length === 0) {\n            return Buffer.from([]);\n        }\n        return this.layers[this.layers.length - 1][0] || Buffer.from([]);\n    }\n    /**\n     * getHexRoot\n     * @desc Returns the Merkle root hash as a hex string.\n     * @return {String}\n     * @example\n     *```js\n     *const root = tree.getHexRoot()\n     *```\n     */\n    getHexRoot() {\n        return this.bufferToHex(this.getRoot());\n    }\n    /**\n     * getProof\n     * @desc Returns the proof for a target leaf.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {Object[]} - Array of objects containing a position property of type string\n     * with values of 'left' or 'right' and a data property of type Buffer.\n     * @example\n     * ```js\n     *const proof = tree.getProof(leaves[2])\n     *```\n     *\n     * @example\n     *```js\n     *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n     *const tree = new MerkleTree(leaves, keccak)\n     *const proof = tree.getProof(leaves[2], 2)\n     *```\n     */\n    getProof(leaf, index) {\n        if (typeof leaf === 'undefined') {\n            throw new Error('leaf is required');\n        }\n        leaf = this.bufferify(leaf);\n        const proof = [];\n        if (!Number.isInteger(index)) {\n            index = -1;\n            for (let i = 0; i < this.leaves.length; i++) {\n                if (Buffer.compare(leaf, this.leaves[i]) === 0) {\n                    index = i;\n                }\n            }\n        }\n        if (index <= -1) {\n            return [];\n        }\n        for (let i = 0; i < this.layers.length; i++) {\n            const layer = this.layers[i];\n            const isRightNode = index % 2;\n            const pairIndex = (isRightNode ? index - 1\n                : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1\n                    // Proof Generation for Bitcoin Trees\n                    ? index\n                    // Proof Generation for Non-Bitcoin Trees\n                    : index + 1);\n            if (pairIndex < layer.length) {\n                proof.push({\n                    position: isRightNode ? 'left' : 'right',\n                    data: layer[pairIndex]\n                });\n            }\n            // set index to parent index\n            index = (index / 2) | 0;\n        }\n        return proof;\n    }\n    /**\n     * getHexProof\n     * @desc Returns the proof for a target leaf as hex strings.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {String[]} - Proof array as hex strings.\n     * @example\n     * ```js\n     *const proof = tree.getHexProof(leaves[2])\n     *```\n     */\n    getHexProof(leaf, index) {\n        return this.getProof(leaf, index).map(item => this.bufferToHex(item.data));\n    }\n    /**\n    * getPositionalHexProof\n    * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n    * @param {Buffer} leaf - Target leaf\n    * @param {Number} [index] - Target leaf index in leaves array.\n    * Use if there are leaves containing duplicate data in order to distinguish it.\n    * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n    * @example\n    * ```js\n    *const proof = tree.getPositionalHexProof(leaves[2])\n    *```\n    */\n    getPositionalHexProof(leaf, index) {\n        return this.getProof(leaf, index).map(item => {\n            return [\n                item.position === 'left' ? 0 : 1,\n                this.bufferToHex(item.data)\n            ];\n        });\n    }\n    /**\n     * marshalProof\n     * @desc Returns proof array as JSON string.\n     * @param {String[]|Object[]} proof - Merkle tree proof array\n     * @return {String} - Proof array as JSON string.\n     * @example\n     * ```js\n     *const jsonStr = MerkleTree.marshalProof(proof)\n     *```\n     */\n    static marshalProof(proof) {\n        const json = proof.map(item => {\n            if (typeof item === 'string') {\n                return item;\n            }\n            if (Buffer.isBuffer(item)) {\n                return MerkleTree.bufferToHex(item);\n            }\n            return {\n                position: item.position,\n                data: MerkleTree.bufferToHex(item.data)\n            };\n        });\n        return JSON.stringify(json, null, 2);\n    }\n    /**\n     * unmarshalProof\n     * @desc Returns the proof for a target leaf as a list of Buffers.\n     * @param {String|Object} - Merkle tree leaves\n     * @return {String|Object} - Marshalled proof\n     * @example\n     * ```js\n     *const proof = MerkleTree.unmarshalProof(jsonStr)\n     *```\n     */\n    static unmarshalProof(jsonStr) {\n        let parsed = null;\n        if (typeof jsonStr === 'string') {\n            parsed = JSON.parse(jsonStr);\n        }\n        else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        }\n        else {\n            throw new Error('Expected type of string or object');\n        }\n        if (!parsed) {\n            return [];\n        }\n        if (!Array.isArray(parsed)) {\n            throw new Error('Expected JSON string to be array');\n        }\n        return parsed.map(item => {\n            if (typeof item === 'string') {\n                return MerkleTree.bufferify(item);\n            }\n            else if (item instanceof Object) {\n                return {\n                    position: item.position,\n                    data: MerkleTree.bufferify(item.data)\n                };\n            }\n            else {\n                throw new Error('Expected item to be of type string or object');\n            }\n        });\n    }\n    /**\n     * getProofIndices\n     * @desc Returns the proof indices for given tree indices.\n     * @param {Number[]} treeIndices - Tree indices\n     * @param {Number} depth - Tree depth; number of layers.\n     * @return {Number[]} - Proof indices\n     * @example\n     * ```js\n     *const proofIndices = tree.getProofIndices([2,5,6], 4)\n     *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n     *```\n     */\n    getProofIndices(treeIndices, depth) {\n        const leafCount = Math.pow(2, depth);\n        let maximalIndices = new Set();\n        for (const index of treeIndices) {\n            let x = leafCount + index;\n            while (x > 1) {\n                maximalIndices.add(x ^ 1);\n                x = (x / 2) | 0;\n            }\n        }\n        const a = treeIndices.map(index => leafCount + index);\n        const b = Array.from(maximalIndices).sort((a, b) => a - b).reverse();\n        maximalIndices = a.concat(b);\n        const redundantIndices = new Set();\n        const proof = [];\n        for (let index of maximalIndices) {\n            if (!redundantIndices.has(index)) {\n                proof.push(index);\n                while (index > 1) {\n                    redundantIndices.add(index);\n                    if (!redundantIndices.has(index ^ 1))\n                        break;\n                    index = (index / 2) | 0;\n                }\n            }\n        }\n        return proof.filter(index => {\n            return !treeIndices.includes(index - leafCount);\n        });\n    }\n    getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n        const depth = Math.ceil(Math.log2(leavesCount));\n        const unevenLayers = [];\n        for (let index = 0; index < depth; index++) {\n            const unevenLayer = leavesCount % 2 !== 0;\n            if (unevenLayer) {\n                unevenLayers.push({ index, leavesCount });\n            }\n            leavesCount = Math.ceil(leavesCount / 2);\n        }\n        const proofIndices = [];\n        let layerNodes = sortedLeafIndices;\n        for (let layerIndex = 0; layerIndex < depth; layerIndex++) {\n            const siblingIndices = layerNodes.map((index) => {\n                if (index % 2 === 0) {\n                    return index + 1;\n                }\n                return index - 1;\n            });\n            let proofNodeIndices = siblingIndices.filter((index) => !layerNodes.includes(index));\n            const unevenLayer = unevenLayers.find(({ index }) => index === layerIndex);\n            if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n                proofNodeIndices = proofNodeIndices.slice(0, -1);\n            }\n            proofIndices.push(proofNodeIndices);\n            layerNodes = [...new Set(layerNodes.map((index) => {\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))];\n        }\n        return proofIndices;\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *```\n     */\n    getMultiProof(tree, indices) {\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayersFlat();\n        }\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            if (indices.every(Number.isInteger)) {\n                return this.getMultiProofForUnevenTree(indices);\n            }\n        }\n        if (!indices.every(Number.isInteger)) {\n            let els = indices;\n            if (this.sortPairs) {\n                els = els.sort(Buffer.compare);\n            }\n            let ids = els.map((el) => this._bufferIndexOf(this.leaves, el)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n            if (!ids.every((idx) => idx !== -1)) {\n                throw new Error('Element does not exist in Merkle tree');\n            }\n            const hashes = [];\n            const proof = [];\n            let nextIds = [];\n            for (let i = 0; i < this.layers.length; i++) {\n                const layer = this.layers[i];\n                for (let j = 0; j < ids.length; j++) {\n                    const idx = ids[j];\n                    const pairElement = this._getPairNode(layer, idx);\n                    hashes.push(layer[idx]);\n                    if (pairElement) {\n                        proof.push(pairElement);\n                    }\n                    nextIds.push((idx / 2) | 0);\n                }\n                ids = nextIds.filter((value, i, self) => self.indexOf(value) === i);\n                nextIds = [];\n            }\n            return proof.filter((value) => !hashes.includes(value));\n        }\n        return this.getProofIndices(indices, this._log2((tree.length / 2) | 0)).map(index => tree[index]);\n    }\n    getMultiProofForUnevenTree(tree, indices) {\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayers();\n        }\n        let proofHashes = [];\n        let currentLayerIndices = indices;\n        for (const treeLayer of tree) {\n            const siblings = [];\n            for (const index of currentLayerIndices) {\n                if (index % 2 === 0) {\n                    const idx = index + 1;\n                    if (!currentLayerIndices.includes(idx)) {\n                        if (treeLayer[idx]) {\n                            siblings.push(treeLayer[idx]);\n                            continue;\n                        }\n                    }\n                }\n                const idx = index - 1;\n                if (!currentLayerIndices.includes(idx)) {\n                    if (treeLayer[idx]) {\n                        siblings.push(treeLayer[idx]);\n                        continue;\n                    }\n                }\n            }\n            proofHashes = proofHashes.concat(siblings);\n            const uniqueIndices = new Set();\n            for (const index of currentLayerIndices) {\n                if (index % 2 === 0) {\n                    uniqueIndices.add(index / 2);\n                    continue;\n                }\n                if (index % 2 === 0) {\n                    uniqueIndices.add((index + 1) / 2);\n                    continue;\n                }\n                uniqueIndices.add((index - 1) / 2);\n            }\n            currentLayerIndices = Array.from(uniqueIndices);\n        }\n        return proofHashes;\n    }\n    /**\n     * getHexMultiProof\n     * @desc Returns the multiproof for given tree indices as hex strings.\n     * @param {Number[]} indices - Tree indices.\n     * @return {String[]} - Multiproofs as hex strings.\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getHexMultiProof(indices)\n     *```\n     */\n    getHexMultiProof(tree, indices) {\n        return this.getMultiProof(tree, indices).map((x) => this.bufferToHex(x));\n    }\n    /**\n     * getProofFlags\n     * @desc Returns list of booleans where proofs should be used instead of hashing.\n     * Proof flags are used in the Solidity multiproof verifiers.\n     * @param {Number[]|Buffer[]} leaves\n     * @param {Buffer[]} proofs\n     * @return {Boolean[]} - Boolean flags\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *const proofFlags = tree.getProofFlags(leaves, proof)\n     *```\n     */\n    getProofFlags(leaves, proofs) {\n        if (!Array.isArray(leaves) || leaves.length <= 0) {\n            throw new Error('Invalid Inputs!');\n        }\n        let ids;\n        if (leaves.every(Number.isInteger)) {\n            ids = leaves.sort((a, b) => a === b ? 0 : a > b ? 1 : -1); // Indices where passed\n        }\n        else {\n            ids = leaves.map((el) => this._bufferIndexOf(this.leaves, el)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n        }\n        if (!ids.every((idx) => idx !== -1)) {\n            throw new Error('Element does not exist in Merkle tree');\n        }\n        const _proofs = proofs.map(item => this.bufferify(item));\n        const tested = [];\n        const flags = [];\n        for (let index = 0; index < this.layers.length; index++) {\n            const layer = this.layers[index];\n            ids = ids.reduce((ids, idx) => {\n                const skipped = tested.includes(layer[idx]);\n                if (!skipped) {\n                    const pairElement = this._getPairNode(layer, idx);\n                    const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n                    pairElement && flags.push(!proofUsed);\n                    tested.push(layer[idx]);\n                    tested.push(pairElement);\n                }\n                ids.push((idx / 2) | 0);\n                return ids;\n            }, []);\n        }\n        return flags;\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @return {Boolean}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *const proof = tree.getProof(leaves[2])\n     *const verified = tree.verify(proof, leaves[2], root)\n     *```\n     */\n    verify(proof, targetNode, root) {\n        let hash = this.bufferify(targetNode);\n        root = this.bufferify(root);\n        if (!Array.isArray(proof) ||\n            !targetNode ||\n            !root) {\n            return false;\n        }\n        for (let i = 0; i < proof.length; i++) {\n            const node = proof[i];\n            let data = null;\n            let isLeftNode = null;\n            // case for when proof is hex values only\n            if (typeof node === 'string') {\n                data = this.bufferify(node);\n                isLeftNode = true;\n            }\n            else if (Array.isArray(node)) {\n                isLeftNode = (node[0] === 0);\n                data = this.bufferify(node[1]);\n            }\n            else if (Buffer.isBuffer(node)) {\n                data = node;\n                isLeftNode = true;\n            }\n            else if (node instanceof Object) {\n                data = this.bufferify(node.data);\n                isLeftNode = (node.position === 'left');\n            }\n            else {\n                throw new Error('Expected node to be of type string or object');\n            }\n            const buffers = [];\n            if (this.isBitcoinTree) {\n                buffers.push(buffer_reverse_1.default(hash));\n                buffers[isLeftNode ? 'unshift' : 'push'](buffer_reverse_1.default(data));\n                hash = this.hashFn(Buffer.concat(buffers));\n                hash = buffer_reverse_1.default(this.hashFn(hash));\n            }\n            else {\n                if (this.sortPairs) {\n                    if (Buffer.compare(hash, data) === -1) {\n                        buffers.push(hash, data);\n                        hash = this.hashFn(Buffer.concat(buffers));\n                    }\n                    else {\n                        buffers.push(data, hash);\n                        hash = this.hashFn(Buffer.concat(buffers));\n                    }\n                }\n                else {\n                    buffers.push(hash);\n                    buffers[isLeftNode ? 'unshift' : 'push'](data);\n                    hash = this.hashFn(Buffer.concat(buffers));\n                }\n            }\n        }\n        return Buffer.compare(hash, root) === 0;\n    }\n    /**\n     * verifyMultiProof\n     * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n     * @param {Buffer} root - Merkle tree root\n     * @param {Number[]} proofIndices - Leave indices for proof\n     * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n     * @param {Number} leavesCount - Count of original leaves\n     * @param {Buffer[]} proof - Multiproofs given indices\n     * @return {Boolean}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *const root = tree.getRoot()\n     *const treeFlat = tree.getLayersFlat()\n     *const leavesCount = leaves.length\n     *const proofIndices = [2, 5, 6]\n     *const proofLeaves = proofIndices.map(i => leaves[i])\n     *const proof = tree.getMultiProof(treeFlat, indices)\n     *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n     *```\n     */\n    verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            // TODO: combine these functions and simplify\n            return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n        }\n        const depth = Math.ceil(Math.log2(leavesCount));\n        root = this.bufferify(root);\n        proofLeaves = proofLeaves.map(leaf => this.bufferify(leaf));\n        proof = proof.map(leaf => this.bufferify(leaf));\n        const tree = {};\n        for (const [index, leaf] of this._zip(proofIndices, proofLeaves)) {\n            tree[(Math.pow(2, depth)) + index] = leaf;\n        }\n        for (const [index, proofitem] of this._zip(this.getProofIndices(proofIndices, depth), proof)) {\n            tree[index] = proofitem;\n        }\n        let indexqueue = Object.keys(tree).map(value => +value).sort((a, b) => a - b);\n        indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n        let i = 0;\n        while (i < indexqueue.length) {\n            const index = indexqueue[i];\n            if (index >= 2 && ({}).hasOwnProperty.call(tree, index ^ 1)) {\n                let pair = [tree[index - (index % 2)], tree[index - (index % 2) + 1]];\n                if (this.sortPairs) {\n                    pair = pair.sort(Buffer.compare);\n                }\n                const hash = pair[1] ? this.hashFn(Buffer.concat(pair)) : pair[0];\n                tree[(index / 2) | 0] = hash;\n                indexqueue.push((index / 2) | 0);\n            }\n            i += 1;\n        }\n        return !proofIndices.length || (({}).hasOwnProperty.call(tree, 1) && tree[1].equals(root));\n    }\n    verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n        root = this.bufferify(root);\n        leaves = leaves.map(this.bufferify);\n        proofs = proofs.map(this.bufferify);\n        const leavesLen = leaves.length;\n        const totalHashes = proofFlag.length;\n        const hashes = [];\n        let leafPos = 0;\n        let hashPos = 0;\n        let proofPos = 0;\n        for (let i = 0; i < totalHashes; i++) {\n            const bufA = proofFlag[i] ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++]) : proofs[proofPos++];\n            const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            const buffers = [bufA, bufB].sort(Buffer.compare);\n            hashes[i] = this.hashFn(Buffer.concat(buffers));\n        }\n        return Buffer.compare(hashes[totalHashes - 1], root) === 0;\n    }\n    verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n        root = this.bufferify(root);\n        leaves = leaves.map(leaf => this.bufferify(leaf));\n        proof = proof.map(leaf => this.bufferify(leaf));\n        const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n        return root.equals(computedRoot);\n    }\n    /**\n     * getDepth\n     * @desc Returns the tree depth (number of layers)\n     * @return {Number}\n     * @example\n     *```js\n     *const depth = tree.getDepth()\n     *```\n     */\n    getDepth() {\n        return this.getLayers().length - 1;\n    }\n    /**\n     * getLayersAsObject\n     * @desc Returns the layers as nested objects instead of an array.\n     * @example\n     *```js\n     *const layersObj = tree.getLayersAsObject()\n     *```\n     */\n    getLayersAsObject() {\n        const layers = this.getLayers().map((layer) => layer.map((value) => this.bufferToHex(value, false)));\n        const objs = [];\n        for (let i = 0; i < layers.length; i++) {\n            const arr = [];\n            for (let j = 0; j < layers[i].length; j++) {\n                const obj = { [layers[i][j]]: null };\n                if (objs.length) {\n                    obj[layers[i][j]] = {};\n                    const a = objs.shift();\n                    const akey = Object.keys(a)[0];\n                    obj[layers[i][j]][akey] = a[akey];\n                    if (objs.length) {\n                        const b = objs.shift();\n                        const bkey = Object.keys(b)[0];\n                        obj[layers[i][j]][bkey] = b[bkey];\n                    }\n                }\n                arr.push(obj);\n            }\n            objs.push(...arr);\n        }\n        return objs[0];\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @param {Function} hashFunction - Hash function for hashing leaves and nodes\n     * @param {Object} options - Additional options\n     * @return {Boolean}\n     * @example\n     *```js\n     *const verified = MerkleTree.verify(proof, leaf, root, sha256, options)\n     *```\n     */\n    static verify(proof, targetNode, root, hashFn = sha256_1.default, options = {}) {\n        const tree = new MerkleTree([], hashFn, options);\n        return tree.verify(proof, targetNode, root);\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Buffer[]} tree - Tree as a flat array.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     *\n     *@example\n     * ```js\n     *const flatTree = tree.getLayersFlat()\n     *const indices = [2, 5, 6]\n     *const proof = MerkleTree.getMultiProof(flatTree, indices)\n     *```\n     */\n    static getMultiProof(tree, indices) {\n        const t = new MerkleTree([]);\n        return t.getMultiProof(tree, indices);\n    }\n    /**\n     * resetTree\n     * @desc Resets the tree by clearing the leaves and layers.\n     * @example\n     *```js\n     *tree.resetTree()\n     *```\n     */\n    resetTree() {\n        this.leaves = [];\n        this.layers = [];\n    }\n    /**\n     * getPairNode\n     * @desc Returns the node at the index for given layer.\n     * @param {Buffer[]} layer - Tree layer\n     * @param {Number} index - Index at layer.\n     * @return {Buffer} - Node\n     *\n     *@example\n     * ```js\n     *const node = tree.getPairNode(layer, index)\n     *```\n     */\n    _getPairNode(layer, idx) {\n        const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n        if (pairIdx < layer.length) {\n            return layer[pairIdx];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * toTreeString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @return {String}\n     * @example\n     *```js\n     *console.log(tree.toTreeString())\n     *```\n     */\n    _toTreeString() {\n        const obj = this.getLayersAsObject();\n        return treeify_1.default.asTree(obj, true);\n    }\n    /**\n     * toString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @example\n     *```js\n     *console.log(tree.toString())\n     *```\n     */\n    toString() {\n        return this._toTreeString();\n    }\n    isUnevenTree(treeLayers) {\n        const depth = (treeLayers === null || treeLayers === void 0 ? void 0 : treeLayers.length) || this.getDepth();\n        return !this.isPowOf2(depth);\n    }\n    isPowOf2(v) {\n        return v && !(v & (v - 1));\n    }\n    calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n        const leafTuples = this._zip(leafIndices, leafHashes).sort(([indexA], [indexB]) => indexA - indexB);\n        const leafTupleIndices = leafTuples.map(([index]) => index);\n        const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n        let nextSliceStart = 0;\n        const proofTuplesByLayers = [];\n        for (let i = 0; i < proofIndices.length; i++) {\n            const indices = proofIndices[i];\n            const sliceStart = nextSliceStart;\n            nextSliceStart += indices.length;\n            proofTuplesByLayers[i] = this._zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n        }\n        const tree = [leafTuples];\n        for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {\n            const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex]).sort(([indexA], [indexB]) => indexA - indexB)\n                .map(([, hash]) => hash);\n            const s = tree[layerIndex].map(([layerIndex]) => layerIndex);\n            const parentIndices = [...new Set(s.map((index) => {\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))];\n            const parentLayer = [];\n            for (let i = 0; i < parentIndices.length; i++) {\n                const parentNodeTreeIndex = parentIndices[i];\n                const bufA = currentLayer[i * 2];\n                const bufB = currentLayer[i * 2 + 1];\n                const hash = bufB ? this.hashFn(Buffer.concat([bufA, bufB])) : bufA;\n                parentLayer.push([parentNodeTreeIndex, hash]);\n            }\n            tree.push(parentLayer);\n        }\n        return tree[tree.length - 1][0][1];\n    }\n}\nexports.MerkleTree = MerkleTree;\nif (typeof window !== 'undefined') {\n    ;\n    window.MerkleTree = MerkleTree;\n}\nexports.default = MerkleTree;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleMountainRange = void 0;\nconst Base_1 = __importDefault(require(\"./Base\"));\nconst sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\n// @credit: https://github.com/wanseob/solidity-mmr\n/**\n * @desc The index of this MMR implementation starts from 1 not 0.\n */\nclass MerkleMountainRange extends Base_1.default {\n    constructor(hashFn = sha256_1.default, leaves = [], hashLeafFn, peakBaggingFn, hashBranchFn) {\n        super();\n        this.root = Buffer.alloc(0);\n        this.size = 0;\n        this.width = 0;\n        this.hashes = {};\n        this.data = {};\n        leaves = leaves.map(this.bufferify);\n        this.hashFn = this.bufferifyFn(hashFn);\n        this.hashLeafFn = hashLeafFn;\n        this.peakBaggingFn = peakBaggingFn;\n        this.hashBranchFn = hashBranchFn;\n        for (const leaf of leaves) {\n            this.append(leaf);\n        }\n    }\n    /**\n     * @desc This only stores the hashed value of the leaf.\n     * If you need to retrieve the detail data later, use a map to store them.\n     */\n    append(data) {\n        data = this.bufferify(data);\n        const dataHash = this.hashFn(data);\n        const dataHashHex = this.bufferToHex(dataHash);\n        if (!this.data[dataHashHex] || this.bufferToHex(this.hashFn(this.data[dataHashHex])) !== dataHashHex) {\n            this.data[dataHashHex] = data;\n        }\n        const leaf = this.hashLeaf(this.size + 1, dataHash);\n        this.hashes[this.size + 1] = leaf;\n        this.width += 1;\n        // find peaks for enlarged tree\n        const peakIndexes = this.getPeakIndexes(this.width);\n        // the right most peak's value is the new size of the updated tree\n        this.size = this.getSize(this.width);\n        // starting from the left-most peak, get all peak hashes\n        const peaks = [];\n        for (let i = 0; i < peakIndexes.length; i++) {\n            peaks[i] = this._getOrCreateNode(peakIndexes[i]);\n        }\n        // update the tree root hash\n        this.root = this.peakBagging(this.width, peaks);\n    }\n    /**\n     * @desc It returns the hash of a leaf node with hash(M | DATA )\n     *       M is the index of the node.\n     */\n    hashLeaf(index, dataHash) {\n        dataHash = this.bufferify(dataHash);\n        if (this.hashLeafFn) {\n            return this.bufferify(this.hashLeafFn(index, dataHash));\n        }\n        return this.hashFn(Buffer.concat([this.bufferify(index), dataHash]));\n    }\n    /**\n     * @desc It returns the hash a parent node with hash(M | Left child | Right child)\n     *       M is the index of the node.\n     */\n    hashBranch(index, left, right) {\n        if (this.hashBranchFn) {\n            return this.bufferify(this.hashBranchFn(index, left, right));\n        }\n        return this.hashFn(Buffer.concat([this.bufferify(index), this.bufferify(left), this.bufferify(right)]));\n    }\n    getPeaks() {\n        const peakIndexes = this.getPeakIndexes(this.width);\n        const peaks = [];\n        for (let i = 0; i < peakIndexes.length; i++) {\n            peaks[i] = this.hashes[peakIndexes[i]];\n        }\n        return peaks;\n    }\n    getLeafIndex(width) {\n        if (width % 2 === 1) {\n            return this.getSize(width);\n        }\n        return this.getSize(width - 1) + 1;\n    }\n    /**\n     * @desc It returns all peaks of the smallest merkle mountain range tree which includes\n     *       the given index(size).\n     */\n    getPeakIndexes(width) {\n        const numPeaks = this.numOfPeaks(width);\n        const peakIndexes = [];\n        let count = 0;\n        let size = 0;\n        for (let i = 255; i > 0; i--) {\n            if ((width & (1 << (i - 1))) !== 0) {\n                // peak exists\n                size = size + (1 << i) - 1;\n                peakIndexes[count++] = size;\n                if (peakIndexes.length >= numPeaks) {\n                    break;\n                }\n            }\n        }\n        if (count !== peakIndexes.length) {\n            throw new Error('invalid bit calculation');\n        }\n        return peakIndexes;\n    }\n    numOfPeaks(width) {\n        let bits = width;\n        let num = 0;\n        while (bits > 0) {\n            if (bits % 2 === 1) {\n                num++;\n            }\n            bits = bits >> 1;\n        }\n        return num;\n    }\n    peakBagging(width, peaks) {\n        const size = this.getSize(width);\n        if (this.numOfPeaks(width) !== peaks.length) {\n            throw new Error('received invalid number of peaks');\n        }\n        if (width === 0 && !peaks.length) {\n            return Buffer.alloc(0);\n        }\n        if (this.peakBaggingFn) {\n            return this.bufferify(this.peakBaggingFn(size, peaks));\n        }\n        return this.hashFn(Buffer.concat([this.bufferify(size), ...peaks.map(this.bufferify)]));\n    }\n    /**\n     * @desc It returns the size of the tree.\n     */\n    getSize(width) {\n        return (width << 1) - this.numOfPeaks(width);\n    }\n    /**\n     * @desc It returns the root value of the tree.\n     */\n    getRoot() {\n        return this.root;\n    }\n    getHexRoot() {\n        return this.bufferToHex(this.getRoot());\n    }\n    /**\n     * @dev It returns the hash value of a node for the given position. Note that the index starts from 1.\n     */\n    getNode(index) {\n        return this.hashes[index];\n    }\n    /**\n     * @desc It returns the height of the highest peak.\n     */\n    mountainHeight(size) {\n        let height = 1;\n        while (1 << height <= size + height) {\n            height++;\n        }\n        return height - 1;\n    }\n    /**\n     * @desc It returns the height of the index.\n     */\n    heightAt(index) {\n        let reducedIndex = index;\n        let peakIndex = 0;\n        let height = 0;\n        // if an index has a left mountain then subtract the mountain\n        while (reducedIndex > peakIndex) {\n            reducedIndex -= (1 << height) - 1;\n            height = this.mountainHeight(reducedIndex);\n            peakIndex = (1 << height) - 1;\n        }\n        // index is on the right slope\n        return height - (peakIndex - reducedIndex);\n    }\n    /**\n     * @desc It returns whether the index is the leaf node or not\n     */\n    isLeaf(index) {\n        return this.heightAt(index) === 1;\n    }\n    /**\n     * @desc It returns the children when it is a parent node.\n     */\n    getChildren(index) {\n        const left = index - (1 << (this.heightAt(index) - 1));\n        const right = index - 1;\n        if (left === right) {\n            throw new Error('not a parent');\n        }\n        return [left, right];\n    }\n    /**\n     * @desc It returns a merkle proof for a leaf. Note that the index starts from 1.\n     */\n    getMerkleProof(index) {\n        if (index > this.size) {\n            throw new Error('out of range');\n        }\n        if (!this.isLeaf(index)) {\n            throw new Error('not a leaf');\n        }\n        const root = this.root;\n        const width = this.width;\n        // find all peaks for bagging\n        const peaks = this.getPeakIndexes(this.width);\n        const peakBagging = [];\n        let cursor = 0;\n        for (let i = 0; i < peaks.length; i++) {\n            // collect the hash of all peaks\n            peakBagging[i] = this.hashes[peaks[i]];\n            // find the peak which includes the target index\n            if (peaks[i] >= index && cursor === 0) {\n                cursor = peaks[i];\n            }\n        }\n        let left = 0;\n        let right = 0;\n        // get hashes of the siblings in the mountain which the index belgons to.\n        // it moves the cursor from the summit of the mountain down to the target index\n        let height = this.heightAt(cursor);\n        const siblings = [];\n        while (cursor !== index) {\n            height--;\n            ([left, right] = this.getChildren(cursor));\n            // move the cursor down to the left size or right size\n            cursor = index <= left ? left : right;\n            // remaining node is the sibling\n            siblings[height - 1] = this.hashes[index <= left ? right : left];\n        }\n        return {\n            root,\n            width,\n            peakBagging,\n            siblings\n        };\n    }\n    /**\n     * @desc It returns true when the given params verifies that the given value exists in the tree or reverts the transaction.\n     */\n    verify(root, width, index, value, peaks, siblings) {\n        value = this.bufferify(value);\n        const size = this.getSize(width);\n        if (size < index) {\n            throw new Error('index is out of range');\n        }\n        // check the root equals the peak bagging hash\n        if (!root.equals(this.peakBagging(width, peaks))) {\n            throw new Error('invalid root hash from the peaks');\n        }\n        // find the mountain where the target index belongs to\n        let cursor = 0;\n        let targetPeak;\n        const peakIndexes = this.getPeakIndexes(width);\n        for (let i = 0; i < peakIndexes.length; i++) {\n            if (peakIndexes[i] >= index) {\n                targetPeak = peaks[i];\n                cursor = peakIndexes[i];\n                break;\n            }\n        }\n        if (!targetPeak) {\n            throw new Error('target not found');\n        }\n        // find the path climbing down\n        let height = siblings.length + 1;\n        const path = new Array(height);\n        let left = 0;\n        let right = 0;\n        while (height > 0) {\n            // record the current cursor and climb down\n            path[--height] = cursor;\n            if (cursor === index) {\n                // on the leaf node. Stop climbing down\n                break;\n            }\n            else {\n                // on the parent node. Go left or right\n                ([left, right] = this.getChildren(cursor));\n                cursor = index > left ? right : left;\n                continue;\n            }\n        }\n        // calculate the summit hash climbing up again\n        let node;\n        while (height < path.length) {\n            // move cursor\n            cursor = path[height];\n            if (height === 0) {\n                // cusor is on the leaf\n                node = this.hashLeaf(cursor, this.hashFn(value));\n            }\n            else if (cursor - 1 === path[height - 1]) {\n                // cursor is on a parent and a siblings is on the left\n                node = this.hashBranch(cursor, siblings[height - 1], node);\n            }\n            else {\n                // cursor is on a parent and a siblings is on the right\n                node = this.hashBranch(cursor, node, siblings[height - 1]);\n            }\n            // climb up\n            height++;\n        }\n        // computed hash value of the summit should equal to the target peak hash\n        if (!node.equals(targetPeak)) {\n            throw new Error('hashed peak is invalid');\n        }\n        return true;\n    }\n    peaksToPeakMap(width, peaks) {\n        const peakMap = {};\n        let bitIndex = 0;\n        let peakRef = 0;\n        let count = peaks.length;\n        for (let height = 1; height <= 32; height++) {\n            // index starts from the right most bit\n            bitIndex = 32 - height;\n            peakRef = 1 << (height - 1);\n            if ((width & peakRef) !== 0) {\n                peakMap[bitIndex] = peaks[--count];\n            }\n            else {\n                peakMap[bitIndex] = 0;\n            }\n        }\n        if (count !== 0) {\n            throw new Error('invalid number of peaks');\n        }\n        return peakMap;\n    }\n    peakMapToPeaks(width, peakMap) {\n        const arrLength = this.numOfPeaks(width);\n        const peaks = new Array(arrLength);\n        let count = 0;\n        for (let i = 0; i < 32; i++) {\n            if (peakMap[i] !== 0) {\n                peaks[count++] = peakMap[i];\n            }\n        }\n        if (count !== arrLength) {\n            throw new Error('invalid number of peaks');\n        }\n        return peaks;\n    }\n    peakUpdate(width, prevPeakMap, itemHash) {\n        const nextPeakMap = {};\n        const newWidth = width + 1;\n        let cursorIndex = this.getLeafIndex(newWidth);\n        let cursorNode = this.hashLeaf(cursorIndex, itemHash);\n        let bitIndex = 0;\n        let peakRef = 0;\n        let prevPeakExist = false;\n        let nextPeakExist = false;\n        let obtained = false;\n        for (let height = 1; height <= 32; height++) {\n            // index starts from the right most bit\n            bitIndex = 32 - height;\n            if (obtained) {\n                nextPeakMap[bitIndex] = prevPeakMap[bitIndex];\n            }\n            else {\n                peakRef = 1 << (height - 1);\n                prevPeakExist = (width & peakRef) !== 0;\n                nextPeakExist = (newWidth & peakRef) !== 0;\n                // get new cursor node with hashing the peak and the current cursor\n                cursorIndex++;\n                if (prevPeakExist) {\n                    cursorNode = this.hashBranch(cursorIndex, prevPeakMap[bitIndex], cursorNode);\n                }\n                // if new peak exists for the bit index\n                if (nextPeakExist) {\n                    // if prev peak exists for the bit index\n                    if (prevPeakExist) {\n                        nextPeakMap[bitIndex] = prevPeakMap[bitIndex];\n                    }\n                    else {\n                        nextPeakMap[bitIndex] = cursorNode;\n                    }\n                    obtained = true;\n                }\n                else {\n                    nextPeakMap[bitIndex] = 0;\n                }\n            }\n        }\n        return nextPeakMap;\n    }\n    rollUp(root, width, peaks, itemHashes) {\n        // check the root equals the peak bagging hash\n        if (!root.equals(this.peakBagging(width, peaks))) {\n            throw new Error('invalid root hash from the peaks');\n        }\n        let tmpWidth = width;\n        let tmpPeakMap = this.peaksToPeakMap(width, peaks);\n        for (let i = 0; i < itemHashes.length; i++) {\n            tmpPeakMap = this.peakUpdate(tmpWidth, tmpPeakMap, itemHashes[i]);\n            tmpWidth++;\n        }\n        return this.peakBagging(tmpWidth, this.peakMapToPeaks(tmpWidth, tmpPeakMap));\n    }\n    /**\n     * @desc It returns the hash value of the node for the index.\n     *      If the hash already exists it simply returns the stored value. On the other hand,\n     *      it computes hashes recursively downward.\n     *      Only appending an item calls this function.\n     */\n    _getOrCreateNode(index) {\n        if (index > this.size) {\n            throw new Error('out of range');\n        }\n        if (!this.hashes[index]) {\n            const [leftIndex, rightIndex] = this.getChildren(index);\n            const leftHash = this._getOrCreateNode(leftIndex);\n            const rightHash = this._getOrCreateNode(rightIndex);\n            this.hashes[index] = this.hashBranch(index, leftHash, rightHash);\n        }\n        return this.hashes[index];\n    }\n}\nexports.MerkleMountainRange = MerkleMountainRange;\nexports.default = MerkleMountainRange;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleTree = void 0;\nconst MerkleTree_1 = __importDefault(require(\"./MerkleTree\"));\nexports.MerkleTree = MerkleTree_1.default;\nvar MerkleMountainRange_1 = require(\"./MerkleMountainRange\");\nObject.defineProperty(exports, \"MerkleMountainRange\", { enumerable: true, get: function () { return MerkleMountainRange_1.MerkleMountainRange; } });\nexports.default = MerkleTree_1.default;\n","export type { ContractType, NetworkOrSignerOrProvider } from \"./core/types\";\nexport type {\n  NFTMetadataInput,\n  NFTMetadataOwner,\n  NFTMetadata,\n} from \"./schema/tokens/common\";\n\nexport type { Role } from \"./common/role\";\n\nexport { CommonContractSchema } from \"./schema/contracts/common\";\nexport * from \"./schema/contracts/common/claim-conditions\";\nexport * from \"./schema/tokens/common/properties\";\nexport * from \"./constants/chains\";\nexport * from \"./schema/tokens/token\";\nexport * from \"./schema/tokens/edition\";\nexport * from \"./schema/contracts/common\";\nexport * from \"./schema/contracts/custom\";\nexport type { SDKOptions, SDKOptionsSchema } from \"./schema/sdk-options\";\n\nexport * from \"./core\";\nexport * from \"./types\";\nexport * from \"./enums\";\nexport * from \"./common\";\nexport * from \"./constants\";\nexport * from \"./contracts\";\n","import {\n  AddressSchema,\n  BasisPointsSchema,\n  FileBufferOrStringSchema,\n  JsonSchema,\n} from \"../../shared\";\nimport { z } from \"zod\";\nimport { constants } from \"ethers\";\n\n/**\n * @internal\n */\nexport const CommonContractSchema = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n  image: FileBufferOrStringSchema.optional(),\n  external_link: z.string().url().optional(),\n});\n\n/**\n * @internal\n */\nexport const CommonContractOutputSchema = CommonContractSchema.extend({\n  image: z.string().optional(),\n}).catchall(z.lazy(() => JsonSchema));\n\n/**\n * @internal\n */\nexport const CommonRoyaltySchema = z.object({\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   *\n   *  @internalremarks used by OpenSea \"seller_fee_basis_points\"\n   */\n  seller_fee_basis_points: BasisPointsSchema.default(0),\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   * @internalremarks used by OpenSea \"fee_recipient\"\n   */\n  fee_recipient: AddressSchema.default(constants.AddressZero),\n});\n\n/**\n * @internal\n */\nexport const CommonPrimarySaleSchema = z.object({\n  /**\n   * primary sale recipient address\n   */\n  primary_sale_recipient: AddressSchema,\n});\n\n/**\n * @internal\n */\nexport const CommonPlatformFeeSchema = z.object({\n  /**\n   * platform fee basis points\n   */\n  platform_fee_basis_points: BasisPointsSchema.default(0),\n  /**\n   * platform fee recipient address\n   */\n  platform_fee_recipient: AddressSchema.default(constants.AddressZero),\n});\n\n/**\n * @internal\n */\nexport const CommonTrustedForwarderSchema = z.object({\n  trusted_forwarders: z.array(AddressSchema).default([]),\n});\n\n/**\n * @internal\n */\nexport const CommonSymbolSchema = z.object({\n  symbol: z.string().optional().default(\"\"),\n});\n\nexport * from \"./claim-conditions\";\nexport * from \"./currency\";\nexport * from \"./signature\";\nexport * from \"./snapshots\";\n","import { BigNumber, CallOverrides, utils } from \"ethers\";\nimport { z } from \"zod\";\nimport { Json } from \"../core/types\";\nimport { isBrowser } from \"../common/utils\";\n\nexport const MAX_BPS = 10_000;\n\nconst fileOrBufferUnion = isBrowser()\n  ? ([z.instanceof(File), z.string()] as [\n      z.ZodType<InstanceType<typeof File>>,\n      z.ZodString,\n    ])\n  : ([z.instanceof(Buffer), z.string()] as [\n      z.ZodTypeAny, // @fixme, this is a hack to make browser happy for now\n      z.ZodString,\n    ]);\n\nexport const FileBufferOrStringSchema = z.union(fileOrBufferUnion);\nexport type FileBufferOrString = z.output<typeof FileBufferOrStringSchema>;\n\nexport const BytesLikeSchema = z.union([z.array(z.number()), z.string()]);\n\nexport const BigNumberSchema = z\n  .union([\n    z.string(),\n    z.number(),\n    z.bigint(),\n    z.custom<BigNumber>((data) => {\n      return BigNumber.isBigNumber(data);\n    }),\n  ])\n  .transform((arg) => BigNumber.from(arg));\n\nexport const BigNumberishSchema = BigNumberSchema.transform((arg) =>\n  arg.toString(),\n);\n\nexport const BasisPointsSchema = z\n  .number()\n  .max(MAX_BPS, \"Cannot exeed 100%\")\n  .min(0, \"Cannot be below 0%\");\n\nexport const PercentSchema = z\n  .number()\n  .max(100, \"Cannot exeed 100%\")\n  .min(0, \"Cannot be below 0%\");\n\nexport const JsonLiteral = z.union([\n  z.string(),\n  z.number(),\n  z.boolean(),\n  z.null(),\n]);\n\nexport const JsonSchema: z.ZodSchema<Json> = z.lazy(() =>\n  z.union([JsonLiteral, z.array(JsonSchema), z.record(JsonSchema)]),\n);\nexport const JsonObjectSchema = z.record(JsonSchema);\nexport const HexColor = z.union([\n  z\n    .string()\n    .regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, \"Invalid hex color\")\n    .transform((val) => val.replace(\"#\", \"\")),\n  z.string().length(0),\n]);\n\nexport const AddressSchema = z.string().refine(\n  (arg) => utils.isAddress(arg),\n  (out) => {\n    return {\n      message: `${out} is not a valid address`,\n    };\n  },\n);\n\nexport const PriceSchema = z\n  .union([\n    z.string().regex(/^([0-9]+\\.?[0-9]*|\\.[0-9]+)$/, \"Invalid price\"),\n    z.number().min(0, \"Price cannot be negative\"),\n  ])\n  .transform((arg) => (typeof arg === \"number\" ? arg.toString() : arg));\n\nexport const RawDateSchema = z.date().transform((i) => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n});\n\n/**\n * Default to now\n */\nexport const StartDateSchema = RawDateSchema.default(new Date(0));\n\n/**\n * Default to 10 years from now\n */\nexport const EndDateSchema = RawDateSchema.default(\n  new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10),\n);\n\nexport const CallOverrideSchema: z.ZodType<CallOverrides> = z\n  .object({\n    gasLimit: BigNumberishSchema.optional(),\n    gasPrice: BigNumberishSchema.optional(),\n    maxFeePerGas: BigNumberishSchema.optional(),\n    maxPriorityFeePerGas: BigNumberishSchema.optional(),\n    nonce: BigNumberishSchema.optional(),\n    value: BigNumberishSchema.optional(),\n    blockTag: z.union([z.string(), z.number()]).optional(),\n    from: AddressSchema.optional(),\n    type: z.number().optional(),\n  })\n  .strict();\n","/**\n * @internal\n */\nexport const isBrowser = () => typeof window !== \"undefined\";\n\n/**\n * @internal\n */\nexport const isNode = () => !isBrowser();\n","import { z } from \"zod\";\nimport { BigNumber, utils } from \"ethers\";\nimport {\n  BigNumberishSchema,\n  BigNumberSchema,\n  BytesLikeSchema,\n  PriceSchema,\n  StartDateSchema,\n} from \"../../shared\";\n\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../constants/currency\";\nimport { CurrencyValueSchema } from \"./currency\";\nimport { SnapshotInputSchema } from \"./snapshots\";\n\n/**\n * @internal\n */\nexport const QuantitySchema = z\n  .union([PriceSchema, z.literal(\"unlimited\")])\n  .default(\"unlimited\");\n\n/**\n * @internal\n */\nexport const ClaimConditionInputSchema = z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: PriceSchema.default(0),\n  maxQuantity: QuantitySchema,\n  quantityLimitPerTransaction: QuantitySchema,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(utils.hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema),\n});\n\n/**\n * @internal\n */\nexport const ClaimConditionInputArray = z.array(ClaimConditionInputSchema);\n\n/**\n * @internal\n */\nexport const PartialClaimConditionInputSchema =\n  ClaimConditionInputSchema.partial();\n\n/**\n * @internal\n */\nexport const ClaimConditionOutputSchema = ClaimConditionInputSchema.extend({\n  availableSupply: QuantitySchema,\n  currentMintSupply: QuantitySchema,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\",\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform((n) => new Date(n.toNumber() * 1000)),\n});\n","import { ChainId, SUPPORTED_CHAIN_ID } from \"./chains\";\nimport { NativeToken } from \"../types/currency\";\n\n/**\n * @public\n */\nexport const NATIVE_TOKEN_ADDRESS =\n  \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n/**\n * @public\n */\nexport const NATIVE_TOKENS: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  NativeToken\n> = {\n  [ChainId.Mainnet]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Rinkeby]: {\n    name: \"Rinkeby Ether\",\n    symbol: \"RIN\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Goerli]: {\n    name: \"Görli Ether\",\n    symbol: \"GOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Polygon]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\",\n    },\n  },\n  [ChainId.Mumbai]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\",\n    },\n  },\n  [ChainId.Avalanche]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\",\n    },\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\",\n    },\n  },\n  [ChainId.Fantom]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\",\n    },\n  },\n  [ChainId.FantomTestnet]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\",\n    },\n  },\n  [ChainId.Arbitrum]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.ArbitrumTestnet]: {\n    name: \"Arbitrum Rinkeby Ether\",\n    symbol: \"ARETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xEBbc3452Cc911591e4F18f3b36727Df45d6bd1f9\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Optimism]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.OptimismTestnet]: {\n    name: \"Kovan Ether\",\n    symbol: \"KOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xbC6F6b680bc61e30dB47721c6D1c5cde19C1300d\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Hardhat]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n};\n\n/**\n * Returns the native token for a given chain\n * @param chainId - the chain id\n * @public\n */\nexport function getNativeTokenByChainId(chainId: ChainId): NativeToken {\n  return NATIVE_TOKENS[chainId as SUPPORTED_CHAIN_ID];\n}\n","/**\n * @public\n */\nexport enum ChainId {\n  Mainnet = 1,\n  Rinkeby = 4,\n  Goerli = 5,\n  Polygon = 137,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n  Optimism = 10,\n  OptimismTestnet = 69,\n  Arbitrum = 42161,\n  ArbitrumTestnet = 421611,\n}\n\n/**\n * @public\n */\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Goerli\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet\n  | ChainId.Optimism\n  | ChainId.OptimismTestnet\n  | ChainId.Arbitrum\n  | ChainId.ArbitrumTestnet;\n\n/**\n * @public\n */\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Goerli,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n  ChainId.Optimism,\n  ChainId.OptimismTestnet,\n  ChainId.Arbitrum,\n  ChainId.ArbitrumTestnet,\n];\n","import { z } from \"zod\";\nimport { BigNumberSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const CurrencySchema = z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number(),\n});\n\n/**\n * @internal\n */\nexport const CurrencyValueSchema = CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string(),\n});\n","import { z } from \"zod\";\nimport { AddressSchema, PriceSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const MerkleSchema = z.object({\n  merkle: z.record(z.string()).default({}),\n});\n\n/**\n * @internal\n */\nexport const SnapshotAddressInput = z.object({\n  address: AddressSchema,\n  maxClaimable: PriceSchema.default(0),\n});\n\n/**\n * @internal\n */\nexport const SnapshotInputSchema = z.union([\n  z.array(z.string()).transform((strings) =>\n    strings.map((address) =>\n      SnapshotAddressInput.parse({\n        address,\n      }),\n    ),\n  ),\n  z.array(SnapshotAddressInput),\n]);\n\n/**\n * @internal\n */\nexport const SnapshotSchema = z.object({\n  /**\n   * The merkle root\n   */\n  merkleRoot: z.string(),\n  claims: z.array(\n    SnapshotAddressInput.extend({\n      proof: z.array(z.string()),\n    }),\n  ),\n});\n\n/**\n * @internal\n */\nexport const SnapshotInfoSchema = z.object({\n  merkleRoot: z.string(),\n  snapshotUri: z.string(),\n  snapshot: SnapshotSchema,\n});\n","import {\n  BasisPointsSchema,\n  BigNumberishSchema,\n  BigNumberSchema,\n  EndDateSchema,\n  PriceSchema,\n  StartDateSchema,\n} from \"../../shared\";\nimport { z } from \"zod\";\nimport { NFTInputOrUriSchema } from \"../../tokens/common\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../constants/currency\";\nimport { constants } from \"ethers\";\nimport { resolveOrGenerateId } from \"../../../common/signature-minting\";\n\n/**\n * @internal\n */\nexport const BaseSignaturePayloadInput = z.object({\n  to: z.string().default(constants.AddressZero),\n  price: PriceSchema.default(0),\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z\n    .string()\n    .optional()\n    .transform((arg) => resolveOrGenerateId(arg)),\n  primarySaleRecipient: z.string().default(constants.AddressZero),\n});\n\n/**\n * @internal\n */\nexport const Signature20PayloadInput = BaseSignaturePayloadInput.extend({\n  quantity: PriceSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature20PayloadOutput = Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature721PayloadInput = BaseSignaturePayloadInput.extend({\n  metadata: NFTInputOrUriSchema,\n  royaltyRecipient: z.string().default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0),\n});\n\n/**\n * @internal\n */\nexport const Signature721PayloadOutput = Signature721PayloadInput.extend({\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature1155PayloadInput = Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberishSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature1155PayloadInputWithTokenId =\n  Signature1155PayloadInput.extend({\n    tokenId: BigNumberishSchema,\n  });\n\n/**\n * @internal\n */\nexport const Signature1155PayloadOutput = Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature721WithQuantityInput = Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberSchema.default(1),\n});\n\n/**\n * @internal\n */\nexport const Signature721WithQuantityOutput = Signature721PayloadOutput.extend({\n  quantity: BigNumberSchema.default(1),\n});\n\n/**\n * @public\n */\nexport type FilledSignaturePayload20 = z.output<typeof Signature20PayloadInput>;\n/**\n * @public\n */\nexport type PayloadWithUri20 = z.output<typeof Signature20PayloadOutput>;\n/**\n * @public\n */\nexport type PayloadToSign20 = z.input<typeof Signature20PayloadInput>;\n/**\n * @public\n */\nexport type SignedPayload20 = {\n  payload: PayloadWithUri20;\n  signature: string;\n};\n\n/**\n * @public\n */\nexport type FilledSignaturePayload721 = z.output<\n  typeof Signature721PayloadInput\n>;\n/**\n * @public\n */\nexport type PayloadWithUri721 = z.output<typeof Signature721PayloadOutput>;\n/**\n * @public\n */\nexport type PayloadToSign721 = z.input<typeof Signature721PayloadInput>;\n/**\n * @public\n */\nexport type SignedPayload721 = {\n  payload: PayloadWithUri721;\n  signature: string;\n};\n\n/**\n * @public\n */\nexport type FilledSignaturePayload1155 = z.output<\n  typeof Signature1155PayloadInput\n>;\n/**\n * @public\n */\nexport type FilledSignaturePayload1155WithTokenId = z.output<\n  typeof Signature1155PayloadInputWithTokenId\n>;\n/**\n * @public\n */\nexport type FilledSignature721WithQuantity = z.output<\n  typeof Signature721WithQuantityInput\n>;\n/**\n * @public\n */\nexport type PayloadWithUri1155 = z.output<typeof Signature1155PayloadOutput>;\n/**\n * @public\n */\nexport type PayloadWithUri721withQuantity = z.output<\n  typeof Signature721WithQuantityOutput\n>;\n/**\n * @public\n */\nexport type PayloadToSign1155 = z.input<typeof Signature1155PayloadInput>;\n/**\n * @public\n */\nexport type PayloadToSign1155WithTokenId = z.input<\n  typeof Signature1155PayloadInputWithTokenId\n>;\n/**\n * @public\n */\nexport type PayloadToSign721withQuantity = z.input<\n  typeof Signature721WithQuantityInput\n>;\n/**\n * @public\n */\nexport type SignedPayload1155 = {\n  payload: PayloadWithUri1155;\n  signature: string;\n};\n\n/**\n * @public\n */\nexport type SignedPayload721WithQuantitySignature = {\n  payload: PayloadWithUri721withQuantity;\n  signature: string;\n};\n\nexport const MintRequest20 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"price\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\nexport const MintRequest721 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"price\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\nexport const MintRequest1155 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"tokenId\", type: \"uint256\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"pricePerToken\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\nexport const MintRequest721withQuantity = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"pricePerToken\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n","import { z } from \"zod\";\nimport {\n  BigNumberSchema,\n  FileBufferOrStringSchema,\n  HexColor,\n  JsonSchema,\n} from \"../../shared\";\nimport { OptionalPropertiesInput } from \"./properties\";\n\n/**\n * @internal\n */\nexport const CommonTokenInput = z\n  .object({\n    name: z.string().optional(),\n    description: z.string().nullable().optional(),\n    image: FileBufferOrStringSchema.nullable().optional(),\n    external_url: FileBufferOrStringSchema.nullable().optional(),\n  })\n  .catchall(z.lazy(() => JsonSchema));\n\n/**\n * @internal\n */\nexport const CommonTokenOutput = CommonTokenInput.extend({\n  id: BigNumberSchema,\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n});\n\n/**\n * @internal\n */\nexport const CommonNFTInput = CommonTokenInput.extend({\n  animation_url: FileBufferOrStringSchema.optional(),\n  background_color: HexColor.optional(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput,\n});\n\n/**\n * @internal\n */\nexport const NFTInputOrUriSchema = z.union([CommonNFTInput, z.string()]);\n\n/**\n * @internal\n */\nexport const CommonNFTOutput = CommonTokenOutput.extend({\n  animation_url: z.string().nullable().optional(),\n});\n\n/**\n * @public\n */\nexport type NFTMetadataInput = z.input<typeof CommonNFTInput>;\n/**\n * @public\n */\nexport type NFTMetadataOrUri = z.input<typeof NFTInputOrUriSchema>;\n/**\n * @public\n */\nexport type NFTMetadata = z.output<typeof CommonNFTOutput>;\n/**\n * @public\n */\nexport type NFTMetadataOwner = { metadata: NFTMetadata; owner: string };\n","import { z } from \"zod\";\nimport { JsonObjectSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const OptionalPropertiesInput = z\n  .union([z.array(JsonObjectSchema), JsonObjectSchema])\n  .optional();\n","import { v4 as uuidv4 } from \"uuid\";\nimport { utils } from \"ethers\";\n\nexport function resolveOrGenerateId(requestUId: string | undefined): string {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    uuidv4({}, buffer);\n    return utils.hexlify(utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return utils.hexlify(requestUId as string);\n  }\n}\n","import { z } from \"zod\";\nimport { AddressSchema, PriceSchema } from \"../shared\";\n\n/**\n * @internal\n */\nexport const TokenMintInputSchema = z.object({\n  toAddress: AddressSchema,\n  amount: PriceSchema,\n});\n\n/**\n * @public\n */\nexport type TokenMintInput = z.input<typeof TokenMintInputSchema>;\n","import { z } from \"zod\";\nimport { BigNumberishSchema, BigNumberSchema } from \"../shared\";\nimport { CommonNFTInput, CommonNFTOutput, NFTInputOrUriSchema } from \"./common\";\n\n/**\n * @internal\n */\nexport const EditionMetadataOutputSchema = z.object({\n  supply: BigNumberSchema,\n  metadata: CommonNFTOutput,\n});\n\n/**\n * @internal\n */\nexport const EditionMetadataWithOwnerOutputSchema =\n  EditionMetadataOutputSchema.extend({\n    owner: z.string(),\n    quantityOwned: BigNumberSchema,\n  });\n\n/**\n * @internal\n */\nexport const EditionMetadataInputSchema = z.object({\n  supply: BigNumberishSchema,\n  metadata: CommonNFTInput,\n});\n\n/**\n * @internal\n */\nexport const EditionMetadataInputOrUriSchema = z.object({\n  supply: BigNumberishSchema,\n  metadata: NFTInputOrUriSchema,\n});\n\n/**\n * @public\n */\nexport type EditionMetadata = z.output<typeof EditionMetadataOutputSchema>;\n/**\n * @public\n */\nexport type EditionMetadataOwner = z.output<\n  typeof EditionMetadataWithOwnerOutputSchema\n>;\n/**\n * @public\n */\nexport type EditionMetadataInput = z.input<typeof EditionMetadataInputSchema>;\n\n/**\n * @public\n */\nexport type EditionMetadataOrUri = z.input<\n  typeof EditionMetadataInputOrUriSchema\n>;\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n  MerkleSchema,\n} from \"./common\";\nimport { z } from \"zod\";\nimport {\n  AddressSchema,\n  BigNumberishSchema,\n  FileBufferOrStringSchema,\n  JsonSchema,\n} from \"../shared\";\nimport { BigNumberish } from \"ethers\";\nimport { toSemver } from \"../../common/index\";\nimport { ChainId, CONTRACT_ADDRESSES } from \"../../constants/index\";\n\n/**\n * @internal\n */\nexport const BYOCContractMetadataSchema = CommonContractSchema.catchall(\n  z.lazy(() => JsonSchema),\n);\n\n/**\n * @internal\n */\nexport type CustomContractMetadata = z.input<typeof BYOCContractMetadataSchema>;\n\n/**\n * @internal\n */\nexport const CustomContractInput = BYOCContractMetadataSchema.merge(\n  CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial(),\n);\n\n/**\n * @internal\n */\nexport const CustomContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial(),\n);\n\n/**\n * @internal\n */\nexport const CustomContractDeploy = CustomContractInput.merge(\n  CommonPlatformFeeSchema.merge(CommonPrimarySaleSchema)\n    .merge(CommonTrustedForwarderSchema)\n    .partial(),\n);\n\n/**\n * @internal\n */\nexport const CustomContractSchema = {\n  deploy: CustomContractDeploy,\n  output: CustomContractOutput,\n  input: CustomContractInput,\n};\n\n/**\n * @internal\n */\nconst AbiTypeBaseSchema = z\n  .object({\n    type: z.string(),\n    name: z.string(),\n  })\n  .catchall(z.any());\n\n/**\n * @internal\n */\nexport const AbiTypeSchema = AbiTypeBaseSchema.extend({\n  stateMutability: z.string().optional(),\n  components: z.array(AbiTypeBaseSchema).optional(),\n}).catchall(z.any());\n\n/**\n * @internal\n */\nexport const AbiObjectSchema = z\n  .object({\n    type: z.string(),\n    name: z.string().default(\"\"),\n    inputs: z.array(AbiTypeSchema).default([]),\n    outputs: z.array(AbiTypeSchema).default([]),\n  })\n  .catchall(z.any());\n\n/**\n * @internal\n */\nexport const AbiSchema = z.array(AbiObjectSchema);\n\n/**\n * @internal\n */\nexport const PreDeployMetadata = z\n  .object({\n    name: z.string(),\n    metadataUri: z.string(),\n    bytecodeUri: z.string(),\n    analytics: z.any().optional(),\n  })\n  .catchall(z.any());\n\n/**\n * @internal\n */\nexport const ChainIdToAddressSchema = z.record(z.string(), z.string());\n\n/**\n * @internal\n */\n// TODO should have an input and ouput version of this schema\nexport const FactoryDeploymentSchema = z.object({\n  implementationAddresses: ChainIdToAddressSchema,\n  implementationInitializerFunction: z.string().default(\"initialize\"),\n  factoryAddresses: ChainIdToAddressSchema.default({\n    [ChainId.Mainnet]: CONTRACT_ADDRESSES[ChainId.Mainnet].twFactory,\n    [ChainId.Goerli]: CONTRACT_ADDRESSES[ChainId.Goerli].twFactory,\n    [ChainId.Rinkeby]: CONTRACT_ADDRESSES[ChainId.Rinkeby].twFactory,\n    [ChainId.Polygon]: CONTRACT_ADDRESSES[ChainId.Polygon].twFactory,\n    [ChainId.Mumbai]: CONTRACT_ADDRESSES[ChainId.Mumbai].twFactory,\n    [ChainId.Fantom]: CONTRACT_ADDRESSES[ChainId.Fantom].twFactory,\n    [ChainId.FantomTestnet]:\n      CONTRACT_ADDRESSES[ChainId.FantomTestnet].twFactory,\n    [ChainId.Optimism]: CONTRACT_ADDRESSES[ChainId.Optimism].twFactory,\n    [ChainId.OptimismTestnet]:\n      CONTRACT_ADDRESSES[ChainId.OptimismTestnet].twFactory,\n    [ChainId.Arbitrum]: CONTRACT_ADDRESSES[ChainId.Arbitrum].twFactory,\n    [ChainId.ArbitrumTestnet]:\n      CONTRACT_ADDRESSES[ChainId.ArbitrumTestnet].twFactory,\n  }),\n});\n\n/**\n * @internal\n */\nexport const ExtraPublishMetadataSchema = z\n  .object({\n    version: z.string().refine(\n      (v) => {\n        try {\n          toSemver(v);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      },\n      (out) => {\n        return {\n          message: `'${out}' is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1`,\n        };\n      },\n    ),\n    displayName: z.string().optional(),\n    description: z.string().optional(),\n    readme: z.string().optional(),\n    license: z.string().optional(),\n    changelog: z.string().optional(),\n    tags: z.array(z.string()).optional(),\n    logo: FileBufferOrStringSchema.nullable().optional(),\n    isDeployableViaFactory: z.boolean().optional(),\n    factoryDeploymentData: FactoryDeploymentSchema.partial().optional(),\n  })\n  .catchall(z.any());\nexport type ExtraPublishMetadata = z.infer<typeof ExtraPublishMetadataSchema>;\n\n/**\n * @internal\n */\nexport const FullPublishMetadataSchema = PreDeployMetadata.merge(\n  ExtraPublishMetadataSchema,\n).extend({\n  publisher: AddressSchema.optional(),\n});\nexport type FullPublishMetadata = z.infer<typeof FullPublishMetadataSchema>;\n\n/**\n * @internal\n */\nexport const ProfileSchemaInput = z.object({\n  name: z.string().optional(),\n  bio: z.string().optional(),\n  avatar: FileBufferOrStringSchema.nullable().optional(),\n  website: z.string().optional(),\n  twitter: z.string().optional(),\n  telegram: z.string().optional(),\n  facebook: z.string().optional(),\n  github: z.string().optional(),\n  medium: z.string().optional(),\n  linkedin: z.string().optional(),\n  reddit: z.string().optional(),\n  discord: z.string().optional(),\n});\nexport const ProfileSchemaOutput = ProfileSchemaInput.extend({\n  avatar: z.string().nullable().optional(),\n});\nexport type ProfileMetadataInput = z.infer<typeof ProfileSchemaInput>;\nexport type ProfileMetadata = z.infer<typeof ProfileSchemaOutput>;\n\n/**\n * @internal\n */\nexport const PublishedContractSchema = z.object({\n  id: z.string(),\n  timestamp: BigNumberishSchema,\n  metadataUri: z.string(),\n});\n\n/**\n * @internal\n * Follows https://docs.soliditylang.org/en/v0.8.15/natspec-format.html\n */\nexport const ContractInfoSchema = z.object({\n  title: z.string().optional(),\n  author: z.string().optional(),\n  details: z.string().optional(),\n  notice: z.string().optional(),\n});\n\n/**\n * @internal\n */\nexport const CompilerMetadataFetchedSchema = z.object({\n  name: z.string(),\n  abi: AbiSchema,\n  metadata: z.record(z.string(), z.any()),\n  info: ContractInfoSchema,\n  licenses: z\n    .array(z.string().optional())\n    .default([])\n    .transform((v) => {\n      return v.filter((license) => license !== undefined) as string[];\n    }),\n});\n\n/**\n * @internal\n */\nexport const PreDeployMetadataFetchedSchema = PreDeployMetadata.merge(\n  CompilerMetadataFetchedSchema,\n).extend({\n  bytecode: z.string(),\n});\n\nexport type PreDeployMetadataFetched = z.infer<\n  typeof PreDeployMetadataFetchedSchema\n>;\n\nexport type ContractParam = z.infer<typeof AbiTypeSchema>;\nexport type PublishedContract = z.infer<typeof PublishedContractSchema>;\nexport type PublishedContractFetched = {\n  name: string;\n  publishedTimestamp: BigNumberish;\n  publishedMetadata: FullPublishMetadata;\n};\nexport type AbiFunction = {\n  name: string;\n  inputs: z.infer<typeof AbiTypeSchema>[];\n  outputs: z.infer<typeof AbiTypeSchema>[];\n  signature: string;\n  stateMutability: string;\n  comment: string;\n};\nexport type AbiEvent = {\n  name: string;\n  inputs: z.infer<typeof AbiTypeSchema>[];\n  outputs: z.infer<typeof AbiTypeSchema>[];\n  comment: string;\n};\nexport type ContractSource = {\n  filename: string;\n  source: string;\n};\nexport type PublishedMetadata = z.infer<typeof CompilerMetadataFetchedSchema>;\n","import { BigNumber, BigNumberish, ethers, providers } from \"ethers\";\nimport { NATIVE_TOKENS, SUPPORTED_CHAIN_ID } from \"../constants/index\";\n\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @internal\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier?: string) {\n    super(identifier ? `Object with id ${identifier} NOT FOUND` : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @internal\n */\nexport class InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address?: string) {\n    super(\n      address ? `'${address}' is an invalid address` : \"Invalid address passed\",\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address: string, role: string) {\n    super(`MISSING ROLE: ${address} does not have the '${role}' role`);\n  }\n}\n\n/**\n * @internal\n */\nexport class AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(message = \"The asset you're trying to use could not be found.\") {\n    super(`message: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class UploadError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\n/**\n * @internal\n */\nexport class DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName: string) {\n    super(\n      `DUPLICATE_FILE_NAME_ERROR: File name ${fileName} was passed for more than one file.`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress: string, quantity: number, available: number) {\n    super(\n      `BALANCE ERROR: you do not have enough balance on contract ${contractAddress} to use ${quantity} tokens. You have ${available} tokens available.`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(`LIST ERROR: you should be the owner of the token to list it.`);\n  }\n}\n\n/**\n * @internal\n */\nexport class QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity: string) {\n    super(`BUY ERROR: You cannot buy more than ${quantity} tokens`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n * @internal\n */\nexport class FetchError extends Error {\n  public innerError?: Error;\n\n  /** @internal */\n  constructor(message: string, innerError?: Error) {\n    super(`FETCH_FAILED: ${message}`);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n * @internal\n */\nexport class DuplicateLeafsError extends Error {\n  constructor(message?: string) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n * @internal\n */\nexport class AuctionAlreadyStartedError extends Error {\n  constructor(id?: string) {\n    super(\n      `Auction already started with existing bid${id ? `, id: ${id}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`FUNCTION DEPRECATED. ${message ? `Use ${message} instead` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n * @internal\n */\nexport class ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress: string, listingId?: string) {\n    super(\n      `Could not find listing.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n * @internal\n */\nexport class WrongListingTypeError extends Error {\n  constructor(\n    marketplaceContractAddress: string,\n    listingId?: string,\n    actualType?: string,\n    expectedType?: string,\n  ) {\n    super(\n      `Incorrect listing type. Are you sure you're using the right method?.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}${\n        expectedType ? ` expected type: ${expectedType}` : \"\"\n      }${actualType ? ` actual type: ${actualType}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n * @internal\n */\nexport class RestrictedTransferError extends Error {\n  constructor(assetAddress?: string) {\n    super(\n      `Failed to transfer asset, transfer is restricted.${\n        assetAddress ? ` Address : ${assetAddress}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n * @internal\n */\nexport class AdminRoleMissingError extends Error {\n  constructor(\n    address?: string,\n    contractAddress?: string,\n    message = \"Failed to execute transaction\",\n  ) {\n    super(\n      `${message}, admin role is missing${\n        address ? ` on address: ${address}` : \"\"\n      }${contractAddress ? ` on contract: ${contractAddress}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n * @internal\n */\nexport class AuctionHasNotEndedError extends Error {\n  constructor(id?: string, endTime?: BigNumberish) {\n    super(\n      `Auction has not ended yet${id ? `, id: ${id}` : \"\"}${\n        endTime ? `, end time: ${endTime.toString()}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport type FunctionInfo = {\n  signature: string;\n  inputs: Record<string, any>;\n  value: BigNumber;\n};\n\n/**\n * @public\n */\nexport class TransactionError extends Error {\n  public reason: string;\n  public from: string;\n  public to: string;\n  public data: string;\n  public chain: providers.Network;\n  public rpcUrl: string;\n  public functionInfo: FunctionInfo | undefined;\n\n  constructor(\n    reason: string,\n    from: string,\n    to: string,\n    data: string,\n    network: providers.Network,\n    rpcUrl: string,\n    raw: string,\n    functionInfo: FunctionInfo | undefined,\n  ) {\n    let builtErrorMsg = \"Contract transaction failed\\n\\n\";\n    builtErrorMsg += `Message: ${reason}`;\n    builtErrorMsg += \"\\n\\n| Transaction info |\\n\";\n    builtErrorMsg += withSpaces(\"from\", from);\n    builtErrorMsg += withSpaces(\"to\", to);\n    builtErrorMsg += withSpaces(\n      `chain`,\n      `${network.name} (${network.chainId})`,\n    );\n\n    if (functionInfo) {\n      builtErrorMsg += \"\\n\\n| Failed contract call info |\\n\";\n      builtErrorMsg += withSpaces(\"function\", functionInfo.signature);\n      builtErrorMsg += withSpaces(\n        `arguments`,\n        JSON.stringify(functionInfo.inputs, null, 2),\n      );\n      if (functionInfo.value.gt(0)) {\n        builtErrorMsg += withSpaces(\n          \"value\",\n          `${ethers.utils.formatEther(functionInfo.value)} ${\n            NATIVE_TOKENS[network.chainId as SUPPORTED_CHAIN_ID]?.symbol\n          }`,\n        );\n      }\n    }\n\n    try {\n      const url = new URL(rpcUrl);\n      builtErrorMsg += withSpaces(`RPC`, url.hostname);\n    } catch (e2) {\n      // ignore if can't parse URL\n    }\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg +=\n      \"Need help with this error? Join our community: https://discord.gg/thirdweb\";\n    builtErrorMsg += \"\\n\\n\\n\\n\";\n    builtErrorMsg += \"| Raw error |\";\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg += raw;\n    super(builtErrorMsg);\n    this.reason = reason;\n    this.from = from;\n    this.to = to;\n    this.data = data;\n    this.chain = network;\n    this.rpcUrl = rpcUrl;\n    this.functionInfo = functionInfo;\n  }\n}\n\n/**\n * @internal\n * @param data\n * @param contractInterface\n */\nfunction parseFunctionInfo(\n  data: string,\n  contractInterface: ethers.utils.Interface,\n): FunctionInfo | undefined {\n  try {\n    const fnFragment = contractInterface.parseTransaction({\n      data,\n    });\n    const results: Record<string, any> = {};\n    const args = fnFragment.args;\n    fnFragment.functionFragment.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const obj: Record<string, unknown> = {};\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          for (let i = 0; i < components.length; i++) {\n            const name = components[i].name;\n            obj[name] = arr[i];\n          }\n          results[param.name] = obj;\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      signature: fnFragment.signature,\n      inputs: results,\n      value: fnFragment.value,\n    };\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * @internal\n * @param error\n * @param network\n * @param signerAddress\n * @param contractAddress\n * @param contractInterface\n */\nexport async function convertToTWError(\n  error: any,\n  network: ethers.providers.Network,\n  signerAddress: string,\n  contractAddress: string,\n  contractInterface: ethers.utils.Interface,\n): Promise<TransactionError> {\n  let raw: string;\n  if (error.data) {\n    // metamask errors comes as objects, apply parsing on data object\n    // TODO test errors from other wallets\n    raw = JSON.stringify(error.data);\n  } else if (error instanceof Error) {\n    // regular ethers.js error\n    raw = error.message;\n  } else {\n    // not sure what this is, just throw it back\n    raw = error.toString();\n  }\n  const reason =\n    error.reason ||\n    parseMessageParts(/.*?\"message[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const data = parseMessageParts(/.*?\"data[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const rpcUrl = parseMessageParts(/.*?\"url[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let from = parseMessageParts(/.*?\"from[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let to = parseMessageParts(/.*?\"to[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  if (to === \"\") {\n    // fallback to contractAddress\n    to = contractAddress;\n  }\n  if (from === \"\") {\n    // fallback to signerAddress\n    from = signerAddress;\n  }\n  const functionInfo =\n    data.length > 0 ? parseFunctionInfo(data, contractInterface) : undefined;\n  return new TransactionError(\n    reason,\n    from,\n    to,\n    data,\n    network,\n    rpcUrl,\n    raw,\n    functionInfo,\n  );\n}\n\nfunction withSpaces(label: string, content: string) {\n  if (content === \"\") {\n    return content;\n  }\n  const spaces = Array(10 - label.length)\n    .fill(\" \")\n    .join(\"\");\n  return `\\n${label}:${spaces}${content}`;\n}\n\nfunction parseMessageParts(regex: RegExp, raw: string): string {\n  const msgMatches = raw.match(regex) || [];\n  let extracted = \"\";\n  if (msgMatches?.length > 0) {\n    extracted += msgMatches[1];\n  }\n  return extracted;\n}\n\n/**\n * @internal\n * @param err\n * @param message\n */\nexport function includesErrorMessage(err: any, message: string): boolean {\n  return (\n    (err && err.toString().includes(message)) ||\n    (err.message && err.message.toString().includes(message)) ||\n    (err.error && err.error.toString().includes(message))\n  );\n}\n","import { constants } from \"ethers\";\nimport { ChainId, SUPPORTED_CHAIN_ID } from \"./chains\";\n\n/**\n * @internal\n */\nexport const OZ_DEFENDER_FORWARDER_ADDRESS =\n  \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\n\nconst TWRegistry_address = \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\";\nconst TWFactory_address = \"0x5DBC7B840baa9daBcBe9D2492E45D7244B54A2A0\";\nconst ContractPublisher_address = \"0x58c892e6bc196371f7fb425177b0E2aA906BC007\"; // Polygon only\n\n/**\n * @internal\n */\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID,\n  {\n    biconomyForwarder: string;\n    twFactory: string;\n    twRegistry: string;\n    twBYOCRegistry: string;\n  }\n> = {\n  [ChainId.Mainnet]: {\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: constants.AddressZero,\n  },\n  [ChainId.Rinkeby]: {\n    biconomyForwarder: \"0xFD4973FeB2031D4409fB57afEE5dF2051b171104\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\",\n  },\n  [ChainId.Goerli]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0xB1Bd9d7942A250BA2Dce27DD601F2ED4211A60C4\",\n  },\n  [ChainId.Polygon]: {\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x308473Be900F4185A56587dE54bDFF5E8f7a6AE7\",\n  },\n  [ChainId.Mumbai]: {\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3F17972CB27506eb4a6a3D59659e0B57a43fd16C\",\n  },\n  [ChainId.Avalanche]: {\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: constants.AddressZero,\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\",\n  },\n  [ChainId.Fantom]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: \"0x97EA0Fcc552D5A8Fb5e9101316AAd0D62Ea0876B\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: constants.AddressZero,\n  },\n  [ChainId.FantomTestnet]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\",\n  },\n  [ChainId.Arbitrum]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\",\n    twBYOCRegistry: constants.AddressZero,\n  },\n  [ChainId.ArbitrumTestnet]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: \"0xb0435b47ad26115A39c59735b814f3769F07C2c1\",\n    twRegistry: \"0xcF4c511551aE4dab1F997866FC3900cd2aaeC40D\",\n    twBYOCRegistry: constants.AddressZero,\n  },\n  [ChainId.Optimism]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\",\n    twBYOCRegistry: constants.AddressZero,\n  },\n  [ChainId.OptimismTestnet]: {\n    biconomyForwarder: constants.AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\",\n    twBYOCRegistry: constants.AddressZero,\n  },\n};\n\n/**\n * @internal\n */\nexport function getContractAddressByChainId(\n  chainId: SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  contractName: keyof typeof CONTRACT_ADDRESSES[SUPPORTED_CHAIN_ID],\n): string {\n  // for testing only\n  if (chainId === ChainId.Hardhat) {\n    if (contractName === \"twFactory\") {\n      return process.env.factoryAddress as string;\n    } else if (contractName === \"twRegistry\") {\n      return process.env.registryAddress as string;\n    } else {\n      return constants.AddressZero;\n    }\n  }\n  // real output here\n  return CONTRACT_ADDRESSES[chainId][contractName];\n}\n\n/**\n * @internal\n */\nexport function getContractPublisherAddress() {\n  if (process.env.contractPublisherAddress) {\n    return process.env.contractPublisherAddress as string;\n  } else {\n    return ContractPublisher_address;\n  }\n}\n","/**\n * @internal\n */\nimport { utils } from \"ethers\";\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = utils.arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = utils.arrayify(\"0xd9b67a26\");\n","/**\n * @public\n */\nexport enum EventType {\n  /**\n   * The event is triggered when the transaction is submitted and completed.\n   * The transaction is submitted when it is sent to the relayer or the blockchain.\n   * The transaction is completed when it is confirmed by the blockchain.\n   *\n   * status: \"submitted\" | \"completed\"\n   * transactionHash: string of the transaction hash\n   */\n  Transaction = \"transaction\",\n\n  /**\n   * The event is triggered when wallet sign message is requested and completed.\n   *\n   * status: \"submitted\" | \"completed\"\n   * message: message to sign\n   * signature: signature of the message (only available when status is \"completed\")\n   */\n  Signature = \"signature\",\n}\n","import { ethers, providers } from \"ethers\";\nimport { SignerOrProvider } from \"../core/types\";\n/**\n * @internal\n */\nexport const DEFAULT_IPFS_GATEWAY = \"https://gateway.ipfscdn.io/ipfs/\";\n/**\n * @internal\n */\nexport const PUBLIC_GATEWAYS = [\n  \"https://gateway.ipfscdn.io/ipfs/\",\n  \"https://cloudflare-ipfs.com/ipfs/\",\n  \"https://ipfs.io/ipfs/\",\n];\n\n/**\n * @internal\n */\nexport const TW_IPFS_SERVER_URL = \"https://upload.nftlabs.co\";\n/**\n * @internal\n */\nexport const PINATA_IPFS_URL = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n\n/**\n * @internal\n */\nexport type ChainOrRpc =\n  | \"mumbai\"\n  | \"polygon\"\n  // common alias for `polygon`\n  | \"matic\"\n  | \"rinkeby\"\n  | \"goerli\"\n  | \"mainnet\"\n  // common alias for `mainnet`\n  | \"ethereum\"\n  | \"fantom\"\n  | \"fantom-testnet\"\n  | \"avalanche\"\n  | \"avalanche-testnet\"\n  // actual name\n  | \"avalanche-fuji\"\n  | \"optimism\"\n  | \"optimism-testnet\"\n  | \"arbitrum\"\n  | \"arbitrum-testnet\"\n  // ideally we could use `https://${string}` notation here, but doing that causes anything that is a generic string to throw a type error => not worth the hassle for now\n  | (string & {});\n\n/**\n * @internal\n * This is a community API key that is subject to rate limiting. Please use your own key.\n */\nconst DEFAULT_API_KEY = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\n\n/**\n * @internal\n * @param network - the chain name or rpc url\n * @returns the rpc url for that chain\n */\nexport function getProviderForNetwork(network: ChainOrRpc | SignerOrProvider) {\n  if (typeof network !== \"string\") {\n    return network;\n  }\n  switch (network) {\n    case \"mumbai\":\n      return `https://polygon-mumbai.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"rinkeby\":\n      return `https://eth-rinkeby.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"goerli\":\n      return `https://eth-goerli.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"polygon\":\n    case \"matic\":\n      return `https://polygon-mainnet.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"mainnet\":\n    case \"ethereum\":\n      return `https://eth-mainnet.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"optimism\":\n      // TODO test this RPC\n      return `https://opt-mainnet.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"optimism-testnet\":\n      // alchemy optimism kovan rpc doesn't link to the testnet sequencer...\n      return \"https://kovan.optimism.io\";\n    case \"arbitrum\":\n      // TODO test this RPC\n      return `https://arb-mainnet.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"arbitrum-testnet\":\n      // TODO test this RPC\n      return `https://arb-rinkeby.g.alchemy.com/v2/${DEFAULT_API_KEY}`;\n    case \"fantom\":\n      return \"https://rpc.ftm.tools\";\n    case \"fantom-testnet\":\n      return \"https://rpc.testnet.fantom.network/\";\n    case \"avalanche\":\n      return \"https://api.avax.network/ext/bc/C/rpc\";\n    case \"avalanche-testnet\":\n    case \"avalanche-fuji\":\n      return \"https://api.avax-test.network/ext/bc/C/rpc\";\n    default:\n      if (network.startsWith(\"http\") || network.startsWith(\"ws\")) {\n        return network;\n      } else {\n        throw new Error(`Unrecognized chain name or RPC url: ${network}`);\n      }\n  }\n}\n\n/**\n *\n * @param network - the chain name or rpc url\n * @param chainId - the optional chain id\n * @returns the provider\n */\nexport function getReadOnlyProvider(network: string, chainId?: number) {\n  try {\n    const match = network.match(/^(ws|http)s?:/i);\n    // try the JSON batch provider if available\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new providers.JsonRpcBatchProvider(network, chainId);\n        case \"ws\":\n          return new providers.WebSocketProvider(network, chainId);\n        default:\n          return ethers.getDefaultProvider(network);\n      }\n    } else {\n      return ethers.getDefaultProvider(network);\n    }\n  } catch (e) {\n    // fallback to the default provider\n    return ethers.getDefaultProvider(network);\n  }\n}\n","import { IStorage } from \"../core/interfaces/IStorage\";\nimport MerkleTree from \"merkletreejs\";\nimport {\n  SnapshotInputSchema,\n  SnapshotSchema,\n} from \"../schema/contracts/common/snapshots\";\nimport {\n  SnapshotInfo,\n  SnapshotInput,\n} from \"../types/claim-conditions/claim-conditions\";\nimport { DuplicateLeafsError } from \"./error\";\nimport { BigNumber, BigNumberish, utils } from \"ethers\";\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param tokenDecimals - the token decimals\n * @param storage - the storage to upload to\n * @returns the generated snapshot and URI\n * @internal\n */\nexport async function createSnapshot(\n  snapshotInput: SnapshotInput,\n  tokenDecimals: number,\n  storage: IStorage,\n): Promise<SnapshotInfo> {\n  const input = SnapshotInputSchema.parse(snapshotInput);\n  const addresses = input.map((i) => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n\n  const hashedLeafs = input.map((i) =>\n    hashLeafNode(i.address, utils.parseUnits(i.maxClaimable, tokenDecimals)),\n  );\n  const tree = new MerkleTree(hashedLeafs, utils.keccak256, {\n    sort: true,\n  });\n\n  const snapshot = SnapshotSchema.parse({\n    merkleRoot: tree.getHexRoot(),\n    claims: input.map((i, index) => {\n      const proof = tree.getHexProof(hashedLeafs[index]);\n      return {\n        address: i.address,\n        maxClaimable: i.maxClaimable,\n        proof,\n      };\n    }),\n  });\n\n  const uri = await storage.uploadMetadata(snapshot);\n  return {\n    merkleRoot: tree.getHexRoot(),\n    snapshotUri: uri,\n    snapshot,\n  };\n}\n\n/**\n * Hash an address and the corresponding claimable amount\n * @internal\n * @param address - the address\n * @param maxClaimableAmount - the amount\n */\nexport function hashLeafNode(\n  address: string,\n  maxClaimableAmount: BigNumberish,\n): string {\n  return utils.solidityKeccak256(\n    [\"address\", \"uint256\"],\n    [address, BigNumber.from(maxClaimableAmount)],\n  );\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n *\n * @internal\n */\nconst roleMap = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n  unwrap: \"UNWRAP_ROLE\",\n} as const;\n\n/**\n * @public\n */\nexport type Role = keyof typeof roleMap;\n\n/**\n * @public\n */\nexport const ALL_ROLES = Object.keys(roleMap) as Role[];\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.id(roleMap[role]);\n}\n","import { BaseContract, ethers } from \"ethers\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core\";\nimport {\n  AbiEvent,\n  AbiFunction,\n  AbiSchema,\n  AbiTypeSchema,\n  ContractInfoSchema,\n  ContractSource,\n  FullPublishMetadata,\n  FullPublishMetadataSchema,\n  PreDeployMetadata,\n  PreDeployMetadataFetched,\n  PreDeployMetadataFetchedSchema,\n  PublishedMetadata,\n} from \"../schema/contracts/custom\";\nimport { z } from \"zod\";\nimport {\n  Feature,\n  FeatureName,\n  FeatureWithEnabled,\n  SUPPORTED_FEATURES,\n} from \"../constants/contract-features\";\nimport { decodeFirstSync } from \"cbor\";\nimport { toB58String } from \"multihashes\";\n\n/**\n * @internal\n * @param abi\n * @param feature\n */\nfunction matchesAbiInterface(\n  abi: z.input<typeof AbiSchema>,\n  feature: Feature,\n): boolean {\n  // returns true if all the functions in `interfaceToMatch` are found in `contract` (removing any duplicates)\n  const contractFn = [\n    ...new Set(extractFunctionsFromAbi(abi).map((f) => f.name)),\n  ];\n  const interfaceFn = [\n    ...new Set(\n      feature.abis\n        .flatMap((i) => extractFunctionsFromAbi(i))\n        .map((f) => f.name),\n    ),\n  ];\n\n  return (\n    contractFn.filter((k) => interfaceFn.includes(k)).length ===\n    interfaceFn.length\n  );\n}\n\n/**\n * @internal\n */\nexport async function extractConstructorParams(\n  predeployMetadataUri: string,\n  storage: IStorage,\n) {\n  const meta = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractConstructorParamsFromAbi(meta.abi);\n}\n\n/**\n * @internal\n * @param predeployMetadataUri\n * @param storage\n */\nexport async function extractFunctions(\n  predeployMetadataUri: string,\n  storage: IStorage,\n): Promise<AbiFunction[]> {\n  const metadata = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractFunctionsFromAbi(metadata.abi, metadata.metadata);\n}\n\n/**\n * @internal\n * @param name\n * @param metadata\n * @param type\n */\nfunction extractCommentFromMetadata(\n  name: string | undefined,\n  metadata: Record<string, any> | undefined,\n  type: \"methods\" | \"events\",\n) {\n  // console.log(metadata?.output?.userdoc);\n  return (\n    metadata?.output?.userdoc?.[type]?.[\n      Object.keys(metadata?.output?.userdoc[type] || {}).find((fn) =>\n        fn.includes(name || \"unknown\"),\n      ) || \"\"\n    ]?.notice ||\n    metadata?.output?.devdoc?.[type]?.[\n      Object.keys(metadata?.output?.devdoc[type] || {}).find((fn) =>\n        fn.includes(name || \"unknown\"),\n      ) || \"\"\n    ]?.details\n  );\n}\n\n/**\n *\n * @param abi\n * @returns\n * @internal\n */\nexport function extractConstructorParamsFromAbi(\n  abi: z.input<typeof AbiSchema>,\n) {\n  for (const input of abi) {\n    if (input.type === \"constructor\") {\n      return input.inputs ?? [];\n    }\n  }\n  return [];\n}\n\n/**\n *\n * @param abi\n * @param functionName\n * @returns\n * @internal\n */\nexport function extractFunctionParamsFromAbi(\n  abi: z.input<typeof AbiSchema>,\n  functionName: string,\n) {\n  for (const input of abi) {\n    if (input.type === \"function\" && input.name === functionName) {\n      return input.inputs ?? [];\n    }\n  }\n  return [];\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nexport function extractFunctionsFromAbi(\n  abi: z.input<typeof AbiSchema>,\n  metadata?: Record<string, any>,\n): AbiFunction[] {\n  const functions = abi.filter((el) => el.type === \"function\");\n\n  const parsed: AbiFunction[] = [];\n  for (const f of functions) {\n    const doc = extractCommentFromMetadata(f.name, metadata, \"methods\");\n    const args =\n      f.inputs?.map((i) => `${i.name || \"key\"}: ${toJSType(i)}`)?.join(\", \") ||\n      \"\";\n    const fargs = args ? `, ${args}` : \"\";\n    const out = f.outputs?.map((o) => toJSType(o, true))?.join(\", \");\n    const promise = out ? `: Promise<${out}>` : `: Promise<TransactionResult>`;\n    const signature = `contract.call(\"${f.name}\"${fargs})${promise}`;\n    parsed.push({\n      inputs: f.inputs ?? [],\n      outputs: f.outputs ?? [],\n      name: f.name ?? \"unknown\",\n      signature,\n      stateMutability: f.stateMutability ?? \"\",\n      comment: doc,\n    });\n  }\n  return parsed;\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nexport function extractEventsFromAbi(\n  abi: z.input<typeof AbiSchema>,\n  metadata?: Record<string, any>,\n): AbiEvent[] {\n  const events = abi.filter((el) => el.type === \"event\");\n  const parsed: AbiEvent[] = [];\n  for (const e of events) {\n    const doc = extractCommentFromMetadata(e.name, metadata, \"events\");\n    parsed.push({\n      inputs: e.inputs ?? [],\n      outputs: e.outputs ?? [],\n      name: e.name ?? \"unknown\",\n      comment: doc,\n    });\n  }\n  return parsed;\n}\n\nfunction toJSType(\n  contractType: z.input<typeof AbiTypeSchema>,\n  isReturnType = false,\n  withName = false,\n): string {\n  let jsType = contractType.type;\n  let isArray = false;\n  if (jsType.endsWith(\"[]\")) {\n    isArray = true;\n    jsType = jsType.slice(0, -2);\n  }\n  if (jsType.startsWith(\"bytes\")) {\n    jsType = \"BytesLike\";\n  }\n  if (jsType.startsWith(\"uint\") || jsType.startsWith(\"int\")) {\n    jsType = isReturnType ? \"BigNumber\" : \"BigNumberish\";\n  }\n  if (jsType.startsWith(\"bool\")) {\n    jsType = \"boolean\";\n  }\n  if (jsType === \"address\") {\n    jsType = \"string\";\n  }\n  if (jsType === \"tuple\") {\n    if (contractType.components) {\n      jsType = `{ ${contractType.components\n        .map((a) => toJSType(a, false, true))\n        .join(\", \")} }`;\n    }\n  }\n  if (isArray) {\n    jsType += \"[]\";\n  }\n  if (withName) {\n    jsType = `${contractType.name}: ${jsType}`;\n  }\n  return jsType;\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n */\nexport async function resolveContractUriFromAddress(\n  address: string,\n  provider: ethers.providers.Provider,\n): Promise<string | undefined> {\n  const bytecode = await provider.getCode(address);\n  if (bytecode === \"0x\") {\n    const chain = await provider.getNetwork();\n    throw new Error(\n      `Contract at ${address} does not exist on chain '${chain.name}' (chainId: ${chain.chainId})`,\n    );\n  }\n  // EIP-1167 clone proxy - https://eips.ethereum.org/EIPS/eip-1167\n  if (bytecode.startsWith(\"0x363d3d373d3d3d363d\")) {\n    const implementationAddress = bytecode.slice(22, 62);\n    return resolveContractUriFromAddress(\n      `0x${implementationAddress}`,\n      provider,\n    );\n  }\n  // TODO support other types of proxies like erc1967\n  return extractIPFSHashFromBytecode(bytecode);\n}\n\n/**\n * @internal\n * @param bytecode\n */\nfunction extractIPFSHashFromBytecode(bytecode: string): string | undefined {\n  const numericBytecode = hexToBytes(bytecode);\n  const cborLength: number =\n    numericBytecode[numericBytecode.length - 2] * 0x100 +\n    numericBytecode[numericBytecode.length - 1];\n  const bytecodeBuffer = Buffer.from(\n    numericBytecode.slice(numericBytecode.length - 2 - cborLength, -2),\n  );\n\n  const cborData = decodeFirstSync(bytecodeBuffer);\n  if (cborData[\"ipfs\"]) {\n    return `ipfs://${toB58String(cborData[\"ipfs\"])}`;\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * @param hex\n */\nfunction hexToBytes(hex: string | number) {\n  hex = hex.toString(16);\n  if (!hex.startsWith(\"0x\")) {\n    hex = `0x${hex}`;\n  }\n  if (!isHexStrict(hex)) {\n    throw new Error(`Given value \"${hex}\" is not a valid hex string.`);\n  }\n  hex = hex.replace(/^0x/i, \"\");\n  const bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.slice(c, c + 2), 16));\n  }\n  return bytes;\n}\n\n/**\n * @internal\n * @param hex\n */\nfunction isHexStrict(hex: string | number) {\n  return (\n    (typeof hex === \"string\" || typeof hex === \"number\") &&\n    /^(-)?0x[0-9a-f]*$/i.test(hex.toString())\n  );\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n * @param storage\n */\nexport async function fetchContractMetadataFromAddress(\n  address: string,\n  provider: ethers.providers.Provider,\n  storage: IStorage,\n) {\n  const compilerMetadataUri = await resolveContractUriFromAddress(\n    address,\n    provider,\n  );\n  if (!compilerMetadataUri) {\n    throw new Error(`Could not resolve metadata for contract at ${address}`);\n  }\n  return await fetchContractMetadata(compilerMetadataUri, storage);\n}\n\n/**\n * @internal\n * @param compilerMetadataUri\n * @param storage\n */\nexport async function fetchContractMetadata(\n  compilerMetadataUri: string,\n  storage: IStorage,\n): Promise<PublishedMetadata> {\n  const metadata = await storage.get(compilerMetadataUri);\n  const abi = AbiSchema.parse(metadata.output.abi);\n  const compilationTarget = metadata.settings.compilationTarget;\n  const targets = Object.keys(compilationTarget);\n  const name = compilationTarget[targets[0]];\n  const info = ContractInfoSchema.parse({\n    title: metadata.output.devdoc.title,\n    author: metadata.output.devdoc.author,\n    details: metadata.output.devdoc.detail,\n    notice: metadata.output.userdoc.notice,\n  });\n  const licenses: string[] = [\n    ...new Set(\n      Object.entries(metadata.sources).map(([_, src]) => (src as any).license),\n    ),\n  ];\n  return {\n    name,\n    abi,\n    metadata,\n    info,\n    licenses,\n  };\n}\n\n/**\n * @internal\n * @param publishedMetadata\n * @param storage\n */\nexport async function fetchSourceFilesFromMetadata(\n  publishedMetadata: PublishedMetadata,\n  storage: IStorage,\n): Promise<ContractSource[]> {\n  return await Promise.all(\n    Object.entries(publishedMetadata.metadata.sources).map(\n      async ([path, info]) => {\n        const urls = (info as any).urls as string[];\n        const ipfsLink = urls.find((url) => url.includes(\"ipfs\"));\n        if (ipfsLink) {\n          const ipfsHash = ipfsLink.split(\"ipfs/\")[1];\n          // 5 sec timeout for sources that haven't been uploaded to ipfs\n          const timeout = new Promise<string>((_r, rej) =>\n            setTimeout(() => rej(\"timeout\"), 5000),\n          );\n          const source = await Promise.race([\n            storage.getRaw(`ipfs://${ipfsHash}`),\n            timeout,\n          ]);\n          return {\n            filename: path,\n            source,\n          };\n        } else {\n          return {\n            filename: path,\n            source: \"Could not find source for this contract\",\n          };\n        }\n      },\n    ),\n  );\n}\n\n/**\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nexport async function fetchRawPredeployMetadata(\n  publishMetadataUri: string,\n  storage: IStorage,\n) {\n  return PreDeployMetadata.parse(\n    JSON.parse(await storage.getRaw(publishMetadataUri)),\n  );\n}\n\n/**\n * Fetch the metadata coming from CLI, this is before deploying or releasing the contract.\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nexport async function fetchPreDeployMetadata(\n  publishMetadataUri: string,\n  storage: IStorage,\n): Promise<PreDeployMetadataFetched> {\n  const rawMeta = await fetchRawPredeployMetadata(publishMetadataUri, storage);\n  const deployBytecode = await storage.getRaw(rawMeta.bytecodeUri);\n  const parsedMeta = await fetchContractMetadata(rawMeta.metadataUri, storage);\n  return PreDeployMetadataFetchedSchema.parse({\n    ...rawMeta,\n    ...parsedMeta,\n    bytecode: deployBytecode,\n  });\n}\n\n/**\n * Fetch and parse the full metadata AFTER creating a release, with all the extra information (version, readme, etc)\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nexport async function fetchExtendedReleaseMetadata(\n  publishMetadataUri: string,\n  storage: IStorage,\n): Promise<FullPublishMetadata> {\n  const meta = await storage.getRaw(publishMetadataUri);\n  return FullPublishMetadataSchema.parse(JSON.parse(meta));\n}\n\n/**\n * Processes ALL supported features and sets whether the passed in abi supports each individual feature\n * @internal\n * @param abi\n * @param features\n * @returns the nested struct of all features and whether they're detected in the abi\n */\nexport function detectFeatures(\n  abi: z.input<typeof AbiSchema>,\n  features: Record<string, Feature> = SUPPORTED_FEATURES,\n): Record<string, FeatureWithEnabled> {\n  const results: Record<string, FeatureWithEnabled> = {};\n  for (const featureKey in features) {\n    const feature = features[featureKey];\n    const enabled = matchesAbiInterface(abi, feature);\n    const childResults = detectFeatures(abi, feature.features);\n    results[featureKey] = {\n      ...feature,\n      features: childResults,\n      enabled,\n    } as FeatureWithEnabled;\n  }\n  return results;\n}\n\n/**\n * Checks whether the given ABI supports a given feature\n * @internal\n * @param abi\n * @param featureName\n */\nexport function isFeatureEnabled(\n  abi: z.input<typeof AbiSchema>,\n  featureName: FeatureName,\n): boolean {\n  const features = detectFeatures(abi);\n  return _featureEnabled(features, featureName);\n}\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper\n * @param featureName\n */\nexport function detectContractFeature<T extends BaseContract>(\n  contractWrapper: ContractWrapper<BaseContract>,\n  featureName: FeatureName,\n): contractWrapper is ContractWrapper<T> {\n  return isFeatureEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * Searches the feature map for featureName and returns whether its enabled\n * @internal\n * @param features\n * @param featureName\n */\nfunction _featureEnabled(\n  features: Record<string, FeatureWithEnabled>,\n  featureName: FeatureName,\n): boolean {\n  const keys = Object.keys(features);\n  if (!keys.includes(featureName)) {\n    let found = false;\n    for (const key of keys) {\n      const f = features[key];\n      found = _featureEnabled(\n        f.features as Record<string, FeatureWithEnabled>,\n        featureName,\n      );\n      if (found) {\n        break;\n      }\n    }\n    return found;\n  }\n  const feature = features[featureName];\n  return feature.enabled;\n}\n\n/**\n * @internal\n * @param contractWrapper\n * @param functionName\n */\nexport function hasFunction<TContract extends BaseContract>(\n  functionName: string,\n  contractWrapper: ContractWrapper<any>,\n): contractWrapper is ContractWrapper<TContract> {\n  return functionName in contractWrapper.readContract.functions;\n}\n","import {\n  FEATURE_NFT,\n  FEATURE_NFT_BATCH_MINTABLE,\n  FEATURE_NFT_BURNABLE,\n  FEATURE_NFT_CLAIMABLE,\n  FEATURE_NFT_DROPPABLE,\n  FEATURE_NFT_ENUMERABLE,\n  FEATURE_NFT_MINTABLE,\n  FEATURE_NFT_REVEALABLE,\n  FEATURE_NFT_SIGNATURE_MINTABLE,\n  FEATURE_NFT_SUPPLY,\n} from \"./erc721-features\";\nimport {\n  FEATURE_TOKEN,\n  FEATURE_TOKEN_BATCH_MINTABLE,\n  FEATURE_TOKEN_BURNABLE,\n  FEATURE_TOKEN_DROPPABLE,\n  FEATURE_TOKEN_MINTABLE,\n  FEATURE_TOKEN_SIGNATURE_MINTABLE,\n} from \"./erc20-features\";\nimport {\n  FEATURE_EDITION,\n  FEATURE_EDITION_BATCH_MINTABLE,\n  FEATURE_EDITION_BURNABLE,\n  FEATURE_EDITION_CLAIMABLE,\n  FEATURE_EDITION_DROPPABLE,\n  FEATURE_EDITION_ENUMERABLE,\n  FEATURE_EDITION_MINTABLE,\n  FEATURE_EDITION_REVEALABLE,\n  FEATURE_EDITION_SIGNATURE_MINTABLE,\n} from \"./erc1155-features\";\nimport {\n  FEATURE_METADATA,\n  FEATURE_PERMISSIONS,\n  FEATURE_PLATFORM_FEE,\n  FEATURE_PRIMARY_SALE,\n  FEATURE_ROYALTY,\n} from \"./thirdweb-features\";\n\n/**\n * @internal\n */\nexport type Feature =\n  | typeof FEATURE_TOKEN\n  | typeof FEATURE_TOKEN_MINTABLE\n  | typeof FEATURE_TOKEN_BATCH_MINTABLE\n  | typeof FEATURE_TOKEN_BURNABLE\n  | typeof FEATURE_TOKEN_DROPPABLE\n  | typeof FEATURE_TOKEN_SIGNATURE_MINTABLE\n  | typeof FEATURE_NFT\n  | typeof FEATURE_NFT_SUPPLY\n  | typeof FEATURE_NFT_ENUMERABLE\n  | typeof FEATURE_NFT_MINTABLE\n  | typeof FEATURE_NFT_BATCH_MINTABLE\n  | typeof FEATURE_NFT_DROPPABLE\n  | typeof FEATURE_NFT_CLAIMABLE\n  | typeof FEATURE_NFT_REVEALABLE\n  | typeof FEATURE_NFT_SIGNATURE_MINTABLE\n  | typeof FEATURE_NFT_BURNABLE\n  | typeof FEATURE_EDITION\n  | typeof FEATURE_EDITION_ENUMERABLE\n  | typeof FEATURE_EDITION_MINTABLE\n  | typeof FEATURE_EDITION_CLAIMABLE\n  | typeof FEATURE_EDITION_DROPPABLE\n  | typeof FEATURE_EDITION_REVEALABLE\n  | typeof FEATURE_EDITION_BATCH_MINTABLE\n  | typeof FEATURE_EDITION_BURNABLE\n  | typeof FEATURE_EDITION_SIGNATURE_MINTABLE\n  | typeof FEATURE_ROYALTY\n  | typeof FEATURE_PLATFORM_FEE\n  | typeof FEATURE_PRIMARY_SALE\n  | typeof FEATURE_PERMISSIONS\n  | typeof FEATURE_METADATA;\n\n/**\n * @internal\n */\nexport type FeatureName = Feature[\"name\"];\n/**\n * @internal\n */\nexport type FeatureWithEnabled = Feature & {\n  features: Record<string, FeatureWithEnabled>;\n  enabled: boolean;\n};\n\n/**\n * @internal\n */\nexport const SUPPORTED_FEATURES: Record<string, Feature> = {\n  [FEATURE_TOKEN.name]: FEATURE_TOKEN,\n  [FEATURE_NFT.name]: FEATURE_NFT,\n  [FEATURE_EDITION.name]: FEATURE_EDITION,\n  [FEATURE_ROYALTY.name]: FEATURE_ROYALTY,\n  [FEATURE_PLATFORM_FEE.name]: FEATURE_PLATFORM_FEE,\n  [FEATURE_PRIMARY_SALE.name]: FEATURE_PRIMARY_SALE,\n  [FEATURE_PERMISSIONS.name]: FEATURE_PERMISSIONS,\n  [FEATURE_METADATA.name]: FEATURE_METADATA,\n};\n","import Erc721Abi from \"../../abis/IERC721.json\";\nimport Erc721EnumerableAbi from \"../../abis/IERC721Enumerable.json\";\nimport Erc721SupplyAbi from \"../../abis/IERC721Supply.json\";\nimport IMintableERC721Abi from \"../../abis/IMintableERC721.json\";\nimport MulticallAbi from \"../../abis/IMulticall.json\";\nimport DelayedRevealAbi from \"../../abis/DelayedReveal.json\";\nimport ILazyMintAbi from \"../../abis/ILazyMint.json\";\nimport IDropSinglePhase from \"../../abis/IDropSinglePhase.json\";\nimport SignatureMintERC721Abi from \"../../abis/SignatureMintERC721.json\";\nimport IBurnableERC721Abi from \"../../abis/IBurnableERC721.json\";\n\nexport const FEATURE_NFT_BURNABLE = {\n  name: \"ERC721Burnable\",\n  namespace: \"nft.burn\",\n  docLinks: {\n    sdk: \"sdk.erc721burnable\",\n    contracts: \"IBurnableERC721\",\n  },\n  abis: [Erc721Abi, IBurnableERC721Abi],\n  features: {},\n} as const;\n\nexport const FEATURE_NFT_REVEALABLE = {\n  name: \"ERC721Revealable\",\n  namespace: \"nft.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.drop.delayedreveal\",\n    contracts: \"DelayedReveal\",\n  },\n  abis: [Erc721Abi, ILazyMintAbi, DelayedRevealAbi],\n  features: {},\n} as const;\n\n// Update ABI dependencies\nexport const FEATURE_NFT_CLAIMABLE = {\n  name: \"ERC721Claimable\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"DropSinglePhase\",\n  },\n  abis: [Erc721Abi, ILazyMintAbi, IDropSinglePhase],\n  features: {},\n} as const;\n\nexport const FEATURE_NFT_DROPPABLE = {\n  name: \"ERC721Droppable\",\n  namespace: \"nft.drop\",\n  docLinks: {\n    sdk: \"sdk.erc721droppable\",\n    contracts: \"LazyMint\",\n  },\n  abis: [Erc721Abi, ILazyMintAbi],\n  features: {\n    [FEATURE_NFT_REVEALABLE.name]: FEATURE_NFT_REVEALABLE,\n    [FEATURE_NFT_CLAIMABLE.name]: FEATURE_NFT_CLAIMABLE,\n  },\n} as const;\n\nexport const FEATURE_NFT_BATCH_MINTABLE = {\n  name: \"ERC721BatchMintable\",\n  namespace: \"nft.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc721batchmintable\",\n    contracts: \"IMulticall\",\n  },\n  abis: [Erc721Abi, IMintableERC721Abi, MulticallAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_NFT_MINTABLE = {\n  name: \"ERC721Mintable\",\n  namespace: \"nft.mint\",\n  docLinks: {\n    sdk: \"sdk.erc721mintable\",\n    contracts: \"IMintableERC721\",\n  },\n  abis: [Erc721Abi, IMintableERC721Abi],\n  features: {\n    [FEATURE_NFT_BATCH_MINTABLE.name]: FEATURE_NFT_BATCH_MINTABLE,\n  },\n} as const;\n\nexport const FEATURE_NFT_SIGNATURE_MINTABLE = {\n  name: \"ERC721SignatureMint\",\n  namespace: \"nft.signature\",\n  docLinks: {\n    sdk: \"sdk.erc721signaturemint\",\n    contracts: \"ISignatureMintERC721\",\n  },\n  abis: [Erc721Abi, SignatureMintERC721Abi],\n  features: {},\n} as const;\n\nexport const FEATURE_NFT_ENUMERABLE = {\n  name: \"ERC721Enumerable\",\n  namespace: \"nft.query.owned\",\n  docLinks: {\n    sdk: \"sdk.erc721enumerable\",\n    contracts: \"IERC721Enumerable\",\n  },\n  abis: [Erc721Abi, Erc721EnumerableAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_NFT_SUPPLY = {\n  name: \"ERC721Supply\",\n  namespace: \"nft.query\",\n  docLinks: {\n    sdk: \"sdk.erc721supply\",\n    contracts: \"IERC721Supply\",\n  },\n  abis: [Erc721Abi, Erc721SupplyAbi],\n  features: {\n    [FEATURE_NFT_ENUMERABLE.name]: FEATURE_NFT_ENUMERABLE,\n  },\n} as const;\n\nexport const FEATURE_NFT = {\n  name: \"ERC721\",\n  namespace: \"nft\",\n  docLinks: {\n    sdk: \"sdk.erc721\",\n    contracts: \"IERC721\",\n  },\n  abis: [Erc721Abi],\n  features: {\n    [FEATURE_NFT_BURNABLE.name]: FEATURE_NFT_BURNABLE,\n    [FEATURE_NFT_SUPPLY.name]: FEATURE_NFT_SUPPLY,\n    [FEATURE_NFT_MINTABLE.name]: FEATURE_NFT_MINTABLE,\n    [FEATURE_NFT_DROPPABLE.name]: FEATURE_NFT_DROPPABLE,\n    [FEATURE_NFT_SIGNATURE_MINTABLE.name]: FEATURE_NFT_SIGNATURE_MINTABLE,\n  },\n} as const;\n","import ERC20Abi from \"../../abis/IERC20.json\";\nimport IMintableERC20Abi from \"../../abis/IMintableERC20.json\";\nimport MulticallAbi from \"../../abis/IMulticall.json\";\nimport ISignatureMintERC20Abi from \"../../abis/ISignatureMintERC20.json\";\nimport IBurnableERC20Abi from \"../../abis/IBurnableERC20.json\";\nimport IDropSinglePhase from \"../../abis/IDropSinglePhase.json\";\n\nexport const FEATURE_TOKEN_DROPPABLE = {\n  name: \"ERC20Droppable\",\n  namespace: \"token.drop\",\n  docLinks: {\n    sdk: \"sdk.erc20droppable\",\n    contracts: \"DropSinglePhase\",\n  },\n  abis: [ERC20Abi, IDropSinglePhase],\n  features: {},\n} as const;\n\nexport const FEATURE_TOKEN_BURNABLE = {\n  name: \"ERC20Burnable\",\n  namespace: \"token.burn\",\n  docLinks: {\n    sdk: \"sdk.erc20burnable\",\n    contracts: \"IBurnableERC20\",\n  },\n  abis: [ERC20Abi, IBurnableERC20Abi],\n  features: {},\n} as const;\n\nexport const FEATURE_TOKEN_SIGNATURE_MINTABLE = {\n  name: \"ERC20SignatureMintable\",\n  namespace: \"token.signature\",\n  docLinks: {\n    sdk: \"sdk.erc20signaturemintable\",\n    contracts: \"ISignatureMintERC20\",\n  },\n  abis: [ERC20Abi, ISignatureMintERC20Abi],\n  features: {},\n} as const;\n\nexport const FEATURE_TOKEN_BATCH_MINTABLE = {\n  name: \"ERC20BatchMintable\",\n  namespace: \"token.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc20batchmintable\",\n    contracts: \"IMulticall\",\n  },\n  abis: [ERC20Abi, IMintableERC20Abi, MulticallAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_TOKEN_MINTABLE = {\n  name: \"ERC20Mintable\",\n  namespace: \"token.mint\",\n  docLinks: {\n    sdk: \"sdk.erc20mintable\",\n    contracts: \"IMintableERC20\",\n  },\n  abis: [ERC20Abi, IMintableERC20Abi],\n  features: {\n    [FEATURE_TOKEN_BATCH_MINTABLE.name]: FEATURE_TOKEN_BATCH_MINTABLE,\n  },\n} as const;\n\nexport const FEATURE_TOKEN = {\n  name: \"ERC20\",\n  namespace: \"token\",\n  docLinks: {\n    sdk: \"sdk.erc20\",\n    contracts: \"IERC20\",\n  },\n  abis: [ERC20Abi],\n  features: {\n    [FEATURE_TOKEN_BURNABLE.name]: FEATURE_TOKEN_BURNABLE,\n    [FEATURE_TOKEN_MINTABLE.name]: FEATURE_TOKEN_MINTABLE,\n    [FEATURE_TOKEN_DROPPABLE.name]: FEATURE_TOKEN_DROPPABLE,\n    [FEATURE_TOKEN_SIGNATURE_MINTABLE.name]: FEATURE_TOKEN_SIGNATURE_MINTABLE,\n  },\n} as const;\n","import Erc1155EnumerableAbi from \"../../abis/IERC1155Enumerable.json\";\nimport Erc1155Abi from \"../../abis/IERC1155.json\";\nimport MulticallAbi from \"../../abis/IMulticall.json\";\nimport IMintableERC1155Abi from \"../../abis/IMintableERC1155.json\";\nimport ISignatureMintERC1155Abi from \"../../abis/ISignatureMintERC1155.json\";\nimport ILazyMintAbi from \"../../abis/ILazyMint.json\";\nimport IBurnableERC1155Abi from \"../../abis/IBurnableERC1155.json\";\nimport DropSinglePhase1155 from \"../../abis/DropSinglePhase1155.json\";\nimport DelayedRevealAbi from \"../../abis/DelayedReveal.json\";\n\nexport const FEATURE_EDITION_BURNABLE = {\n  name: \"ERC1155Burnable\",\n  namespace: \"edition.burn\",\n  docLinks: {\n    sdk: \"sdk.erc1155burnable\",\n    contracts: \"IBurnableERC1155\",\n  },\n  abis: [Erc1155Abi, IBurnableERC1155Abi],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION_CLAIMABLE = {\n  name: \"ERC1155Claimable\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"\",\n  },\n  abis: [Erc1155Abi, ILazyMintAbi, DropSinglePhase1155],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION_DROPPABLE = {\n  name: \"ERC1155Droppable\",\n  namespace: \"edition.drop\",\n  docLinks: {\n    sdk: \"sdk.erc1155droppable\",\n    contracts: \"LazyMint\",\n  },\n  abis: [Erc1155Abi, ILazyMintAbi],\n  features: {\n    [FEATURE_EDITION_CLAIMABLE.name]: FEATURE_EDITION_CLAIMABLE,\n  },\n} as const;\n\nexport const FEATURE_EDITION_REVEALABLE = {\n  name: \"ERC1155Revealable\",\n  namespace: \"edition.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.drop.delayedreveal\",\n    contracts: \"DelayedReveal\",\n  },\n  abis: [Erc1155Abi, ILazyMintAbi, DelayedRevealAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION_SIGNATURE_MINTABLE = {\n  name: \"ERC1155SignatureMintable\",\n  namespace: \"edition.signature\",\n  docLinks: {\n    sdk: \"sdk.erc1155signaturemintable\",\n    contracts: \"ISignatureMintERC1155\",\n  },\n  abis: [Erc1155Abi, ISignatureMintERC1155Abi],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION_BATCH_MINTABLE = {\n  name: \"ERC1155BatchMintable\",\n  namespace: \"edition.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc1155batchmintable\",\n    contracts: \"IMulticall\",\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi, MulticallAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION_MINTABLE = {\n  name: \"ERC1155Mintable\",\n  namespace: \"edition.mint\",\n  docLinks: {\n    sdk: \"sdk.erc1155mintable\",\n    contracts: \"IMintableERC1155\",\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi],\n  features: {\n    [FEATURE_EDITION_BATCH_MINTABLE.name]: FEATURE_EDITION_BATCH_MINTABLE,\n  },\n} as const;\n\nexport const FEATURE_EDITION_ENUMERABLE = {\n  name: \"ERC1155Enumerable\",\n  namespace: \"edition.query\",\n  docLinks: {\n    sdk: \"sdk.erc1155\",\n    contracts: \"IERC1155\",\n  },\n  abis: [Erc1155Abi, Erc1155EnumerableAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_EDITION = {\n  name: \"ERC1155\",\n  namespace: \"edition\",\n  docLinks: {\n    sdk: \"sdk.erc1155enumerable\",\n    contracts: \"IERC1155Enumerable\",\n  },\n  abis: [Erc1155Abi],\n  features: {\n    [FEATURE_EDITION_BURNABLE.name]: FEATURE_EDITION_BURNABLE,\n    [FEATURE_EDITION_ENUMERABLE.name]: FEATURE_EDITION_ENUMERABLE,\n    [FEATURE_EDITION_MINTABLE.name]: FEATURE_EDITION_MINTABLE,\n    [FEATURE_EDITION_DROPPABLE.name]: FEATURE_EDITION_DROPPABLE,\n    [FEATURE_EDITION_REVEALABLE.name]: FEATURE_EDITION_REVEALABLE,\n    [FEATURE_EDITION_SIGNATURE_MINTABLE.name]:\n      FEATURE_EDITION_SIGNATURE_MINTABLE,\n  },\n} as const;\n","import IThirdwebPrimarySaleAbi from \"../../abis/IPrimarySale.json\";\nimport IThirdwebPlatformFeeAbi from \"../../abis/IPlatformFee.json\";\nimport IThirdwebRoyaltyAbi from \"../../abis/IRoyalty.json\";\nimport IPermissionsEnumerableAbi from \"../../abis/IPermissionsEnumerable.json\";\nimport IContractMetadataAbi from \"../../abis/IContractMetadata.json\";\n\nexport const FEATURE_ROYALTY = {\n  name: \"Royalty\",\n  namespace: \"royalty\",\n  docLinks: {\n    sdk: \"sdk.contractroyalty\",\n    contracts: \"Royalty\",\n  },\n  abis: [IThirdwebRoyaltyAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_PRIMARY_SALE = {\n  name: \"PrimarySale\",\n  namespace: \"sales\",\n  docLinks: {\n    sdk: \"sdk.contractprimarysale\",\n    contracts: \"PrimarySale\",\n  },\n  abis: [IThirdwebPrimarySaleAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_PLATFORM_FEE = {\n  name: \"PlatformFee\",\n  namespace: \"platformFee\",\n  docLinks: {\n    sdk: \"sdk.platformfee\",\n    contracts: \"PlatformFee\",\n  },\n  abis: [IThirdwebPlatformFeeAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_PERMISSIONS = {\n  name: \"Permissions\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"PermissionsEnumerable\",\n  },\n  abis: [IPermissionsEnumerableAbi],\n  features: {},\n} as const;\n\nexport const FEATURE_METADATA = {\n  name: \"ContractMetadata\",\n  namespace: \"metadata\",\n  docLinks: {\n    sdk: \"sdk.contractmetadata\",\n    contracts: \"ContractMetadata\",\n  },\n  abis: [IContractMetadataAbi],\n  features: {},\n} as const;\n","const MAX_LENGTH = 256;\nconst NUMERIC_IDENTIFIER = \"0|[1-9]\\\\d*\";\nconst MAIN_VERSION_IDENTIFIER = `(${NUMERIC_IDENTIFIER})\\\\.(${NUMERIC_IDENTIFIER})\\\\.(${NUMERIC_IDENTIFIER})`;\nconst REGEX_MAIN_VERSION = new RegExp(MAIN_VERSION_IDENTIFIER);\n\n/**\n * @internal\n */\nexport type Semver = {\n  major: number;\n  minor: number;\n  patch: number;\n  versionString: string;\n};\n\n/**\n * @internal\n * @param version\n */\nexport function toSemver(version: string): Semver {\n  if (version.length > MAX_LENGTH) {\n    throw new Error(`version is longer than ${MAX_LENGTH} characters`);\n  }\n  const matches = version.trim().match(REGEX_MAIN_VERSION);\n  if (!matches || matches?.length !== 4) {\n    throw new Error(\n      `${version} is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1`,\n    );\n  }\n  const major = Number(matches[1]);\n  const minor = Number(matches[2]);\n  const patch = Number(matches[3]);\n  const versionString = [major, minor, patch].join(\".\");\n  return {\n    major,\n    minor,\n    patch,\n    versionString,\n  };\n}\n\n/**\n * @internal\n * @param current\n * @param next\n */\nexport function isIncrementalVersion(current: string, next: string) {\n  const currentSemver = toSemver(current);\n  const nextSemver = toSemver(next);\n  if (nextSemver.major > currentSemver.major) {\n    return true;\n  }\n  const eqMajor = nextSemver.major === currentSemver.major;\n  if (eqMajor && nextSemver.minor > currentSemver.minor) {\n    return true;\n  }\n  const eqMinor = nextSemver.minor === currentSemver.minor;\n  return eqMajor && eqMinor && nextSemver.patch > currentSemver.patch;\n}\n","import { isBrowser } from \"../../common/utils\";\nimport { SDKOptions } from \"../../schema\";\nimport {\n  LoginOptions,\n  LoginPayload,\n  AuthenticationOptions,\n  LoginPayloadData,\n  LoginPayloadDataSchema,\n  AuthenticationPayloadDataSchema,\n  AuthenticationPayloadData,\n  LoginOptionsSchema,\n  VerifyOptionsSchema,\n  VerifyOptions,\n  AuthenticationOptionsSchema,\n} from \"../../schema/auth\";\nimport { RPCConnectionHandler } from \"../classes/rpc-connection-handler\";\nimport { NetworkOrSignerOrProvider } from \"../types\";\nimport { UserWallet } from \"../wallet\";\n\n/**\n * Wallet Authenticator\n * @remarks The wallet authenticator enables server-side applications to securely identify the\n * connected wallet address of users on the client-side, and also enables users to authenticate\n * to any backend using just their wallet. It implements the JSON Web Token (JWT) authentication\n * standard.\n *\n * @example\n * ```javascript\n * // We specify the domain of the application to authenticate to\n * const domain = \"thirdweb.com\"\n *\n * // On the client side, we can generate a payload for the connected wallet to login\n * const loginPayload = await sdk.auth.login(domain);\n *\n * // Then on the server side, we can securely verify the connected client-side address\n * const address = sdk.auth.verify(domain, loginPayload);\n *\n * // And we can also generate an authentication token to send to the client\n * const token = sdk.auth.generate(domain, loginPayload);\n *\n * // Finally, the token can be send from the client to the server to make authenticated requests\n * // And the server can use the following function to authenticate a token and verify the associated address\n * const address = sdk.auth.authenticate(domain, token);\n * ```\n * @beta\n */\nexport class WalletAuthenticator extends RPCConnectionHandler {\n  private wallet: UserWallet;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    wallet: UserWallet,\n    options: SDKOptions,\n  ) {\n    super(network, options);\n    this.wallet = wallet;\n  }\n\n  /**\n   * Login With Connected Wallet\n   * @remarks Client-side function that allows the connected wallet to login to a server-side application.\n   * Generates a login payload that can be sent to the server-side for verification or authentication.\n   *\n   * @param domain - The domain of the server-side application to login to\n   * @param options - Optional configuration options for the login request\n   * @returns Login payload that can be used on the server-side to verify the login request or authenticate\n   *\n   * @example\n   * ```javascript\n   * // Add the domain of the application users will login to, this will be used throughout the login process\n   * const domain = \"thirdweb.com\";\n   * // Generate a signed login payload for the connected wallet to authenticate with\n   * const loginPayload = await sdk.auth.login(domain);\n   * ```\n   */\n  public async login(\n    domain: string,\n    options?: LoginOptions,\n  ): Promise<LoginPayload> {\n    const parsedOptions = LoginOptionsSchema.parse(options);\n\n    const signerAddress = await this.wallet.getAddress();\n    const expirationTime =\n      parsedOptions?.expirationTime || new Date(Date.now() + 1000 * 60 * 5);\n    const payloadData = LoginPayloadDataSchema.parse({\n      domain,\n      address: signerAddress,\n      nonce: parsedOptions?.nonce,\n      expiration_time: expirationTime,\n      chain_id: parsedOptions?.chainId,\n    });\n\n    const message = this.generateMessage(payloadData);\n    const signature = await this.wallet.sign(message);\n\n    return {\n      payload: payloadData,\n      signature,\n    };\n  }\n\n  /**\n   * Verify Logged In Address\n   * @remarks Server-side function to securely verify the address of the logged in client-side wallet\n   * by validating the provided client-side login request.\n   *\n   * @param domain - The domain of the server-side application to verify the login request for\n   * @param payload - The login payload to verify\n   * @returns Address of the logged in wallet\n   *\n   * @example\n   * ```javascript\n   * const domain = \"thirdweb.com\";\n   * const loginPayload = await sdk.auth.login(domain);\n   *\n   * // Verify the login request\n   * const address = sdk.auth.verify(domain, loginPayload);\n   * ```\n   */\n  public verify(\n    domain: string,\n    payload: LoginPayload,\n    options?: VerifyOptions,\n  ): string {\n    const parsedOptions = VerifyOptionsSchema.parse(options);\n\n    // Check that the intended domain matches the domain of the payload\n    if (payload.payload.domain !== domain) {\n      throw new Error(\n        `Expected domain '${domain}' does not match domain on payload '${payload.payload.domain}'`,\n      );\n    }\n\n    // Check that the payload hasn't expired\n    const currentTime = new Date();\n    if (currentTime > new Date(payload.payload.expiration_time)) {\n      throw new Error(`Login request has expired`);\n    }\n\n    // If chain ID is specified, check that it matches the chain ID of the signature\n    if (\n      parsedOptions?.chainId !== undefined &&\n      parsedOptions.chainId !== payload.payload.chain_id\n    ) {\n      throw new Error(\n        `Chain ID '${parsedOptions.chainId}' does not match payload chain ID '${payload.payload.chain_id}'`,\n      );\n    }\n\n    // Check that the signing address is the claimed wallet address\n    const message = this.generateMessage(payload.payload);\n    const userAddress = this.wallet.recoverAddress(message, payload.signature);\n    if (userAddress.toLowerCase() !== payload.payload.address.toLowerCase()) {\n      throw new Error(\n        `Signer address '${userAddress.toLowerCase()}' does not match payload address '${payload.payload.address.toLowerCase()}'`,\n      );\n    }\n\n    return userAddress;\n  }\n\n  /**\n   * Generate Authentication Token\n   * @remarks Server-side function that generates a JWT token from the provided login request that the\n   * client-side wallet can use to authenticate to the server-side application.\n   *\n   * @param domain - The domain of the server-side application to authenticate to\n   * @param payload - The login payload to authenticate with\n   * @param options - Optional configuration options for the authentication request\n   * @returns A authentication token that can be used by the client to make authenticated requests\n   *\n   * @example\n   * ```javascript\n   * const domain = \"thirdweb.com\";\n   * const loginPayload = await sdk.auth.login(domain);\n   *\n   * // Generate a JWT token that can be sent to the client-side wallet and used for authentication\n   * const token = await sdk.auth.generateAuthToken(domain, loginPayload);\n   * ```\n   */\n  public async generateAuthToken(\n    domain: string,\n    payload: LoginPayload,\n    options?: AuthenticationOptions,\n  ): Promise<string> {\n    if (isBrowser()) {\n      throw new Error(\n        \"Authentication tokens should not be generated in the browser, as they must be signed by a server-side admin wallet.\",\n      );\n    }\n\n    const parsedOptions = AuthenticationOptionsSchema.parse(options);\n\n    const userAddress = this.verify(domain, payload);\n    const adminAddress = await this.wallet.getAddress();\n    const payloadData = AuthenticationPayloadDataSchema.parse({\n      iss: adminAddress,\n      sub: userAddress,\n      aud: domain,\n      nbf: parsedOptions?.invalidBefore || new Date(),\n      exp:\n        parsedOptions?.expirationTime ||\n        new Date(Date.now() + 1000 * 60 * 60 * 5),\n      iat: new Date(),\n    });\n\n    const message = JSON.stringify(payloadData);\n    const signature = await this.wallet.sign(message);\n\n    // Header used for JWT token specifying hash algorithm\n    const header = {\n      // Specify ECDSA with SHA-256 for hashing algorithm\n      alg: \"ES256\",\n      typ: \"JWT\",\n    };\n\n    const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n      \"base64\",\n    );\n    const encodedData = Buffer.from(JSON.stringify(payloadData))\n      .toString(\"base64\")\n      .replace(/=/g, \"\");\n    const encodedSignature = Buffer.from(signature).toString(\"base64\");\n\n    // Generate a JWT token with base64 encoded header, payload, and signature\n    const token = `${encodedHeader}.${encodedData}.${encodedSignature}`;\n\n    return token;\n  }\n\n  /**\n   * Authenticate With Token\n   * @remarks Server-side function that authenticates the provided JWT token. This function verifies that\n   * the provided authentication token is valid and returns the address of the authenticated wallet.\n   *\n   * @param domain - The domain of the server-side application doing authentication\n   * @param token - The authentication token being used\n   * @returns The address of the authenticated wallet\n   *\n   * @example\n   * ```javascript\n   * const domain = \"thirdweb.com\";\n   * const loginPayload = await sdk.auth.login(domain);\n   * const token = await sdk.auth.generateAuthToken(domain, loginPayload);\n   *\n   * // Authenticate the token and get the address of authenticating users wallet\n   * const address = sdk.auth.authenticate(domain, token);\n   * ```\n   */\n  public async authenticate(domain: string, token: string): Promise<string> {\n    if (isBrowser()) {\n      throw new Error(\n        \"Should not authenticate tokens in the browser, as they must be verified by the server-side admin wallet.\",\n      );\n    }\n\n    const encodedPayload = token.split(\".\")[1];\n    const encodedSignature = token.split(\".\")[2];\n    const payload: AuthenticationPayloadData = JSON.parse(\n      Buffer.from(encodedPayload, \"base64\").toString(),\n    );\n    const signature = Buffer.from(encodedSignature, \"base64\").toString();\n\n    // Check that the token audience matches the domain\n    if (payload.aud !== domain) {\n      throw new Error(\n        `Expected token to be for the domain '${domain}', but found token with domain '${payload.aud}'`,\n      );\n    }\n\n    // Check that the token is past the invalid before time\n    const currentTime = Math.floor(new Date().getTime() / 1000);\n    if (currentTime < payload.nbf) {\n      throw new Error(\n        `This token is invalid before epoch time '${payload.nbf}', current epoch time is '${currentTime}'`,\n      );\n    }\n\n    // Check that the token hasn't expired\n    if (currentTime > payload.exp) {\n      throw new Error(\n        `This token expired at epoch time '${payload.exp}', current epoch time is '${currentTime}'`,\n      );\n    }\n\n    // Check that the connected wallet matches the token issuer\n    const connectedAddress = await this.wallet.getAddress();\n    if (connectedAddress.toLowerCase() !== payload.iss.toLowerCase()) {\n      throw new Error(\n        `Expected the connected wallet address '${connectedAddress}' to match the token issuer address '${payload.iss}'`,\n      );\n    }\n\n    // Check that the connected wallet signed the token\n    const adminAddress = this.wallet.recoverAddress(\n      JSON.stringify(payload),\n      signature,\n    );\n    if (connectedAddress.toLowerCase() !== adminAddress.toLowerCase()) {\n      throw new Error(\n        `The connected wallet address '${connectedAddress}' did not sign the token`,\n      );\n    }\n\n    return payload.sub;\n  }\n\n  /**\n   * Generates a EIP-4361 compliant message to sign based on the login payload\n   */\n  private generateMessage(payload: LoginPayloadData): string {\n    let message = ``;\n\n    // Add the domain and login address for transparency\n    message += `${payload.domain} wants you to sign in with your account:\\n${payload.address}\\n\\n`;\n\n    // Prompt user to make sure domain is correct to prevent phishing attacks\n    message += `Make sure that the requesting domain above matches the URL of the current website.\\n\\n`;\n\n    // Add data fields in compliance with the EIP-4361 standard\n    if (payload.chain_id) {\n      message += `Chain ID: ${payload.chain_id}\\n`;\n    }\n\n    message += `Nonce: ${payload.nonce}\\n`;\n    message += `Expiration Time: ${payload.expiration_time}\\n`;\n\n    return message;\n  }\n}\n","import { z } from \"zod\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { AddressSchema, RawDateSchema } from \"./shared\";\n\n/**\n * @internal\n */\nexport const LoginOptionsSchema = z\n  .object({\n    /**\n     * The optional nonce of the login request used to prevent replay attacks\n     */\n    nonce: z.string().optional(),\n    /**\n     * The optional time after which the login payload will be invalid\n     */\n    expirationTime: z.date().optional(),\n    /**\n     * The optional chain ID that the login request was intended for\n     */\n    chainId: z.number().optional(),\n  })\n  .optional();\n\n/**\n * @internal\n */\nexport const LoginPayloadDataSchema = z.object({\n  /**\n   * The domain that the user is attempting to login to\n   */\n  domain: z.string(),\n  /**\n   * The address of the account that is logging in\n   */\n  address: AddressSchema,\n  /**\n   * The nonce of the login request used to prevent replay attacks, defaults to a random UUID\n   */\n  nonce: z.string().default(uuidv4()),\n  /**\n   * The time after which the login payload will be invalid, defaults to 5 minutes from now\n   */\n  expiration_time: z.date().transform((d) => d.toISOString()),\n  /**\n   * The chain ID that the login request was intended for, defaults to none\n   */\n  chain_id: z.number().optional(),\n});\n\n/**\n * @internal\n */\nexport const LoginPayloadSchema = z.object({\n  /**\n   * The payload data used for login\n   */\n  payload: LoginPayloadDataSchema,\n  /**\n   * The signature of the login request used for verification\n   */\n  signature: z.string(),\n});\n\n/**\n * @internal\n */\nexport const VerifyOptionsSchema = z\n  .object({\n    /**\n     * The optional chain ID to expect the request to be for\n     */\n    chainId: z.number().optional(),\n  })\n  .optional();\n\n/**\n * @internal\n */\nexport const AuthenticationOptionsSchema = z\n  .object({\n    /**\n     * The date before which the authentication payload is invalid\n     */\n    invalidBefore: z.date().optional(),\n    /**\n     * The date after which the authentication payload is invalid\n     */\n    expirationTime: z.date().optional(),\n  })\n  .optional();\n\n/**\n * @internal\n */\nexport const AuthenticationPayloadDataSchema = z.object({\n  /**\n   * The address of the wallet issuing the payload\n   */\n  iss: z.string(),\n  /**\n   * The address of the wallet requesting to authenticate\n   */\n  sub: z.string(),\n  /**\n   * The domain intended to receive the authentication payload\n   */\n  aud: z.string(),\n  /**\n   * The date before which the authentication payload is invalid\n   */\n  exp: RawDateSchema.transform((b) => b.toNumber()),\n  /**\n   * The date after which the authentication payload is invalid\n   */\n  nbf: RawDateSchema.transform((b) => b.toNumber()),\n  /**\n   * The date on which the payload was issued\n   */\n  iat: RawDateSchema.transform((b) => b.toNumber()),\n  /**\n   * The unique identifier of the payload\n   */\n  jti: z.string().default(uuidv4()),\n});\n\n/**\n * @internal\n */\nexport const AuthenticationPayloadSchema = z.object({\n  /**\n   * The payload data used for authentication\n   */\n  payload: AuthenticationPayloadDataSchema,\n  /**\n   * The signature of the authentication payload used for authentication\n   */\n  signature: z.string(),\n});\n\n/**\n * @public\n */\nexport type LoginOptions = z.input<typeof LoginOptionsSchema>;\n\n/**\n * @public\n */\nexport type LoginPayloadData = z.output<typeof LoginPayloadDataSchema>;\n\n/**\n * @public\n */\nexport type LoginPayload = z.output<typeof LoginPayloadSchema>;\n\n/**\n * @public\n */\nexport type VerifyOptions = z.input<typeof VerifyOptionsSchema>;\n\n/**\n * @public\n */\nexport type AuthenticationOptions = z.input<typeof AuthenticationOptionsSchema>;\n\n/**\n * @public\n */\nexport type AuthenticationPayloadData = z.output<\n  typeof AuthenticationPayloadDataSchema\n>;\n\n/**\n * @public\n */\nexport type AuthenticationPayload = z.output<\n  typeof AuthenticationPayloadSchema\n>;\n","import { ethers, Signer, providers } from \"ethers\";\nimport EventEmitter from \"eventemitter3\";\nimport { getReadOnlyProvider } from \"../../constants/urls\";\nimport {\n  SDKOptions,\n  SDKOptionsOutput,\n  SDKOptionsSchema,\n} from \"../../schema/sdk-options\";\nimport { NetworkOrSignerOrProvider } from \"../types\";\n\n/**\n * @internal\n */\nexport class RPCConnectionHandler extends EventEmitter {\n  private provider: providers.Provider;\n  private signer: Signer | undefined;\n  protected readonly options: SDKOptionsOutput;\n\n  constructor(network: NetworkOrSignerOrProvider, options: SDKOptions) {\n    super();\n    const [signer, provider] = this.getSignerAndProvider(network, options);\n    this.signer = signer;\n    this.provider = provider;\n\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid sdk options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n  }\n  /**\n   * The function to call whenever the network changes, such as when the users connects their wallet, disconnects their wallet, the connected chain changes, etc.\n   *\n   * @param network - a network, signer or provider that ethers js can interpret\n   */\n  public updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    const [signer, provider] = this.getSignerAndProvider(network, this.options);\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   *\n   * @returns whether or not a signer is set, `true` if there is no signer so the class is in \"read only\" mode\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active signer, if there is one\n   */\n  public getSigner(): Signer | undefined {\n    return this.signer;\n  }\n\n  /**\n   * Explicitly get the active provider.\n   * @returns the active provider\n   */\n  public getProvider(): providers.Provider {\n    return this.provider;\n  }\n\n  /**\n   *\n   * @returns the current signer if there is one, otherwise the active provider\n   */\n  public getSignerOrProvider(): Signer | providers.Provider {\n    return this.getSigner() || this.getProvider();\n  }\n\n  /** ********************\n   * PRIVATE FUNCTIONS\n   *********************/\n\n  private getSignerAndProvider(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n  ): [Signer | undefined, providers.Provider] {\n    let signer: Signer | undefined;\n    let provider: providers.Provider | undefined;\n\n    if (Signer.isSigner(network)) {\n      signer = network;\n      if (network.provider) {\n        provider = network.provider;\n      }\n    }\n\n    if (options?.readonlySettings) {\n      provider = getReadOnlyProvider(\n        options.readonlySettings.rpcUrl,\n        options.readonlySettings.chainId,\n      );\n    }\n\n    if (!provider) {\n      if (providers.Provider.isProvider(network)) {\n        provider = network;\n      } else if (!Signer.isSigner(network)) {\n        if (typeof network === \"string\") {\n          provider = getReadOnlyProvider(\n            network,\n            options?.readonlySettings?.chainId,\n          );\n        } else {\n          // no a signer, not a provider, not a string? try with default provider\n          provider = ethers.getDefaultProvider(network);\n        }\n      }\n    }\n\n    if (!provider) {\n      // we should really never hit this case!\n      provider = ethers.getDefaultProvider();\n      console.error(\n        \"No provider found, using default provider on default chain!\",\n      );\n    }\n\n    return [signer, provider];\n  }\n}\n","import { OZ_DEFENDER_FORWARDER_ADDRESS } from \"../constants/addresses\";\nimport { z } from \"zod\";\n\n/**\n * @public\n */\nexport const SDKOptionsSchema = z\n  .object({\n    readonlySettings: z\n      .object({\n        rpcUrl: z.string().url(),\n        chainId: z.number().optional(),\n      })\n      .optional(),\n    gasSettings: z\n      .object({\n        maxPriceInGwei: z\n          .number()\n          .min(1, \"gas price cannot be less than 1\")\n          .default(300),\n        speed: z.enum([\"standard\", \"fast\", \"fastest\"]).default(\"fastest\"),\n      })\n      .default({ maxPriceInGwei: 300, speed: \"fastest\" }),\n    gasless: z\n      .union([\n        z.object({\n          openzeppelin: z.object({\n            relayerUrl: z.string().url(),\n            relayerForwarderAddress: z\n              .string()\n              .default(OZ_DEFENDER_FORWARDER_ADDRESS),\n          }),\n        }),\n        z.object({\n          biconomy: z.object({\n            apiId: z.string(),\n            apiKey: z.string(),\n            deadlineSeconds: z\n              .number()\n              .min(1, \"deadlineSeconds cannot be les than 1\")\n              .default(3600),\n          }),\n        }),\n      ])\n      .optional(),\n  })\n  .default({\n    gasSettings: { maxPriceInGwei: 300, speed: \"fastest\" },\n  });\n\n/**\n * @public\n * All these configuration options are optional with sane defaults:\n * @example\n * ```javascript\n * {\n *   readonlySettings: {\n *     rpcUrl, // force read calls to go through your own RPC url\n *     chainId, // reduce RPC calls by sepcifying your chain ID\n *   },\n *   gasSettings: {\n *     maxPriceInGwei, // Maximum gas price for transactions (default 300 gwei)\n *     speed, // the tx speed setting: 'standard'|'fast|'fastest' (default: 'fastest')\n *   },\n *   gasless: {\n *     // By specifying a gasless configuration - all transactions will get forwarded to enable gasless transactions\n *     openzeppelin: {\n *       relayerUrl, // your OZ Defender relayer URL\n *       relayerForwarderAddress, // the OZ defender relayer address (defaults to the standard one)\n *     },\n *     biconomy: {\n *       apiId, // your Biconomy API Id\n *       apiKey, // your Biconomy API Key\n *       deadlineSeconds, // your Biconomy timeout preference\n *     },\n *   },\n * }\n * ```\n */\nexport type SDKOptions = z.input<typeof SDKOptionsSchema>;\n/**\n * @internal\n */\nexport type SDKOptionsOutput = z.output<typeof SDKOptionsSchema>;\n","import {\n  DEFAULT_IPFS_GATEWAY,\n  PINATA_IPFS_URL,\n  PUBLIC_GATEWAYS,\n} from \"../../constants/urls\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { FileOrBuffer, JsonObject } from \"../types\";\nimport {\n  replaceFilePropertiesWithHashes,\n  replaceGatewayUrlWithHash,\n  replaceHashWithGatewayUrl,\n  resolveGatewayUrl,\n} from \"../helpers/storage\";\nimport { PinataUploader } from \"../uploaders/pinata-uploader\";\nimport { UploadProgressEvent } from \"../../types/events\";\nimport { File } from \"@web-std/file\";\nimport FormData from \"form-data\";\nimport { IStorageUpload, UploadResult } from \"../interfaces\";\n\n/**\n * IPFS Storage implementation, accepts custom IPFS gateways\n * @remarks By default, thirdweb automatically uploads files to IPFS when you perform operations such as minting, this class allows you to do it manually.\n * @public\n */\nexport class IpfsStorage implements IStorage {\n  /**\n   * {@inheritdoc IStorage.gatewayUrl}\n   * @internal\n   */\n  public gatewayUrl: string;\n  private failedUrls: string[] = [];\n  private uploader: IStorageUpload;\n\n  constructor(\n    gatewayUrl: string = DEFAULT_IPFS_GATEWAY,\n    uploader: IStorageUpload = new PinataUploader(),\n  ) {\n    this.gatewayUrl = `${gatewayUrl.replace(/\\/$/, \"\")}/`;\n    this.uploader = uploader;\n  }\n\n  private getNextPublicGateway() {\n    const urlsToTry = PUBLIC_GATEWAYS.filter(\n      (url) => !this.failedUrls.includes(url),\n    ).filter((url) => url !== this.gatewayUrl);\n    if (urlsToTry.length > 0) {\n      return urlsToTry[0];\n    } else {\n      this.failedUrls = [];\n      return undefined;\n    }\n  }\n\n  /**\n   * Upload a file to IPFS and return the hash\n   * @remarks This method is a wrapper around {@link IStorage.upload}\n   * @example\n   * ```javascript\n   * const file = './path/to/file.png'; // Can be a path or a File object such as a file from an input element.\n   * const hash = await sdk.storage.upload(file);\n   * ```\n   *\n   *\n   */\n  public async upload(\n    data: string | FileOrBuffer,\n    contractAddress?: string,\n    signerAddress?: string,\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<string> {\n    const { cid, fileNames } = await this.uploader.uploadBatchWithCid(\n      [data],\n      0,\n      contractAddress,\n      signerAddress,\n      options,\n    );\n\n    const baseUri = `ipfs://${cid}/`;\n    return `${baseUri}${fileNames[0]}`;\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadBatch}\n   */\n  public async uploadBatch(\n    files: (string | FileOrBuffer)[],\n    fileStartNumber = 0,\n    contractAddress?: string,\n    signerAddress?: string,\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ) {\n    const { cid, fileNames } = await this.uploader.uploadBatchWithCid(\n      files,\n      fileStartNumber,\n      contractAddress,\n      signerAddress,\n      options,\n    );\n\n    const baseUri = `ipfs://${cid}/`;\n    const uris = fileNames.map((filename) => `${baseUri}${filename}`);\n    return {\n      baseUri,\n      uris,\n    };\n  }\n\n  /**\n   * {@inheritDoc IStorage.get}\n   */\n  public async get(hash: string): Promise<Record<string, any>> {\n    const res = await this._get(hash);\n    const json = await res.json();\n    return replaceHashWithGatewayUrl(json, \"ipfs://\", this.gatewayUrl);\n  }\n\n  /**\n   * {@inheritDoc IStorage.getRaw}\n   */\n  public async getRaw(hash: string): Promise<string> {\n    const res = await this._get(hash);\n    return await res.text();\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadMetadata}\n   */\n  public async uploadMetadata(\n    metadata: JsonObject,\n    contractAddress?: string,\n    signerAddress?: string,\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<string> {\n    // since there's only single object, always use the first index\n    const { uris } = await this.uploadMetadataBatch(\n      [metadata],\n      0,\n      contractAddress,\n      signerAddress,\n      options,\n    );\n    return uris[0];\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadMetadataBatch}\n   */\n  public async uploadMetadataBatch(\n    metadatas: JsonObject[],\n    fileStartNumber?: number,\n    contractAddress?: string,\n    signerAddress?: string,\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<UploadResult> {\n    const metadataToUpload = (\n      await this.batchUploadProperties(metadatas, options)\n    ).map((m: any) => JSON.stringify(m));\n\n    const { cid, fileNames } = await this.uploader.uploadBatchWithCid(\n      metadataToUpload,\n      fileStartNumber,\n      contractAddress,\n      signerAddress,\n    );\n\n    const baseUri = `ipfs://${cid}/`;\n    const uris = fileNames.map((filename) => `${baseUri}${filename}`);\n\n    return {\n      baseUri,\n      uris,\n    };\n  }\n\n  /** *************************\n   * PRIVATE FUNCTIONS\n   *************************/\n\n  private async _get(hash: string): Promise<Response> {\n    let uri = hash;\n    if (hash) {\n      uri = resolveGatewayUrl(hash, \"ipfs://\", this.gatewayUrl);\n    }\n    const result = await fetch(uri);\n    if (!result.ok && result.status === 500) {\n      throw new Error(`Error fetching ${uri} - Status code ${result.status}`);\n    }\n    if (!result.ok && result.status !== 404) {\n      const nextUrl = this.getNextPublicGateway();\n      if (nextUrl) {\n        this.failedUrls.push(this.gatewayUrl);\n        this.gatewayUrl = nextUrl;\n        return this._get(hash);\n      } else {\n        throw new Error(`Error fetching ${uri} - Status code ${result.status}`);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Pre-processes metadata and uploads all file properties\n   * to storage in *bulk*, then performs a string replacement of\n   * all file properties -\\> the resulting ipfs uri. This is\n   * called internally by `uploadMetadataBatch`.\n   *\n   * @internal\n   *\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n   * @param metadatas\n   * @param options\n   */\n  private async batchUploadProperties(\n    metadatas: JsonObject[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ) {\n    // replace all active gateway url links with their raw ipfs hash\n    const sanitizedMetadatas = replaceGatewayUrlWithHash(\n      metadatas,\n      \"ipfs://\",\n      this.gatewayUrl,\n    );\n    // extract any binary file to upload\n    const filesToUpload = sanitizedMetadatas.flatMap((m: JsonObject) =>\n      this.buildFilePropertiesMap(m, []),\n    );\n    // if no binary files to upload, return the metadata\n    if (filesToUpload.length === 0) {\n      return sanitizedMetadatas;\n    }\n    // otherwise upload those files\n    const { cid, fileNames } = await this.uploader.uploadBatchWithCid(\n      filesToUpload,\n      undefined,\n      undefined,\n      undefined,\n      options,\n    );\n\n    const cids = [];\n    // recurse ordered array\n    for (const filename of fileNames) {\n      cids.push(`${cid}/${filename}`);\n    }\n\n    // replace all files with their ipfs hash\n    return replaceFilePropertiesWithHashes(sanitizedMetadatas, cids);\n  }\n\n  /**\n   * This function recurisely traverses an object and hashes any\n   * `Buffer` or `File` objects into the returned map.\n   *\n   * @param object - the Json Object\n   * @param files - The running array of files or buffer to upload\n   * @returns - The final map of all hashes to files\n   */\n  private buildFilePropertiesMap(\n    object: JsonObject,\n    files: (File | Buffer)[] = [],\n  ): (File | Buffer)[] {\n    if (Array.isArray(object)) {\n      object.forEach((element) => {\n        this.buildFilePropertiesMap(element, files);\n      });\n    } else if (object) {\n      const values = Object.values(object);\n      for (const val of values) {\n        if (val instanceof File || val instanceof Buffer) {\n          files.push(val);\n        } else if (typeof val === \"object\") {\n          this.buildFilePropertiesMap(val as JsonObject, files);\n        }\n      }\n    }\n    return files;\n  }\n\n  /**\n   * FOR TESTING ONLY\n   * @internal\n   * @param data -\n   * @param contractAddress -\n   * @param signerAddress -\n   */\n  public async uploadSingle(\n    data: string | Record<string, any>,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    // TODO move down to IStorageUpload\n    const token = await (this.uploader as PinataUploader).getUploadToken(\n      contractAddress || \"\",\n    );\n    const metadata = {\n      name: `CONSOLE-TS-SDK-${contractAddress}`,\n      keyvalues: {\n        sdk: \"typescript\",\n        contractAddress,\n        signerAddress,\n      },\n    };\n    const formData = new FormData();\n    const filepath = `files`; // Root directory\n    formData.append(\"file\", data as any, filepath as any);\n    formData.append(\"pinataMetadata\", JSON.stringify(metadata));\n    formData.append(\n      \"pinataOptions\",\n      JSON.stringify({\n        wrapWithDirectory: false,\n      }),\n    );\n    const res = await fetch(PINATA_IPFS_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        ...formData.getHeaders(),\n      },\n      body: formData.getBuffer(),\n    });\n    if (!res.ok) {\n      throw new Error(`Failed to upload to IPFS [status code = ${res.status}]`);\n    }\n\n    const body = await res.json();\n    return body.IpfsHash;\n  }\n}\n","import { Json } from \"../types\";\nimport { File } from \"@web-std/file\";\n\n/**\n * Given a map of file hashes to ipfs uris, this function will hash\n * all properties recursively and replace them with the ipfs uris\n * from the map passed in. If a hash is missing from the map, the function\n * will throw an error.\n *\n * @internal\n *\n * @param object - The object to recursively process\n * @param cids - The array of file hashes to ipfs uris in the recurse order\n * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n */\nexport function replaceFilePropertiesWithHashes(\n  object: Record<string, any>,\n  cids: string[],\n) {\n  const keys = Object.keys(object);\n  for (const key in keys) {\n    const val = object[keys[key]];\n    const isFile = val instanceof File || val instanceof Buffer;\n    if (typeof val === \"object\" && !isFile) {\n      replaceFilePropertiesWithHashes(val, cids);\n      continue;\n    }\n\n    if (!isFile) {\n      continue;\n    }\n\n    object[keys[key]] = `ipfs://${cids.splice(0, 1)[0]}`;\n  }\n  return object;\n}\n\n/**\n * Replaces all ipfs:// hashes (or any other scheme) with gateway url\n * @internal\n * @param object\n * @param scheme\n * @param gatewayUrl\n */\nexport function replaceHashWithGatewayUrl(\n  object: Record<string, any>,\n  scheme: string,\n  gatewayUrl: string,\n): Record<string, any> {\n  if (object === null || !object) {\n    return {};\n  }\n  const keys = Object.keys(object);\n  for (const key in keys) {\n    const val = object[keys[key]];\n    object[keys[key]] = resolveGatewayUrl(val, scheme, gatewayUrl);\n    if (Array.isArray(val)) {\n      object[keys[key]] = val.map((el) => {\n        if (typeof el === \"object\") {\n          return replaceHashWithGatewayUrl(el, scheme, gatewayUrl);\n        } else {\n          return resolveGatewayUrl(el, scheme, gatewayUrl);\n        }\n      });\n    }\n    if (typeof val === \"object\") {\n      replaceHashWithGatewayUrl(val, scheme, gatewayUrl);\n    }\n  }\n  return object;\n}\n\n/**\n * Replaces all gateway urls back to ipfs:// hashes\n * @internal\n * @param object\n * @param scheme\n * @param gatewayUrl\n */\nexport function replaceGatewayUrlWithHash(\n  object: Record<string, any>,\n  scheme: string,\n  gatewayUrl: string,\n): Record<string, any> {\n  if (object === null || !object) {\n    return {};\n  }\n  const keys = Object.keys(object);\n  for (const key in keys) {\n    const val = object[keys[key]];\n    object[keys[key]] = toIPFSHash(val, scheme, gatewayUrl);\n    if (Array.isArray(val)) {\n      object[keys[key]] = val.map((el) => {\n        const isFile = el instanceof File || el instanceof Buffer;\n        if (typeof el === \"object\" && !isFile) {\n          return replaceGatewayUrlWithHash(el, scheme, gatewayUrl);\n        } else {\n          return toIPFSHash(el, scheme, gatewayUrl);\n        }\n      });\n    }\n    const isFile = val instanceof File || val instanceof Buffer;\n    if (typeof val === \"object\" && !isFile) {\n      replaceGatewayUrlWithHash(val, scheme, gatewayUrl);\n    }\n  }\n  return object;\n}\n\n/**\n * Resolves the full URL of a file for a given gateway.\n *\n * For example, if the hash of a file is `ipfs://bafkreib3u2u6ir2fsl5nkuwixfsb3l4xehri3psjv5yga4inuzsjunk2sy`, then the URL will be:\n * \"https://cloudflare-ipfs.com/ipfs/bafkreibnwjhx5s3r2rggdoy3hw7lr7wmgy4bas35oky3ed6eijklk2oyvq\"\n * if the gateway is `cloudflare-ipfs.com`.\n * @internal\n * @param object\n * @param scheme\n * @param gatewayUrl\n */\nexport function resolveGatewayUrl<T extends Json>(\n  object: T,\n  scheme: string,\n  gatewayUrl: string,\n): T {\n  if (typeof object === \"string\") {\n    return object && object.toLowerCase().includes(scheme)\n      ? (object.replace(scheme, gatewayUrl) as T)\n      : object;\n  } else {\n    return object;\n  }\n}\n\n/**\n * @internal\n * @param object\n * @param scheme\n * @param gatewayUrl\n */\nexport function toIPFSHash<T extends Json>(\n  object: T,\n  scheme: string,\n  gatewayUrl: string,\n): T {\n  if (typeof object === \"string\") {\n    return object && object.toLowerCase().includes(gatewayUrl)\n      ? (object.replace(gatewayUrl, scheme) as T)\n      : object;\n  } else {\n    return object;\n  }\n}\n","import { CidWithFileName, IStorageUpload } from \"../interfaces/IStorageUpload\";\nimport {\n  DuplicateFileNameError,\n  FetchError,\n  UploadError,\n} from \"../../common/error\";\nimport { FileOrBuffer } from \"../types\";\nimport { PINATA_IPFS_URL, TW_IPFS_SERVER_URL } from \"../../constants/urls\";\nimport { UploadProgressEvent } from \"../../types/events\";\nimport { File } from \"@web-std/file\";\nimport FormData from \"form-data\";\n\n/**\n * @internal\n */\nexport class PinataUploader implements IStorageUpload {\n  /**\n   * Fetches a one-time-use upload token that can used to upload\n   * a file to storage.\n   *\n   * @returns - The one time use token that can be passed to the Pinata API.\n   */\n  public async getUploadToken(contractAddress: string): Promise<string> {\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const res = await fetch(`${TW_IPFS_SERVER_URL}/grant`, {\n      method: \"GET\",\n      headers,\n    });\n    if (!res.ok) {\n      throw new FetchError(`Failed to get upload token`);\n    }\n    const body = await res.text();\n    return body;\n  }\n\n  public async uploadBatchWithCid(\n    files: (string | FileOrBuffer)[],\n    fileStartNumber = 0,\n    contractAddress?: string,\n    signerAddress?: string,\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<CidWithFileName> {\n    const token = await this.getUploadToken(contractAddress || \"\");\n\n    const formData = new FormData();\n    const { data, fileNames } = this.buildFormData(\n      formData,\n      files,\n      fileStartNumber,\n      contractAddress,\n      signerAddress,\n    );\n\n    if (typeof window === \"undefined\") {\n      if (options?.onProgress) {\n        console.warn(\"The onProgress option is only supported in the browser\");\n      }\n      const res = await fetch(PINATA_IPFS_URL, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          ...data.getHeaders(),\n        },\n        body: data.getBuffer(),\n      });\n      const body = await res.json();\n      if (!res.ok) {\n        throw new UploadError(\"Failed to upload files to IPFS\");\n      }\n\n      const cid = body.IpfsHash;\n      if (!cid) {\n        throw new UploadError(\"Failed to upload files to IPFS\");\n      }\n\n      return {\n        cid,\n        fileNames,\n      };\n    } else {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", PINATA_IPFS_URL);\n        xhr.setRequestHeader(\"Authorization\", `Bearer ${token}`);\n\n        xhr.onloadend = () => {\n          if (xhr.status !== 200) {\n            throw new UploadError(\"Failed to upload files to IPFS\");\n          }\n\n          const cid = JSON.parse(xhr.responseText).IpfsHash;\n          if (!cid) {\n            throw new UploadError(\"Failed to upload files to IPFS\");\n          }\n\n          resolve({\n            cid,\n            fileNames,\n          });\n        };\n\n        xhr.onerror = (err) => {\n          reject(err);\n        };\n\n        if (xhr.upload) {\n          xhr.upload.onprogress = (event) => {\n            if (options?.onProgress) {\n              options?.onProgress({\n                progress: event.loaded,\n                total: event.total,\n              });\n            }\n          };\n        }\n\n        xhr.send(data);\n      });\n    }\n  }\n\n  private buildFormData(\n    data: any,\n    files: (string | FileOrBuffer)[],\n    fileStartNumber = 0,\n    contractAddress?: string,\n    signerAddress?: string,\n  ) {\n    const metadata = {\n      name: `CONSOLE-TS-SDK-${contractAddress}`,\n      keyvalues: {\n        sdk: \"typescript\",\n        contractAddress,\n        signerAddress,\n      },\n    };\n\n    const fileNames: string[] = [];\n    files.forEach((file, i) => {\n      let fileName = \"\";\n      let fileData = file;\n      // if it is a file, we passthrough the file extensions,\n      // if it is a buffer or string, the filename would be fileStartNumber + index\n      // if it is a buffer or string with names, the filename would be the name\n      if (file instanceof File) {\n        let extensions = \"\";\n        if (file.name) {\n          const extensionStartIndex = file.name.lastIndexOf(\".\");\n          if (extensionStartIndex > -1) {\n            extensions = file.name.substring(extensionStartIndex);\n          }\n        }\n        fileName = `${i + fileStartNumber}${extensions}`;\n      } else if (file instanceof Buffer || typeof file === \"string\") {\n        fileName = `${i + fileStartNumber}`;\n      } else if (file && file.name && file?.data) {\n        fileData = file?.data;\n        fileName = `${file.name}`;\n      } else {\n        // default behavior\n        fileName = `${i + fileStartNumber}`;\n      }\n\n      const filepath = `files/${fileName}`;\n      if (fileNames.indexOf(fileName) > -1) {\n        throw new DuplicateFileNameError(fileName);\n      }\n      fileNames.push(fileName);\n      if (typeof window === \"undefined\") {\n        data.append(\"file\", fileData as any, { filepath } as any);\n      } else {\n        // browser does blob things, filepath is parsed differently on browser vs node.\n        // pls pinata?\n        data.append(\"file\", new Blob([fileData as any]), filepath);\n      }\n    });\n\n    data.append(\"pinataMetadata\", JSON.stringify(metadata));\n\n    return {\n      data,\n      fileNames,\n    };\n  }\n}\n","import { UploadProgressEvent } from \"../../types/events\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { UploadResult } from \"../interfaces/IStorageUpload\";\nimport { FileOrBuffer, JsonObject } from \"../types\";\nimport { File } from \"@web-std/file\";\n\n/**\n * Fetch and upload files to IPFS or any other storage.\n * @public\n */\nexport class RemoteStorage {\n  private storage: IStorage;\n\n  constructor(storage: IStorage) {\n    this.storage = storage;\n  }\n\n  /**\n   * Fetch data from any IPFS hash without worrying about gateways, data types, etc.\n   * Simply pass in an IPFS url and we'll handle fetching for you and try every public gateway\n   * to get the fastest response.\n   *\n   * @example\n   * ```javascript\n   * // Your IPFS hash here\n   * const hash = \"ipfs://...\"\n   * const data = await sdk.storage.fetch(hash);\n   * ```\n   * @param hash - The IPFS hash of the file or data to fetch\n   * @returns The data stored at the specified IPFS hash\n   */\n  public async fetch(hash: string): Promise<Record<string, any>> {\n    return this.storage.get(hash);\n  }\n\n  /**\n   * Upload any data to an IPFS directory. We'll handle all the details for you, including\n   * pinning your files and making sure that you get the fastest upload speeds.\n   *\n   * @example\n   * ```javascript\n   * // File upload\n   * const files = [\n   *   fs.readFileSync(\"file1.png\"),\n   *   fs.readFileSync(\"file2.png\"),\n   * ]\n   * const result = await sdk.storage.upload(files);\n   * // uri for each uploaded file will look like something like: ipfs://<hash>/0\n   *\n   * // JSON metadata upload\n   * const jsonMetadata = {\n   *   name: \"Name\",\n   *   description: \"Description\",\n   * }\n   * const result = await sdk.storage.upload(jsonMetadata);\n   *\n   * // Upload progress (browser only)\n   * const result = await sdk.storage.upload(files, {\n   *   onProgress: (event: UploadProgressEvent) => {\n   *     console.log(`Downloaded ${event.progress} / ${event.total}`);\n   *   },\n   * });\n   * ```\n   *\n   * @param data - An array of file data or an array of JSON metadata to upload to IPFS\n   * @param options - Optional. Upload progress callback.\n   * @returns The IPFS hash of the directory that holds all the uploaded data\n   */\n  public async upload(\n    data: FileOrBuffer[] | JsonObject[] | FileOrBuffer | JsonObject,\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<UploadResult> {\n    if (!Array.isArray(data)) {\n      if (\n        data instanceof File ||\n        data instanceof Buffer ||\n        (data.name && data.data && data.data instanceof Buffer)\n      ) {\n        return this.uploadBatch([data as FileOrBuffer], options);\n      } else {\n        return this.uploadMetadataBatch([data as JsonObject], options);\n      }\n    }\n\n    const allFiles = (data as any[]).filter(\n      (item: any) =>\n        item instanceof File ||\n        item instanceof Buffer ||\n        (item.name && item.data && item.data instanceof Buffer),\n    );\n    const allObjects = (data as any[]).filter(\n      (item: any) => !(item instanceof File) && !(item instanceof Buffer),\n    );\n    if (allFiles.length === data.length) {\n      return this.uploadBatch(data as FileOrBuffer[], options);\n    } else if (allObjects.length === data.length) {\n      return this.uploadMetadataBatch(data as JsonObject[], options);\n    } else {\n      throw new Error(\n        \"Data to upload must be either all files or all JSON objects\",\n      );\n    }\n  }\n\n  private async uploadBatch(\n    files: FileOrBuffer[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<UploadResult> {\n    return await this.storage.uploadBatch(\n      files,\n      undefined,\n      undefined,\n      undefined,\n      options,\n    );\n  }\n\n  private async uploadMetadataBatch(\n    metadatas: JsonObject[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<UploadResult> {\n    return await this.storage.uploadMetadataBatch(\n      metadatas,\n      undefined,\n      undefined,\n      undefined,\n      options,\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, utils } from \"ethers\";\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\nexport class ContractEncoder<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Encodes the given contract function with argument\n   * @returns the encoded data\n   */\n  public encode(\n    fn: keyof TContract[\"functions\"],\n    args: Parameters<TContract[\"functions\"][typeof fn]>,\n  ): string {\n    return this.contractWrapper.readContract.interface.encodeFunctionData(\n      fn as string,\n      args,\n    );\n  }\n\n  /**\n   * Decode encoded call data for a given function\n   * @param fn - the function to decode\n   * @param encodedArgs - the encoded arguments\n   */\n  public decode(\n    fn: keyof TContract[\"functions\"],\n    encodedArgs: string,\n  ): utils.Result {\n    return this.contractWrapper.readContract.interface.decodeFunctionData(\n      fn as string,\n      encodedArgs,\n    );\n  }\n}\n","import { IContractMetadata, IERC20Metadata } from \"contracts\";\nimport { z } from \"zod\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { TransactionResult } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  detectContractFeature,\n  fetchContractMetadataFromAddress,\n  hasFunction,\n} from \"../../common\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_METADATA } from \"../../constants/thirdweb-features\";\nimport { BaseContract } from \"ethers\";\n\n/**\n * @internal\n */\nexport interface IGenericSchemaType {\n  deploy: z.AnyZodObject;\n  input: z.AnyZodObject;\n  output: z.AnyZodObject;\n}\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nexport class ContractMetadata<\n  TContract extends BaseContract,\n  TSchema extends IGenericSchemaType,\n> implements DetectableFeature\n{\n  featureName = FEATURE_METADATA.name;\n  private contractWrapper;\n  private schema;\n  private storage;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    schema: TSchema,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  public parseOutputMetadata(metadata: any): z.output<TSchema[\"output\"]> {\n    return this.schema.output.parse(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  public parseInputMetadata(metadata: any): z.input<TSchema[\"input\"]> {\n    return this.schema.input.parse(metadata);\n  }\n  /**\n   * Get the metadata of a contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   */\n  public async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.readContract.contractURI();\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.get(uri);\n      }\n    }\n\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName: string | undefined;\n        try {\n          if (hasFunction<IERC20Metadata>(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.readContract.name();\n          }\n        } catch (err) {\n          // no-op\n        }\n        const publishedMetadata = await fetchContractMetadataFromAddress(\n          this.contractWrapper.readContract.address,\n          this.contractWrapper.getProvider(),\n          this.storage,\n        );\n        data = {\n          name: contractName || publishedMetadata.name,\n          description: publishedMetadata.info.title,\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n\n    return this.parseOutputMetadata(data);\n  }\n  /**\n   * Set the metadata of a contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *  name: \"My Contract\",\n   *  description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  public async set(metadata: z.input<TSchema[\"input\"]>) {\n    const uri = await this._parseAndUploadMetadata(metadata);\n\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      const receipt = await wrapper.sendTransaction(\"setContractURI\", [uri]);\n      return { receipt, data: this.get } as TransactionResult<\n        z.output<TSchema[\"output\"]>\n      >;\n    } else {\n      throw new Error(\"Contract does not support updating contract metadata\");\n    }\n  }\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * */\n  public async update(metadata: Partial<z.input<TSchema[\"input\"]>>) {\n    return await this.set({\n      ...(await this.get()),\n      ...metadata,\n    });\n  }\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  public async _parseAndUploadMetadata(metadata: z.input<TSchema[\"input\"]>) {\n    const parsedMetadata = this.parseInputMetadata(metadata);\n    return this.storage.uploadMetadata(parsedMetadata);\n  }\n\n  private supportsContractMetadata(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<IContractMetadata> {\n    return detectContractFeature<IContractMetadata>(\n      contractWrapper,\n      \"ContractMetadata\",\n    );\n  }\n}\n","import { TransactionResult } from \"../types\";\nimport { getRoleHash, Role } from \"../../common/role\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { MissingRoleError } from \"../../common/error\";\nimport { IPermissionsEnumerable } from \"contracts\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_PERMISSIONS } from \"../../constants/thirdweb-features\";\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\nexport class ContractRoles<\n  TContract extends IPermissionsEnumerable,\n  TRole extends Role,\n> implements DetectableFeature\n{\n  featureName = FEATURE_PERMISSIONS.name;\n  private contractWrapper;\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n  public readonly roles;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    roles: readonly TRole[],\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the contract.\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   */\n  public async getAll(): Promise<Record<TRole, string[]>> {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {} as Record<TRole, string[]>;\n    for (const role of this.roles) {\n      roles[role] = await this.get(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async get(role: TRole): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n\n    const roleHash = getRoleHash(role);\n    const count = (\n      await this.contractWrapper.readContract.getRoleMemberCount(roleHash)\n    ).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        this.contractWrapper.readContract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\n   *\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   *\n   * */\n  public async setAll(rolesWithAddresses: {\n    [key in TRole]?: string[];\n  }): Promise<TransactionResult> {\n    const roles = Object.keys(rolesWithAddresses) as TRole[];\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(\n      roles.every((role) => this.roles.includes(role)),\n      \"this contract does not support the given role\",\n    );\n    const currentRoles = await this.getAll();\n    const encoded: string[] = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort((role) => (role === \"admin\" ? 1 : -1));\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const addresses: string[] = rolesWithAddresses[role] || [];\n      const currentAddresses = currentRoles[role] || [];\n      const toAdd = addresses.filter(\n        (address) => !currentAddresses.includes(address),\n      );\n      const toRemove = currentAddresses.filter(\n        (address) => !addresses.includes(address),\n      );\n      if (toAdd.length) {\n        toAdd.forEach((address) => {\n          encoded.push(\n            this.contractWrapper.readContract.interface.encodeFunctionData(\n              \"grantRole\",\n              [getRoleHash(role), address],\n            ),\n          );\n        });\n      }\n      if (toRemove.length) {\n        for (let j = 0; j < toRemove.length; j++) {\n          const address = toRemove[j];\n          const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n            address,\n          )) as any;\n          encoded.push(\n            this.contractWrapper.readContract.interface.encodeFunctionData(\n              revokeFunctionName,\n              [getRoleHash(role), address],\n            ),\n          );\n        }\n      }\n    }\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  public async verify(roles: TRole[], address: string): Promise<void> {\n    await Promise.all(\n      roles.map(async (role) => {\n        const members = await this.get(role);\n        if (\n          !members.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n        ) {\n          throw new MissingRoleError(address, role);\n        }\n      }),\n    );\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"0x1234567890123456789012345678901234567890\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   */\n  public async grant(role: TRole, address: string): Promise<TransactionResult> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"grantRole\", [\n        getRoleHash(role),\n        address,\n      ]),\n    };\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"0x1234567890123456789012345678901234567890\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   */\n  public async revoke(\n    role: TRole,\n    address: string,\n  ): Promise<TransactionResult> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(revokeFunctionName, [\n        getRoleHash(role),\n        address,\n      ]),\n    };\n  }\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  private async getRevokeRoleFunctionName(address: string) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n","import {\n  ContractMetadata as ContractMetadataContract,\n  IRoyalty,\n} from \"contracts\";\nimport { CommonRoyaltySchema } from \"../../schema/contracts/common\";\nimport { ContractMetadata, IGenericSchemaType } from \"./contract-metadata\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { z } from \"zod\";\nimport { TransactionResult } from \"../types\";\nimport { BigNumberish } from \"ethers\";\nimport { FEATURE_ROYALTY } from \"../../constants/thirdweb-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { hasFunction } from \"../../common\";\n\n/**\n * Handle contract royalties\n * @remarks Configure royalties for an entire contract or a particular token.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n *   seller_fee_basis_points: 100, // 1% royalty fee\n *   fee_recipient: \"0x...\", // the fee recipient\n * });\n * ```\n * @public\n */\nexport class ContractRoyalty<\n  TContract extends IRoyalty,\n  TSchema extends IGenericSchemaType,\n> implements DetectableFeature\n{\n  featureName = FEATURE_ROYALTY.name;\n  private contractWrapper;\n  private metadata;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    metadata: ContractMetadata<TContract, TSchema>,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of the contract\n   * @returns - The royalty recipient and BPS\n   */\n  public async getDefaultRoyaltyInfo() {\n    const [royaltyRecipient, royaltyBps] =\n      await this.contractWrapper.readContract.getDefaultRoyaltyInfo();\n    // parse it on the way out to make sure we default things if they are not set\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps,\n    });\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of a particular token\n   * @returns - The royalty recipient and BPS\n   */\n  public async getTokenRoyaltyInfo(tokenId: BigNumberish) {\n    const [royaltyRecipient, royaltyBps] =\n      await this.contractWrapper.readContract.getRoyaltyInfoForToken(tokenId);\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps,\n    });\n  }\n\n  /**\n   * Set the royalty recipient and fee for a contract\n   * @param royaltyData - the royalty recipient and fee\n   */\n  public async setDefaultRoyaltyInfo(\n    royaltyData: z.input<typeof CommonRoyaltySchema>,\n  ): Promise<TransactionResult<z.output<typeof CommonRoyaltySchema>>> {\n    // read the metadata from the contract\n    const oldMetadata = await this.metadata.get();\n\n    // update the metadata with the new royalty data\n    // if one of the keys is \"undefined\" it will be ignored (which is the desired behavior)\n    const mergedMetadata = this.metadata.parseInputMetadata({\n      ...oldMetadata,\n      ...royaltyData,\n    });\n\n    // why not use this.metadata.set()? - because that would end up sending it's own separate transaction to `setContractURI`\n    // but we want to send both the `setRoyaltyInfo` and `setContractURI` in one transaction!\n    const contractURI = await this.metadata._parseAndUploadMetadata(\n      mergedMetadata,\n    );\n\n    if (\n      hasFunction<ContractMetadataContract>(\n        \"setContractURI\",\n        this.contractWrapper,\n      )\n    ) {\n      // encode both the functions we want to send\n      const encoded = [\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setDefaultRoyaltyInfo\",\n          [\n            mergedMetadata.fee_recipient,\n            mergedMetadata.seller_fee_basis_points,\n          ],\n        ),\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setContractURI\",\n          [contractURI],\n        ),\n      ];\n      // actually send the transaction and return the receipt + a way to get the new royalty info\n      return {\n        receipt: await this.contractWrapper.multiCall(encoded),\n        data: () => this.getDefaultRoyaltyInfo(),\n      };\n    } else {\n      throw new Error(\n        \"Updating royalties requires implementing ContractMetadata in your contract to support marketplaces like OpenSea.\",\n      );\n    }\n  }\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param tokenId - the token id\n   * @param royaltyData - the royalty recipient and fee\n   */\n  public async setTokenRoyaltyInfo(\n    tokenId: BigNumberish,\n    royaltyData: z.input<typeof CommonRoyaltySchema>,\n  ) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setRoyaltyInfoForToken\",\n        [\n          tokenId,\n          royaltyData.fee_recipient,\n          royaltyData.seller_fee_basis_points,\n        ],\n      ),\n      data: () => this.getDefaultRoyaltyInfo(),\n    };\n  }\n}\n","import { IPrimarySale } from \"contracts\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { TransactionResult } from \"../types\";\nimport { FEATURE_PRIMARY_SALE } from \"../../constants/thirdweb-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.roles.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nexport class ContractPrimarySale<TContract extends IPrimarySale>\n  implements DetectableFeature\n{\n  featureName = FEATURE_PRIMARY_SALE.name;\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient.\n   * @returns the wallet address.\n   */\n  public async getRecipient(): Promise<string> {\n    return await this.contractWrapper.readContract.primarySaleRecipient();\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   */\n  public async setRecipient(recipient: string): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setPrimarySaleRecipient\",\n        [recipient],\n      ),\n    };\n  }\n}\n","import { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { DropERC721, IThirdwebContract, SignatureDrop } from \"contracts\";\nimport {\n  CommonNFTInput,\n  NFTMetadata,\n  NFTMetadataInput,\n} from \"../../schema/tokens/common\";\nimport { IStorage, TransactionResult, TransactionResultWithId } from \"../index\";\nimport { fetchTokenMetadataForContract } from \"../../common/nft\";\nimport { BatchToReveal } from \"../../types/delayed-reveal\";\nimport { TokensLazyMintedEvent } from \"contracts/DropERC721\";\nimport { UploadProgressEvent } from \"../../types/events\";\nimport {\n  BaseDelayedRevealERC1155,\n  BaseDelayedRevealERC721,\n} from \"../../types/eips\";\nimport { hasFunction } from \"../../common\";\nimport DeprecatedAbi from \"../../../abis/IDelayedRevealDeprecated.json\";\nimport { FeatureName } from \"../../constants/contract-features\";\n\n/**\n * Handles delayed reveal logic\n * @public\n */\nexport class DelayedReveal<\n  T extends\n    | DropERC721\n    | BaseDelayedRevealERC721\n    | SignatureDrop\n    | BaseDelayedRevealERC1155,\n> {\n  featureName;\n\n  private contractWrapper: ContractWrapper<T>;\n  private storage: IStorage;\n  private nextTokenIdToMintFn: () => Promise<BigNumber>;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    fetureName: FeatureName,\n    nextTokenIdToMintFn: () => Promise<BigNumber>,\n  ) {\n    this.featureName = fetureName;\n    this.nextTokenIdToMintFn = nextTokenIdToMintFn;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until your reveal them!\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time!\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @public\n   * @param placeholder - the placeholder NFT to show before the reveal\n   * @param metadatas - the final NFTs that will be hidden\n   * @param password - the password that will be used to reveal these NFTs\n   * @param options - additional options like upload progress\n   */\n  public async createDelayedRevealBatch(\n    placeholder: NFTMetadataInput,\n    metadatas: NFTMetadataInput[],\n    password: string,\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<TransactionResultWithId[]> {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n\n    const { baseUri: placeholderUri } = await this.storage.uploadMetadataBatch(\n      [CommonNFTInput.parse(placeholder)],\n      0,\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n\n    const startFileNumber = await this.nextTokenIdToMintFn();\n\n    const batch = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n      options,\n    );\n\n    const baseUri = batch.baseUri.endsWith(\"/\")\n      ? batch.baseUri\n      : `${batch.baseUri}/`;\n    const baseUriId = await this.contractWrapper.readContract.getBaseURICount();\n    const hashedPassword = await this.hashDelayRevealPasword(\n      baseUriId,\n      password,\n    );\n    const encryptedBaseUri =\n      await this.contractWrapper.readContract.encryptDecrypt(\n        ethers.utils.toUtf8Bytes(baseUri),\n        hashedPassword,\n      );\n\n    let data: string;\n    const legacyContract = await this.isLegacyContract();\n    if (legacyContract) {\n      data = encryptedBaseUri;\n    } else {\n      const chainId = await this.contractWrapper.getChainID();\n      const provenanceHash = ethers.utils.solidityKeccak256(\n        [\"bytes\", \"bytes\", \"uint256\"],\n        [ethers.utils.toUtf8Bytes(baseUri), hashedPassword, chainId],\n      );\n      data = ethers.utils.defaultAbiCoder.encode(\n        [\"bytes\", \"bytes32\"],\n        [encryptedBaseUri, provenanceHash],\n      );\n    }\n\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.uris.length,\n      placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`,\n      data,\n    ]);\n\n    const events = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = events[0].args.startTokenId;\n    const endingIndex = events[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Reveal a batch of hidden NFTs\n   * @remarks Reveal the NFTs of a batch using the password.\n   * @example\n   * ```javascript\n   * // the batch to reveal\n   * const batchId = 0;\n   * // reveal the batch\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @public\n   * @param batchId - the id of the batch to reveal\n   * @param password - the password\n   */\n  public async reveal(\n    batchId: BigNumberish,\n    password: string,\n  ): Promise<TransactionResult> {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const key = await this.hashDelayRevealPasword(batchId, password);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper\n        .callStatic()\n        .reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"reveal\", [\n        batchId,\n        key,\n      ]),\n    };\n  }\n\n  /**\n   * Gets the list of unrevealed NFT batches.\n   * @remarks Gets the list of unrevealed NFT batches.\n   * @example\n   * ```javascript\n   * const batches = await contract.revealer.getBatchesToReveal();\n   * ```\n   * @public\n   */\n  public async getBatchesToReveal(): Promise<BatchToReveal[]> {\n    const count = await this.contractWrapper.readContract.getBaseURICount();\n    if (count.isZero()) {\n      return [];\n    }\n\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(\n      countRangeArray.map((i) => {\n        if (\n          hasFunction<BaseDelayedRevealERC721>(\n            \"getBatchIdAtIndex\",\n            this.contractWrapper,\n          )\n        ) {\n          return this.contractWrapper.readContract.getBatchIdAtIndex(i);\n        }\n\n        if (hasFunction<DropERC721>(\"baseURIIndices\", this.contractWrapper)) {\n          return this.contractWrapper.readContract.baseURIIndices(i);\n        }\n\n        throw new Error(\n          \"Contract does not have getBatchIdAtIndex or baseURIIndices.\",\n        );\n      }),\n    );\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenMetadatas = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.getNftMetadata(i.toString()),\n      ),\n    );\n\n    // index is the uri indices, which is end token id. different from uris\n    const legacyContract = await this.isLegacyContract();\n    const encryptedUriData = await Promise.all(\n      Array.from([...uriIndices]).map((i) =>\n        legacyContract\n          ? this.getLegacyEncryptedData(i)\n          : this.contractWrapper.readContract.encryptedData(i),\n      ),\n    );\n    const encryptedBaseUris = encryptedUriData.map((data) => {\n      if (ethers.utils.hexDataLength(data) > 0) {\n        if (legacyContract) {\n          return data;\n        }\n        const result = ethers.utils.defaultAbiCoder.decode(\n          [\"bytes\", \"bytes32\"],\n          data,\n        );\n        return result[0];\n      } else {\n        return data;\n      }\n    });\n\n    return tokenMetadatas\n      .map((meta, index) => ({\n        batchId: BigNumber.from(index),\n        batchUri: meta.uri,\n        placeholderMetadata: meta,\n      }))\n      .filter(\n        (_, index) => ethers.utils.hexDataLength(encryptedBaseUris[index]) > 0,\n      );\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  private async hashDelayRevealPasword(\n    batchTokenIndex: BigNumberish,\n    password: string,\n  ) {\n    const chainId = await this.contractWrapper.getChainID();\n    const contractAddress = this.contractWrapper.readContract.address;\n    return ethers.utils.solidityKeccak256(\n      [\"string\", \"uint256\", \"uint256\", \"address\"],\n      [password, chainId, batchTokenIndex, contractAddress],\n    );\n  }\n\n  private async getNftMetadata(tokenId: BigNumberish): Promise<NFTMetadata> {\n    return fetchTokenMetadataForContract(\n      this.contractWrapper.readContract.address,\n      this.contractWrapper.getProvider(),\n      tokenId,\n      this.storage,\n    );\n  }\n\n  private async isLegacyContract(): Promise<boolean> {\n    if (\n      hasFunction<IThirdwebContract>(\"contractVersion\", this.contractWrapper)\n    ) {\n      try {\n        const version =\n          await this.contractWrapper.readContract.contractVersion();\n        return version <= 2;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  private async getLegacyEncryptedData(index: BigNumber) {\n    const legacy = new ethers.Contract(\n      this.contractWrapper.readContract.address,\n      DeprecatedAbi,\n      this.contractWrapper.getProvider(),\n    );\n    const result = await legacy.functions[\"encryptedBaseURI\"](index);\n    if (result.length > 0) {\n      return result[0];\n    } else {\n      return \"0x\";\n    }\n  }\n}\n","import { BigNumber, BigNumberish, Contract, ethers, providers } from \"ethers\";\nimport {\n  CommonNFTInput,\n  CommonNFTOutput,\n  NFTMetadata,\n  NFTMetadataInput,\n  NFTMetadataOrUri,\n} from \"../schema/tokens/common\";\nimport type { IStorage } from \"../core\";\nimport { IERC1155Metadata, IERC165, IERC721Metadata } from \"contracts\";\nimport { NotFoundError } from \"./error\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../constants/contract\";\nimport ERC721MetadataAbi from \"../../abis/IERC721Metadata.json\";\nimport ERC1155MetadataAbi from \"../../abis/IERC1155Metadata.json\";\nimport ERC165MetadataAbi from \"../../abis/IERC165.json\";\nimport { UploadProgressEvent } from \"../types/index\";\n\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\",\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nexport async function fetchTokenMetadata(\n  tokenId: BigNumberish,\n  tokenUri: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const parsedUri = tokenUri.replace(\n    \"{id}\",\n    ethers.utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2),\n  );\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.get(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\n      \"{id}\",\n      BigNumber.from(tokenId).toString(),\n    );\n    try {\n      jsonMetadata = await storage.get(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(\n        `failed to get token metadata: ${JSON.stringify({\n          tokenId: tokenId.toString(),\n          tokenUri,\n        })} -- falling back to default metadata`,\n      );\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n\n  return CommonNFTOutput.parse({\n    id: BigNumber.from(tokenId),\n    uri: tokenUri,\n    ...jsonMetadata,\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress\n * @param provider\n * @param tokenId\n * @param storage\n */\nexport async function fetchTokenMetadataForContract(\n  contractAddress: string,\n  provider: providers.Provider,\n  tokenId: BigNumberish,\n  storage: IStorage,\n) {\n  let uri: string | undefined;\n  const erc165 = new Contract(\n    contractAddress,\n    ERC165MetadataAbi,\n    provider,\n  ) as IERC165;\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  if (isERC721) {\n    const erc721 = new Contract(\n      contractAddress,\n      ERC721MetadataAbi,\n      provider,\n    ) as IERC721Metadata;\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const erc1155 = new Contract(\n      contractAddress,\n      ERC1155MetadataAbi,\n      provider,\n    ) as IERC1155Metadata;\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata\n * @param storage\n */\nexport async function uploadOrExtractURI(\n  metadata: NFTMetadataOrUri,\n  storage: IStorage,\n): Promise<string> {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.uploadMetadata(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas\n * @param storage\n * @param startNumber\n * @param contractAddress\n * @param signerAddress\n * @param options\n */\nexport async function uploadOrExtractURIs(\n  metadatas: NFTMetadataOrUri[],\n  storage: IStorage,\n  startNumber?: number,\n  contractAddress?: string,\n  signerAddress?: string,\n  options?: {\n    onProgress: (event: UploadProgressEvent) => void;\n  },\n): Promise<string[]> {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const { uris } = await storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startNumber,\n      contractAddress,\n      signerAddress,\n      options,\n    );\n    return uris;\n  } else {\n    throw new Error(\n      \"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\",\n    );\n  }\n}\n\nfunction isUriList(metadatas: NFTMetadataOrUri[]): metadatas is string[] {\n  return metadatas.find((m) => typeof m !== \"string\") === undefined;\n}\n\nfunction isMetadataList(\n  metadatas: NFTMetadataOrUri[],\n): metadatas is NFTMetadataInput[] {\n  return metadatas.find((m) => typeof m !== \"object\") === undefined;\n}\n","import { IStorage } from \"../interfaces/IStorage\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport {\n  ContractMetadata as ContractMetadataContract,\n  DropERC20,\n  DropERC721,\n  DropSinglePhase,\n  IERC20,\n  IERC20Metadata,\n  SignatureDrop,\n} from \"contracts\";\nimport { BigNumber, BigNumberish, constants, ethers, utils } from \"ethers\";\nimport { isNativeToken } from \"../../common/currency\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  Amount,\n  ClaimCondition,\n  ClaimConditionInput,\n  ClaimVerification,\n} from \"../../types\";\nimport { ClaimEligibility } from \"../../enums\";\nimport { TransactionResult } from \"../types\";\nimport {\n  getClaimerProofs,\n  prepareClaim,\n  processClaimConditionInputs,\n  transformResultToClaimCondition,\n  updateExistingClaimConditions,\n} from \"../../common/claim-conditions\";\nimport {\n  detectContractFeature,\n  hasFunction,\n} from \"../../common/feature-detection\";\nimport { PriceSchema } from \"../../schema\";\nimport { includesErrorMessage } from \"../../common\";\nimport ERC20Abi from \"../../../abis/IERC20.json\";\nimport { isNode } from \"../../common/utils\";\nimport deepEqual from \"fast-deep-equal\";\nimport { BaseClaimConditionERC721, BaseDropERC20 } from \"../../types/eips\";\nimport { IDropClaimCondition } from \"contracts/DropERC20\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../constants/index\";\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nexport class DropClaimConditions<\n  TContract extends\n    | DropERC721\n    | DropERC20\n    | BaseClaimConditionERC721\n    | BaseDropERC20\n    | SignatureDrop,\n> {\n  private contractWrapper;\n  private metadata;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    metadata: ContractMetadata<TContract, any>,\n    storage: IStorage,\n  ) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  public async getActive(): Promise<ClaimCondition> {\n    const cc = await this.get();\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(\n      cc,\n      await this.getTokenDecimals(),\n      this.contractWrapper.getProvider(),\n      metadata.merkle || {},\n      this.storage,\n    );\n  }\n\n  private async get(): Promise<IDropClaimCondition.ClaimConditionStructOutput> {\n    if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n      return (await this.contractWrapper.readContract.claimCondition()) as IDropClaimCondition.ClaimConditionStructOutput;\n    } else if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n      const id =\n        await this.contractWrapper.readContract.getActiveClaimConditionId();\n      return await this.contractWrapper.readContract.getClaimConditionById(id);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  public async getAll(): Promise<ClaimCondition[]> {\n    if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n      const claimCondition =\n        (await this.contractWrapper.readContract.claimCondition()) as {\n          currentStartId: BigNumber;\n          count: BigNumber;\n        };\n      const startId = claimCondition.currentStartId.toNumber();\n      const count = claimCondition.count.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(\n          await this.contractWrapper.readContract.getClaimConditionById(i),\n        );\n      }\n      const metadata = await this.metadata.get();\n      const decimals = await this.getTokenDecimals();\n      return Promise.all(\n        conditions.map((c) =>\n          transformResultToClaimCondition(\n            c,\n            decimals,\n            this.contractWrapper.getProvider(),\n            metadata.merkle,\n            this.storage,\n          ),\n        ),\n      );\n    } else {\n      return [await this.getActive()];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    quantity: Amount,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    // TODO switch to use verifyClaim\n    return (\n      (await this.getClaimIneligibilityReasons(quantity, addressToCheck))\n        .length === 0\n    );\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    quantity: Amount,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    const decimals = await this.getTokenDecimals();\n    const quantityWithDecimals = ethers.utils.parseUnits(\n      PriceSchema.parse(quantity),\n      decimals,\n    );\n\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n\n    try {\n      claimCondition = await this.getActive();\n    } catch (err: any) {\n      if (\n        includesErrorMessage(err, \"!CONDITION\") ||\n        includesErrorMessage(err, \"no active mint condition\")\n      ) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      console.log(\"failed to get active claim condition\", err);\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      const supplyWithDecimals = ethers.utils.parseUnits(\n        claimCondition.availableSupply,\n        decimals,\n      );\n\n      if (supplyWithDecimals.lt(quantityWithDecimals)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(\n      claimCondition.merkleRootHash,\n    );\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRootHash.toString();\n      const metadata = await this.metadata.get();\n      const proofs = await getClaimerProofs(\n        addressToCheck,\n        merkleLower,\n        await this.getTokenDecimals(),\n        metadata.merkle,\n        this.storage,\n      );\n\n      try {\n        let validMerkleProof;\n        if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n          activeConditionIndex =\n            await this.contractWrapper.readContract.getActiveClaimConditionId();\n          // legacy verifyClaimerMerkleProofs function\n          [validMerkleProof] =\n            await this.contractWrapper.readContract.verifyClaimMerkleProof(\n              activeConditionIndex,\n              addressToCheck,\n              quantity,\n              proofs.proof,\n              proofs.maxClaimable,\n            );\n        } else if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n          [validMerkleProof] =\n            await this.contractWrapper.readContract.verifyClaimMerkleProof(\n              addressToCheck,\n              quantity,\n              {\n                proof: proofs.proof,\n                maxQuantityInAllowlist: proofs.maxClaimable,\n              },\n            );\n        }\n\n        if (!validMerkleProof) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      } catch (e) {\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n    }\n\n    // check for claim timestamp between claims\n    let [lastClaimedTimestamp, timestampForNextClaim] = [\n      BigNumber.from(0),\n      BigNumber.from(0),\n    ];\n    if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n      activeConditionIndex =\n        await this.contractWrapper.readContract.getActiveClaimConditionId();\n      [lastClaimedTimestamp, timestampForNextClaim] =\n        await this.contractWrapper.readContract.getClaimTimestamp(\n          activeConditionIndex,\n          addressToCheck,\n        );\n    } else if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n      // check for claim timestamp between claims\n      [lastClaimedTimestamp, timestampForNextClaim] =\n        await this.contractWrapper.readContract.getClaimTimestamp(\n          addressToCheck,\n        );\n    }\n\n    const now = BigNumber.from(Date.now()).div(1000);\n\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(BigNumber.from(quantity));\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper<IERC20>(\n          provider,\n          claimCondition.currencyAddress,\n          ERC20Abi,\n          {},\n        );\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions\n   *\n   * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   *\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  public async set(\n    claimConditionInputs: ClaimConditionInput[],\n    resetClaimEligibilityForAll = false,\n  ): Promise<TransactionResult> {\n    let claimConditionsProcessed = claimConditionInputs;\n    if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n      resetClaimEligibilityForAll = true;\n      if (claimConditionInputs.length === 0) {\n        claimConditionsProcessed = [\n          {\n            startTime: new Date(0),\n            currencyAddress: NATIVE_TOKEN_ADDRESS,\n            price: 0,\n            maxQuantity: 0,\n            quantityLimitPerTransaction: 0,\n            waitInSeconds: 0,\n            merkleRootHash: utils.hexZeroPad([0], 32),\n            snapshot: [],\n          },\n        ];\n      } else if (claimConditionInputs.length > 1) {\n        throw new Error(\n          \"Single phase drop contract cannot have multiple claim conditions, only one is allowed\",\n        );\n      }\n    }\n    // process inputs\n    const { snapshotInfos, sortedConditions } =\n      await processClaimConditionInputs(\n        claimConditionsProcessed,\n        await this.getTokenDecimals(),\n        this.contractWrapper.getProvider(),\n        this.storage,\n      );\n\n    const merkleInfo: { [key: string]: string } = {};\n    snapshotInfos.forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!deepEqual(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo,\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(\n        mergedMetadata,\n      );\n\n      if (\n        hasFunction<ContractMetadataContract>(\n          \"setContractURI\",\n          this.contractWrapper,\n        )\n      ) {\n        encoded.push(\n          this.contractWrapper.readContract.interface.encodeFunctionData(\n            \"setContractURI\",\n            [contractURI],\n          ),\n        );\n      } else {\n        throw new Error(\n          \"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\",\n        );\n      }\n    }\n\n    const cw = this.contractWrapper;\n    if (this.isSinglePhaseDropContract(cw)) {\n      encoded.push(\n        cw.readContract.interface.encodeFunctionData(\"setClaimConditions\", [\n          sortedConditions[0],\n          resetClaimEligibilityForAll,\n        ]),\n      );\n    } else if (this.isMultiPhaseDropContract(cw)) {\n      encoded.push(\n        cw.readContract.interface.encodeFunctionData(\"setClaimConditions\", [\n          sortedConditions,\n          resetClaimEligibilityForAll,\n        ]),\n      );\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   *\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  public async update(\n    index: number,\n    claimConditionInput: ClaimConditionInput,\n  ): Promise<TransactionResult> {\n    const existingConditions = await this.getAll();\n    const newConditionInputs = await updateExistingClaimConditions(\n      index,\n      claimConditionInput,\n      existingConditions,\n    );\n    return await this.set(newConditionInputs);\n  }\n\n  /** ***************************************\n   * PRIVATE FUNCTIONS\n   *****************************************/\n\n  private async getTokenDecimals(): Promise<number> {\n    if (detectContractFeature<IERC20Metadata>(this.contractWrapper, \"ERC20\")) {\n      return this.contractWrapper.readContract.decimals();\n    } else {\n      return Promise.resolve(0);\n    }\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   * @internal\n   */\n  public async prepareClaim(\n    quantity: BigNumberish,\n    checkERC20Allowance: boolean,\n    decimals = 0,\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.getActive(),\n      async () => (await this.metadata.get()).merkle,\n      decimals,\n      this.contractWrapper,\n      this.storage,\n      checkERC20Allowance,\n    );\n  }\n\n  private isSinglePhaseDropContract(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<DropSinglePhase> {\n    return !hasFunction<DropSinglePhase>(\n      \"getClaimConditionById\",\n      contractWrapper,\n    );\n  }\n\n  private isMultiPhaseDropContract(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<DropERC721 | DropERC20> {\n    return hasFunction<DropERC721>(\"getClaimConditionById\", contractWrapper);\n  }\n}\n","import { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  BigNumber,\n  BigNumberish,\n  Contract,\n  constants,\n  providers,\n  utils,\n  ethers,\n} from \"ethers\";\nimport {\n  getNativeTokenByChainId,\n  NATIVE_TOKEN_ADDRESS,\n} from \"../constants/currency\";\nimport { Amount, Currency, CurrencyValue, Price } from \"../types/currency\";\nimport { PriceSchema } from \"../schema/shared\";\nimport ERC20Abi from \"../../abis/IERC20.json\";\nimport ERC20MetadataAbi from \"../../abis/IERC20Metadata.json\";\nimport { BaseERC20 } from \"../types/eips\";\nimport { IERC20, IERC20Metadata } from \"contracts\";\n\nexport function isNativeToken(tokenAddress: string): boolean {\n  return (\n    tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS ||\n    tokenAddress.toLowerCase() === constants.AddressZero\n  );\n}\n\nexport async function normalizePriceValue(\n  provider: providers.Provider,\n  inputPrice: Price,\n  currencyAddress: string,\n) {\n  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);\n  return utils.parseUnits(PriceSchema.parse(inputPrice), metadata.decimals);\n}\n\nexport async function fetchCurrencyMetadata(\n  provider: providers.Provider,\n  asset: string,\n): Promise<Currency> {\n  if (isNativeToken(asset)) {\n    const network = await provider.getNetwork();\n    const nativeToken = getNativeTokenByChainId(network.chainId);\n    return {\n      name: nativeToken.name,\n      symbol: nativeToken.symbol,\n      decimals: nativeToken.decimals,\n    };\n  } else {\n    const erc20 = new Contract(\n      asset,\n      ERC20MetadataAbi,\n      provider,\n    ) as IERC20Metadata;\n    const [name, symbol, decimals] = await Promise.all([\n      erc20.name(),\n      erc20.symbol(),\n      erc20.decimals(),\n    ]);\n    return {\n      name,\n      symbol,\n      decimals,\n    };\n  }\n}\n\nexport async function fetchCurrencyValue(\n  providerOrSigner: providers.Provider,\n  asset: string,\n  price: BigNumberish,\n): Promise<CurrencyValue> {\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: BigNumber.from(price),\n    displayValue: utils.formatUnits(price, metadata.decimals),\n  };\n}\n\nexport async function setErc20Allowance(\n  contractToApprove: ContractWrapper<any>,\n  value: BigNumber,\n  currencyAddress: string,\n  overrides: any,\n): Promise<any> {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper<IERC20>(\n      signer || provider,\n      currencyAddress,\n      ERC20Abi,\n      {},\n    );\n\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.readContract.address;\n    const allowance = await erc20.readContract.allowance(owner, spender);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport async function approveErc20Allowance(\n  contractToApprove: ContractWrapper<any>,\n  currencyAddress: string,\n  price: BigNumber,\n  quantity: BigNumberish,\n  tokenDecimals: number,\n) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper<IERC20>(\n    signer || provider,\n    currencyAddress,\n    ERC20Abi,\n    {},\n  );\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.readContract.address;\n  const allowance = await erc20.readContract.allowance(owner, spender);\n  const totalPrice = BigNumber.from(price)\n    .mul(BigNumber.from(quantity))\n    .div(ethers.utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [\n      spender,\n      allowance.add(totalPrice),\n    ]);\n  }\n}\n\nexport async function hasERC20Allowance(\n  contractToApprove: ContractWrapper<any>,\n  currencyAddress: string,\n  value: BigNumber,\n) {\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper<IERC20>(\n    provider,\n    currencyAddress,\n    ERC20Abi,\n    {},\n  );\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.readContract.address;\n  const allowance = await erc20.readContract.allowance(owner, spender);\n  return allowance.gte(value);\n}\n\nexport async function normalizeAmount(\n  contractWrapper: ContractWrapper<BaseERC20>,\n  amount: Amount,\n): Promise<BigNumber> {\n  const decimals = await contractWrapper.readContract.decimals();\n  return utils.parseUnits(PriceSchema.parse(amount), decimals);\n}\n","import {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  Contract,\n  ContractInterface,\n  ContractTransaction,\n  ethers,\n  providers,\n} from \"ethers\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport {\n  ForwardRequestMessage,\n  GaslessTransaction,\n  NetworkOrSignerOrProvider,\n  PermitRequestMessage,\n} from \"../types\";\nimport { EventType } from \"../../constants/events\";\nimport invariant from \"tiny-invariant\";\nimport {\n  BiconomyForwarderAbi,\n  ForwardRequest,\n  getAndIncrementNonce,\n} from \"../../common/forwarder\";\nimport { Forwarder__factory } from \"contracts\";\nimport { getContractAddressByChainId } from \"../../constants/addresses\";\nimport { signEIP2612Permit } from \"../../common/permit\";\nimport { signTypedDataInternal } from \"../../common/sign\";\nimport { getPolygonGasPriorityFee } from \"../../common/gas-price\";\nimport { ChainId } from \"../../constants\";\nimport { convertToTWError } from \"../../common\";\nimport { isBrowser } from \"../../common/utils\";\n\n/**\n * @internal\n */\nexport class ContractWrapper<\n  TContract extends BaseContract,\n> extends RPCConnectionHandler {\n  private isValidContract = false;\n  private customOverrides: () => CallOverrides = () => ({});\n  /**\n   * @internal\n   */\n  public writeContract;\n  public readContract;\n  public abi;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    contractAddress: string,\n    contractAbi: ContractInterface,\n    options: SDKOptions,\n  ) {\n    super(network, options);\n    this.abi = contractAbi;\n    // set up the contract\n    this.writeContract = new Contract(\n      contractAddress,\n      contractAbi,\n      this.getSignerOrProvider(),\n    ) as TContract;\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(\n      this.getProvider(),\n    ) as TContract;\n  }\n\n  public override updateSignerOrProvider(\n    network: NetworkOrSignerOrProvider,\n  ): void {\n    // update the underlying base class\n    super.updateSignerOrProvider(network);\n    // re-connect the contract with the new signer / provider\n    this.writeContract = this.writeContract.connect(\n      this.getSignerOrProvider(),\n    ) as TContract;\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(\n      this.getProvider(),\n    ) as TContract;\n  }\n\n  /**\n   * @internal\n   */\n  public async getChainID(): Promise<number> {\n    const provider = this.getProvider();\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n  /**\n   * @internal\n   */\n  public async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    if (!signer) {\n      throw new Error(\n        \"This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.\",\n      );\n    }\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  public callStatic() {\n    return this.writeContract.callStatic;\n  }\n\n  /**\n   * @internal\n   */\n  public async getCallOverrides(): Promise<CallOverrides> {\n    if (isBrowser()) {\n      // When running in the browser, let the wallet suggest gas estimates\n      // this means that the gas speed preferences set in the SDK options are ignored in a browser context\n      // but it also allows users to select their own gas speed prefs per tx from their wallet directly\n      return {};\n    }\n    const feeData = await this.getProvider().getFeeData();\n    const supports1559 = feeData.maxFeePerGas && feeData.maxPriorityFeePerGas;\n    if (supports1559) {\n      const chainId = await this.getChainID();\n      const block = await this.getProvider().getBlock(\"latest\");\n      const baseBlockFee =\n        block && block.baseFeePerGas\n          ? block.baseFeePerGas\n          : ethers.utils.parseUnits(\"1\", \"gwei\");\n      let defaultPriorityFee: BigNumber;\n      if (chainId === ChainId.Mumbai || chainId === ChainId.Polygon) {\n        // for polygon, get fee data from gas station\n        defaultPriorityFee = await getPolygonGasPriorityFee(chainId);\n      } else {\n        // otherwise get it from ethers\n        defaultPriorityFee = BigNumber.from(feeData.maxPriorityFeePerGas);\n      }\n      // then add additional fee based on user preferences\n      const maxPriorityFeePerGas =\n        this.getPreferredPriorityFee(defaultPriorityFee);\n      // See: https://eips.ethereum.org/EIPS/eip-1559 for formula\n      const baseMaxFeePerGas = baseBlockFee.mul(2);\n      const maxFeePerGas = baseMaxFeePerGas.add(maxPriorityFeePerGas);\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      };\n    } else {\n      return {\n        gasPrice: await this.getPreferredGasPrice(),\n      };\n    }\n  }\n\n  /**\n   * Calculates the priority fee per gas according to user preferences\n   * @param defaultPriorityFeePerGas - the base priority fee\n   */\n  private getPreferredPriorityFee(\n    defaultPriorityFeePerGas: BigNumber,\n  ): BigNumber {\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = BigNumber.from(0); // default is 2.5 gwei for ETH, 31 gwei for polygon\n        break;\n      case \"fast\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(5); // + 5% - 2.625 gwei / 32.5 gwei\n        break;\n      case \"fastest\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(10); // + 10% - 2.75 gwei / 34.1 gwei\n        break;\n    }\n    let txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n    const max = ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\"); // no more than max gas setting\n    const min = ethers.utils.parseUnits(\"2.5\", \"gwei\"); // no less than 2.5 gwei\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    if (txGasPrice.lt(min)) {\n      txGasPrice = min;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * Calculates the gas price for transactions according to user preferences\n   */\n  public async getPreferredGasPrice(): Promise<BigNumber> {\n    const gasPrice = await this.getProvider().getGasPrice();\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let txGasPrice = gasPrice;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = BigNumber.from(1); // min 1 wei\n        break;\n      case \"fast\":\n        extraTip = gasPrice.div(100).mul(5); // + 5%\n        break;\n      case \"fastest\":\n        extraTip = gasPrice.div(100).mul(10); // + 10%\n        break;\n    }\n    txGasPrice = txGasPrice.add(extraTip);\n    const max = ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\");\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * @internal\n   */\n  private emitTransactionEvent(\n    status: \"submitted\" | \"completed\",\n    transactionHash: string,\n  ) {\n    this.emit(EventType.Transaction, {\n      status,\n      transactionHash,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public async multiCall(\n    encoded: string[],\n  ): Promise<providers.TransactionReceipt> {\n    return this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  public async estimateGas(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n  ): Promise<BigNumber> {\n    return this.writeContract.estimateGas[fn as string](...args);\n  }\n\n  /**\n   * @internal\n   */\n  public withTransactionOverride(hook: () => CallOverrides) {\n    this.customOverrides = hook;\n  }\n\n  /**\n   * @internal\n   */\n  public async sendTransaction(\n    fn: keyof TContract[\"functions\"] | (string & {}),\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<providers.TransactionReceipt> {\n    // one time verification that this is a valid contract (to avoid sending funds to wrong addresses)\n    if (!this.isValidContract) {\n      const code = await this.getProvider().getCode(this.readContract.address);\n      this.isValidContract = code !== \"0x\";\n      if (!this.isValidContract) {\n        throw new Error(\n          \"The address you're trying to send a transaction to is not a smart contract. Make sure you are on the correct network and the contract address is correct\",\n        );\n      }\n    }\n\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    // if a custom override is set, merge our override with the custom one\n    callOverrides = {\n      ...callOverrides,\n      ...this.customOverrides(),\n    };\n    // clear up the override (single use)\n    this.customOverrides = () => ({});\n    if (\n      this.options?.gasless &&\n      (\"openzeppelin\" in this.options.gasless ||\n        \"biconomy\" in this.options.gasless)\n    ) {\n      const provider = this.getProvider();\n      const txHash = await this.sendGaslessTransaction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      const tx = await this.sendTransactionByFunction(\n        fn as keyof TContract[\"functions\"],\n        args,\n        callOverrides,\n      );\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n      const receipt = tx.wait();\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public async sendTransactionByFunction(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<ContractTransaction> {\n    const func: ethers.ContractFunction = (this.writeContract.functions as any)[\n      fn\n    ];\n    if (!func) {\n      throw new Error(`invalid function: \"${fn.toString()}\"`);\n    }\n    try {\n      return await func(...args, callOverrides);\n    } catch (e) {\n      const network = await this.getProvider().getNetwork();\n      const signerAddress = await this.getSignerAddress();\n      const contractAddress = await this.readContract.address;\n      throw await convertToTWError(\n        e,\n        network,\n        signerAddress,\n        contractAddress,\n        this.readContract.interface,\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    fn: keyof TContract[\"functions\"],\n    args: any[] = [],\n    callOverrides: CallOverrides,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.writeContract.address;\n    const value = callOverrides?.value || 0;\n\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\n        \"Cannot send native token value with gasless transaction\",\n      );\n    }\n\n    const data = this.writeContract.interface.encodeFunctionData(\n      fn as any,\n      args as any,\n    );\n\n    const gasEstimate = await (this.writeContract.estimateGas as any)[fn](\n      ...args,\n    );\n    let gas = gasEstimate.mul(2);\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // it'd estimate ~21740 on polygon.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gasEstimate.lt(25000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    const tx: GaslessTransaction = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn.toString(),\n      functionArgs: args,\n      callOverrides,\n    };\n\n    return await this.defaultGaslessSendFunction(tx);\n  }\n\n  public async signTypedData(\n    signer: ethers.Signer,\n    domain: {\n      name: string;\n      version: string;\n      chainId: number;\n      verifyingContract: string;\n    },\n    types: any,\n    message: any,\n  ): Promise<BytesLike> {\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n    const { signature: sig } = await signTypedDataInternal(\n      signer,\n      domain,\n      types,\n      message,\n    );\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature: sig,\n    });\n    return sig;\n  }\n\n  public parseLogs<T = any>(eventName: string, logs?: providers.Log[]): T[] {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = this.writeContract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter((x) => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(\n      (l) => this.writeContract.interface.parseLog(l) as unknown as T,\n    );\n  }\n\n  private async defaultGaslessSendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    if (this.options.gasless && \"biconomy\" in this.options.gasless) {\n      return this.biconomySendFunction(transaction);\n    }\n    return this.defenderSendFunction(transaction);\n  }\n\n  private async biconomySendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    invariant(\n      this.options.gasless && \"biconomy\" in this.options.gasless,\n      \"calling biconomySendFunction without biconomy\",\n    );\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer && provider, \"signer and provider must be set\");\n\n    const forwarder = new ethers.Contract(\n      getContractAddressByChainId(\n        transaction.chainId,\n        \"biconomyForwarder\",\n      ) as string,\n      BiconomyForwarderAbi,\n      provider,\n    );\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n      batchId,\n    ]);\n\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: ethers.constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(\n        Date.now() / 1000 +\n          ((this.options?.gasless &&\n            \"biconomy\" in this.options.gasless &&\n            this.options.gasless.biconomy?.deadlineSeconds) ||\n            3600),\n      ),\n      data: transaction.data,\n    };\n\n    const hashToSign = ethers.utils.arrayify(\n      ethers.utils.solidityKeccak256(\n        [\n          \"address\",\n          \"address\",\n          \"address\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"bytes32\",\n        ],\n        [\n          request.from,\n          request.to,\n          request.token,\n          request.txGas,\n          request.tokenGasPrice,\n          request.batchId,\n          request.batchNonce,\n          request.deadline,\n          ethers.utils.keccak256(request.data),\n        ],\n      ),\n    );\n\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\",\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature,\n    });\n    const response = await fetch(\n      \"https://api.biconomy.io/api/v2/meta-tx/native\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          from: transaction.from,\n          apiId: this.options.gasless.biconomy.apiId,\n          params: [request, signature],\n          to: transaction.to,\n          gasLimit: transaction.gasLimit.toHexString(),\n        }),\n        headers: {\n          \"x-api-key\": this.options.gasless.biconomy.apiKey,\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n      },\n    );\n\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(`relay transaction failed: ${resp.log}`);\n      }\n      return resp.txHash;\n    }\n    throw new Error(\n      `relay transaction failed with status: ${response.status} (${response.statusText})`,\n    );\n  }\n\n  private async defenderSendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    invariant(\n      this.options.gasless && \"openzeppelin\" in this.options.gasless,\n      \"calling biconomySendFunction without biconomy\",\n    );\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"provider is not set\");\n    invariant(provider, \"provider is not set\");\n    const forwarderAddress =\n      this.options.gasless.openzeppelin.relayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(forwarderAddress, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n    ]);\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId: transaction.chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    let message: ForwardRequestMessage | PermitRequestMessage = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data,\n    };\n\n    let signature: BytesLike;\n\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (\n      transaction.functionName === \"approve\" &&\n      transaction.functionArgs.length === 2\n    ) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n      // TODO: support DAI permit by signDAIPermit\n      const { message: permit, signature: sig } = await signEIP2612Permit(\n        signer,\n        this.writeContract.address,\n        transaction.from,\n        spender,\n        amount,\n      );\n\n      const { r, s, v } = ethers.utils.splitSignature(sig);\n\n      message = {\n        to: this.readContract.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: BigNumber.from(permit.value).toString(),\n        nonce: BigNumber.from(permit.nonce).toString(),\n        deadline: BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v,\n      };\n      signature = sig;\n    } else {\n      const { signature: sig } = await signTypedDataInternal(\n        signer,\n        domain,\n        types,\n        message,\n      );\n      signature = sig;\n    }\n\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if ((message as PermitRequestMessage)?.owner) {\n      messageType = \"permit\";\n    }\n\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: messageType,\n    });\n\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature,\n    });\n\n    const response = await fetch(this.options.gasless.openzeppelin.relayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.result) {\n        throw new Error(`Relay transaction failed: ${resp.message}`);\n      }\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\n      `relay transaction failed with status: ${response.status} (${response.statusText})`,\n    );\n  }\n}\n","import { BaseContract, BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\n/**\n * @internal\n */\nexport const BiconomyForwarderAbi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"uint256\", name: \"batchId\", type: \"uint256\" },\n    ],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\nconst _noncesSyncTimestamp: Record<string, number> = {};\n\n/**\n * @internal\n */\nexport async function getAndIncrementNonce(\n  forwarder: BaseContract,\n  forwarderFunction: string,\n  forwarderArgs: any[],\n): Promise<BigNumber> {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](\n      ...forwarderArgs,\n    );\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport type { BatchMintMetadata } from \"./BatchMintMetadata\";\nexport type { ContractMetadata } from \"./ContractMetadata\";\nexport type { ContractPublisher } from \"./ContractPublisher\";\nexport type { CurrencyTransferLib } from \"./CurrencyTransferLib\";\nexport type { DelayedReveal } from \"./DelayedReveal\";\nexport type { Drop } from \"./Drop\";\nexport type { DropERC1155 } from \"./DropERC1155\";\nexport type { DropERC20 } from \"./DropERC20\";\nexport type { DropERC721 } from \"./DropERC721\";\nexport type { DropSinglePhase } from \"./DropSinglePhase\";\nexport type { DropSinglePhase1155 } from \"./DropSinglePhase1155\";\nexport type { ERC1155 } from \"./ERC1155\";\nexport type { ERC1155Base } from \"./ERC1155Base\";\nexport type { ERC1155DelayedReveal } from \"./ERC1155DelayedReveal\";\nexport type { ERC1155Drop } from \"./ERC1155Drop\";\nexport type { ERC1155Holder } from \"./ERC1155Holder\";\nexport type { ERC1155LazyMint } from \"./ERC1155LazyMint\";\nexport type { ERC1155PresetUpgradeable } from \"./ERC1155PresetUpgradeable\";\nexport type { ERC1155Receiver } from \"./ERC1155Receiver\";\nexport type { ERC1155SignatureMint } from \"./ERC1155SignatureMint\";\nexport type { ERC165 } from \"./ERC165\";\nexport type { ERC2771Context } from \"./ERC2771Context\";\nexport type { ERC2771ContextUpgradeable } from \"./ERC2771ContextUpgradeable\";\nexport type { ERC721A } from \"./ERC721A\";\nexport type { ERC721Base } from \"./ERC721Base\";\nexport type { ERC721DelayedReveal } from \"./ERC721DelayedReveal\";\nexport type { ERC721Drop } from \"./ERC721Drop\";\nexport type { ERC721Holder } from \"./ERC721Holder\";\nexport type { ERC721LazyMint } from \"./ERC721LazyMint\";\nexport type { ERC721Multiwrap } from \"./ERC721Multiwrap\";\nexport type { ERC721SignatureMint } from \"./ERC721SignatureMint\";\nexport type { Forwarder } from \"./Forwarder\";\nexport type { IBurnableERC1155 } from \"./IBurnableERC1155\";\nexport type { IBurnableERC20 } from \"./IBurnableERC20\";\nexport type { IBurnableERC721 } from \"./IBurnableERC721\";\nexport type { IClaimConditionsSinglePhase } from \"./IClaimConditionsSinglePhase\";\nexport type { IContractDeployer } from \"./IContractDeployer\";\nexport type { IContractMetadata } from \"./IContractMetadata\";\nexport type { IContractMetadataRegistry } from \"./IContractMetadataRegistry\";\nexport type { IContractPublisher } from \"./IContractPublisher\";\nexport type { IDelayedReveal } from \"./IDelayedReveal\";\nexport type { IDelayedRevealDeprecated } from \"./IDelayedRevealDeprecated\";\nexport type { IDrop } from \"./IDrop\";\nexport type { IDropERC1155 } from \"./IDropERC1155\";\nexport type { IDropERC20 } from \"./IDropERC20\";\nexport type { IDropERC721 } from \"./IDropERC721\";\nexport type { IDropSinglePhase } from \"./IDropSinglePhase\";\nexport type { IDropSinglePhase1155 } from \"./IDropSinglePhase1155\";\nexport type { IERC1155 } from \"./IERC1155\";\nexport type { IERC1155Enumerable } from \"./IERC1155Enumerable\";\nexport type { IERC1155Metadata } from \"./IERC1155Metadata\";\nexport type { IERC1155Receiver } from \"./IERC1155Receiver\";\nexport type { IERC1155Supply } from \"./IERC1155Supply\";\nexport type { IERC165 } from \"./IERC165\";\nexport type { IERC20 } from \"./IERC20\";\nexport type { IERC20Metadata } from \"./IERC20Metadata\";\nexport type { IERC2981 } from \"./IERC2981\";\nexport type { IERC721 } from \"./IERC721\";\nexport type { IERC721A } from \"./IERC721A\";\nexport type { IERC721Enumerable } from \"./IERC721Enumerable\";\nexport type { IERC721Metadata } from \"./IERC721Metadata\";\nexport type { IERC721Receiver } from \"./IERC721Receiver\";\nexport type { IERC721Supply } from \"./IERC721Supply\";\nexport type { IFeeTierPlacementExtension } from \"./IFeeTierPlacementExtension\";\nexport type { ILazyMint } from \"./ILazyMint\";\nexport type { IMarketplace } from \"./IMarketplace\";\nexport type { IMintableERC1155 } from \"./IMintableERC1155\";\nexport type { IMintableERC20 } from \"./IMintableERC20\";\nexport type { IMintableERC721 } from \"./IMintableERC721\";\nexport type { IMulticall } from \"./IMulticall\";\nexport type { IMultiwrap } from \"./IMultiwrap\";\nexport type { IOwnable } from \"./IOwnable\";\nexport type { IPack } from \"./IPack\";\nexport type { IPermissions } from \"./IPermissions\";\nexport type { IPermissionsEnumerable } from \"./IPermissionsEnumerable\";\nexport type { IPlatformFee } from \"./IPlatformFee\";\nexport type { IPrimarySale } from \"./IPrimarySale\";\nexport type { IRoyalty } from \"./IRoyalty\";\nexport type { ISignatureMintERC1155 } from \"./ISignatureMintERC1155\";\nexport type { ISignatureMintERC20 } from \"./ISignatureMintERC20\";\nexport type { ISignatureMintERC721 } from \"./ISignatureMintERC721\";\nexport type { ITWFee } from \"./ITWFee\";\nexport type { IThirdwebContract } from \"./IThirdwebContract\";\nexport type { ITokenERC1155 } from \"./ITokenERC1155\";\nexport type { ITokenERC20 } from \"./ITokenERC20\";\nexport type { ITokenERC721 } from \"./ITokenERC721\";\nexport type { IWETH } from \"./IWETH\";\nexport type { LazyMint } from \"./LazyMint\";\nexport type { Marketplace } from \"./Marketplace\";\nexport type { Mock } from \"./Mock\";\nexport type { MockContract } from \"./MockContract\";\nexport type { MockContractPublisher } from \"./MockContractPublisher\";\nexport type { Multicall } from \"./Multicall\";\nexport type { Multiwrap } from \"./Multiwrap\";\nexport type { Ownable } from \"./Ownable\";\nexport type { Pack } from \"./Pack\";\nexport type { PaymentSplitterUpgradeable } from \"./PaymentSplitterUpgradeable\";\nexport type { Permissions } from \"./Permissions\";\nexport type { PermissionsEnumerable } from \"./PermissionsEnumerable\";\nexport type { PlatformFee } from \"./PlatformFee\";\nexport type { PrimarySale } from \"./PrimarySale\";\nexport type { Royalty } from \"./Royalty\";\nexport type { SignatureDrop } from \"./SignatureDrop\";\nexport type { SignatureMintERC1155 } from \"./SignatureMintERC1155\";\nexport type { SignatureMintERC1155Upgradeable } from \"./SignatureMintERC1155Upgradeable\";\nexport type { SignatureMintERC20 } from \"./SignatureMintERC20\";\nexport type { SignatureMintERC20Upgradeable } from \"./SignatureMintERC20Upgradeable\";\nexport type { SignatureMintERC721 } from \"./SignatureMintERC721\";\nexport type { SignatureMintERC721Upgradeable } from \"./SignatureMintERC721Upgradeable\";\nexport type { SoulboundERC721A } from \"./SoulboundERC721A\";\nexport type { Split } from \"./Split\";\nexport type { TWFactory } from \"./TWFactory\";\nexport type { TWFee } from \"./TWFee\";\nexport type { TWProxy } from \"./TWProxy\";\nexport type { TWRegistry } from \"./TWRegistry\";\nexport type { TokenBundle } from \"./TokenBundle\";\nexport type { TokenERC1155 } from \"./TokenERC1155\";\nexport type { TokenERC20 } from \"./TokenERC20\";\nexport type { TokenERC721 } from \"./TokenERC721\";\nexport type { TokenStore } from \"./TokenStore\";\nexport type { VoteERC20 } from \"./VoteERC20\";\nexport * as factories from \"./factories\";\nexport { BatchMintMetadata__factory } from \"./factories/BatchMintMetadata__factory\";\nexport { ContractMetadata__factory } from \"./factories/ContractMetadata__factory\";\nexport { ContractPublisher__factory } from \"./factories/ContractPublisher__factory\";\nexport { CurrencyTransferLib__factory } from \"./factories/CurrencyTransferLib__factory\";\nexport { DelayedReveal__factory } from \"./factories/DelayedReveal__factory\";\nexport { Drop__factory } from \"./factories/Drop__factory\";\nexport { DropERC1155__factory } from \"./factories/DropERC1155__factory\";\nexport { DropERC20__factory } from \"./factories/DropERC20__factory\";\nexport { DropERC721__factory } from \"./factories/DropERC721__factory\";\nexport { DropSinglePhase__factory } from \"./factories/DropSinglePhase__factory\";\nexport { DropSinglePhase1155__factory } from \"./factories/DropSinglePhase1155__factory\";\nexport { ERC1155__factory } from \"./factories/ERC1155__factory\";\nexport { ERC1155Base__factory } from \"./factories/ERC1155Base__factory\";\nexport { ERC1155DelayedReveal__factory } from \"./factories/ERC1155DelayedReveal__factory\";\nexport { ERC1155Drop__factory } from \"./factories/ERC1155Drop__factory\";\nexport { ERC1155Holder__factory } from \"./factories/ERC1155Holder__factory\";\nexport { ERC1155LazyMint__factory } from \"./factories/ERC1155LazyMint__factory\";\nexport { ERC1155PresetUpgradeable__factory } from \"./factories/ERC1155PresetUpgradeable__factory\";\nexport { ERC1155Receiver__factory } from \"./factories/ERC1155Receiver__factory\";\nexport { ERC1155SignatureMint__factory } from \"./factories/ERC1155SignatureMint__factory\";\nexport { ERC165__factory } from \"./factories/ERC165__factory\";\nexport { ERC2771Context__factory } from \"./factories/ERC2771Context__factory\";\nexport { ERC2771ContextUpgradeable__factory } from \"./factories/ERC2771ContextUpgradeable__factory\";\nexport { ERC721A__factory } from \"./factories/ERC721A__factory\";\nexport { ERC721Base__factory } from \"./factories/ERC721Base__factory\";\nexport { ERC721DelayedReveal__factory } from \"./factories/ERC721DelayedReveal__factory\";\nexport { ERC721Drop__factory } from \"./factories/ERC721Drop__factory\";\nexport { ERC721Holder__factory } from \"./factories/ERC721Holder__factory\";\nexport { ERC721LazyMint__factory } from \"./factories/ERC721LazyMint__factory\";\nexport { ERC721Multiwrap__factory } from \"./factories/ERC721Multiwrap__factory\";\nexport { ERC721SignatureMint__factory } from \"./factories/ERC721SignatureMint__factory\";\nexport { Forwarder__factory } from \"./factories/Forwarder__factory\";\nexport { IBurnableERC1155__factory } from \"./factories/IBurnableERC1155__factory\";\nexport { IBurnableERC20__factory } from \"./factories/IBurnableERC20__factory\";\nexport { IBurnableERC721__factory } from \"./factories/IBurnableERC721__factory\";\nexport { IClaimConditionsSinglePhase__factory } from \"./factories/IClaimConditionsSinglePhase__factory\";\nexport { IContractDeployer__factory } from \"./factories/IContractDeployer__factory\";\nexport { IContractMetadata__factory } from \"./factories/IContractMetadata__factory\";\nexport { IContractMetadataRegistry__factory } from \"./factories/IContractMetadataRegistry__factory\";\nexport { IContractPublisher__factory } from \"./factories/IContractPublisher__factory\";\nexport { IDelayedReveal__factory } from \"./factories/IDelayedReveal__factory\";\nexport { IDelayedRevealDeprecated__factory } from \"./factories/IDelayedRevealDeprecated__factory\";\nexport { IDrop__factory } from \"./factories/IDrop__factory\";\nexport { IDropERC1155__factory } from \"./factories/IDropERC1155__factory\";\nexport { IDropERC20__factory } from \"./factories/IDropERC20__factory\";\nexport { IDropERC721__factory } from \"./factories/IDropERC721__factory\";\nexport { IDropSinglePhase__factory } from \"./factories/IDropSinglePhase__factory\";\nexport { IDropSinglePhase1155__factory } from \"./factories/IDropSinglePhase1155__factory\";\nexport { IERC1155__factory } from \"./factories/IERC1155__factory\";\nexport { IERC1155Enumerable__factory } from \"./factories/IERC1155Enumerable__factory\";\nexport { IERC1155Metadata__factory } from \"./factories/IERC1155Metadata__factory\";\nexport { IERC1155Receiver__factory } from \"./factories/IERC1155Receiver__factory\";\nexport { IERC1155Supply__factory } from \"./factories/IERC1155Supply__factory\";\nexport { IERC165__factory } from \"./factories/IERC165__factory\";\nexport { IERC20__factory } from \"./factories/IERC20__factory\";\nexport { IERC20Metadata__factory } from \"./factories/IERC20Metadata__factory\";\nexport { IERC2981__factory } from \"./factories/IERC2981__factory\";\nexport { IERC721__factory } from \"./factories/IERC721__factory\";\nexport { IERC721A__factory } from \"./factories/IERC721A__factory\";\nexport { IERC721Enumerable__factory } from \"./factories/IERC721Enumerable__factory\";\nexport { IERC721Metadata__factory } from \"./factories/IERC721Metadata__factory\";\nexport { IERC721Receiver__factory } from \"./factories/IERC721Receiver__factory\";\nexport { IERC721Supply__factory } from \"./factories/IERC721Supply__factory\";\nexport { IFeeTierPlacementExtension__factory } from \"./factories/IFeeTierPlacementExtension__factory\";\nexport { ILazyMint__factory } from \"./factories/ILazyMint__factory\";\nexport { IMarketplace__factory } from \"./factories/IMarketplace__factory\";\nexport { IMintableERC1155__factory } from \"./factories/IMintableERC1155__factory\";\nexport { IMintableERC20__factory } from \"./factories/IMintableERC20__factory\";\nexport { IMintableERC721__factory } from \"./factories/IMintableERC721__factory\";\nexport { IMulticall__factory } from \"./factories/IMulticall__factory\";\nexport { IMultiwrap__factory } from \"./factories/IMultiwrap__factory\";\nexport { IOwnable__factory } from \"./factories/IOwnable__factory\";\nexport { IPack__factory } from \"./factories/IPack__factory\";\nexport { IPermissions__factory } from \"./factories/IPermissions__factory\";\nexport { IPermissionsEnumerable__factory } from \"./factories/IPermissionsEnumerable__factory\";\nexport { IPlatformFee__factory } from \"./factories/IPlatformFee__factory\";\nexport { IPrimarySale__factory } from \"./factories/IPrimarySale__factory\";\nexport { IRoyalty__factory } from \"./factories/IRoyalty__factory\";\nexport { ISignatureMintERC1155__factory } from \"./factories/ISignatureMintERC1155__factory\";\nexport { ISignatureMintERC20__factory } from \"./factories/ISignatureMintERC20__factory\";\nexport { ISignatureMintERC721__factory } from \"./factories/ISignatureMintERC721__factory\";\nexport { IThirdwebContract__factory } from \"./factories/IThirdwebContract__factory\";\nexport { ITokenERC1155__factory } from \"./factories/ITokenERC1155__factory\";\nexport { ITokenERC20__factory } from \"./factories/ITokenERC20__factory\";\nexport { ITokenERC721__factory } from \"./factories/ITokenERC721__factory\";\nexport { ITWFee__factory } from \"./factories/ITWFee__factory\";\nexport { IWETH__factory } from \"./factories/IWETH__factory\";\nexport { LazyMint__factory } from \"./factories/LazyMint__factory\";\nexport { Marketplace__factory } from \"./factories/Marketplace__factory\";\nexport { Mock__factory } from \"./factories/Mock__factory\";\nexport { MockContract__factory } from \"./factories/MockContract__factory\";\nexport { MockContractPublisher__factory } from \"./factories/MockContractPublisher__factory\";\nexport { Multicall__factory } from \"./factories/Multicall__factory\";\nexport { Multiwrap__factory } from \"./factories/Multiwrap__factory\";\nexport { Ownable__factory } from \"./factories/Ownable__factory\";\nexport { Pack__factory } from \"./factories/Pack__factory\";\nexport { PaymentSplitterUpgradeable__factory } from \"./factories/PaymentSplitterUpgradeable__factory\";\nexport { Permissions__factory } from \"./factories/Permissions__factory\";\nexport { PermissionsEnumerable__factory } from \"./factories/PermissionsEnumerable__factory\";\nexport { PlatformFee__factory } from \"./factories/PlatformFee__factory\";\nexport { PrimarySale__factory } from \"./factories/PrimarySale__factory\";\nexport { Royalty__factory } from \"./factories/Royalty__factory\";\nexport { SignatureDrop__factory } from \"./factories/SignatureDrop__factory\";\nexport { SignatureMintERC1155__factory } from \"./factories/SignatureMintERC1155__factory\";\nexport { SignatureMintERC1155Upgradeable__factory } from \"./factories/SignatureMintERC1155Upgradeable__factory\";\nexport { SignatureMintERC20__factory } from \"./factories/SignatureMintERC20__factory\";\nexport { SignatureMintERC20Upgradeable__factory } from \"./factories/SignatureMintERC20Upgradeable__factory\";\nexport { SignatureMintERC721__factory } from \"./factories/SignatureMintERC721__factory\";\nexport { SignatureMintERC721Upgradeable__factory } from \"./factories/SignatureMintERC721Upgradeable__factory\";\nexport { SoulboundERC721A__factory } from \"./factories/SoulboundERC721A__factory\";\nexport { Split__factory } from \"./factories/Split__factory\";\nexport { TokenBundle__factory } from \"./factories/TokenBundle__factory\";\nexport { TokenERC1155__factory } from \"./factories/TokenERC1155__factory\";\nexport { TokenERC20__factory } from \"./factories/TokenERC20__factory\";\nexport { TokenERC721__factory } from \"./factories/TokenERC721__factory\";\nexport { TokenStore__factory } from \"./factories/TokenStore__factory\";\nexport { TWFactory__factory } from \"./factories/TWFactory__factory\";\nexport { TWFee__factory } from \"./factories/TWFee__factory\";\nexport { TWProxy__factory } from \"./factories/TWProxy__factory\";\nexport { TWRegistry__factory } from \"./factories/TWRegistry__factory\";\nexport { VoteERC20__factory } from \"./factories/VoteERC20__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { Forwarder, ForwarderInterface } from \"../Forwarder\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gas\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct MinimalForwarder.ForwardRequest\",\n        name: \"req\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gas\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct MinimalForwarder.ForwardRequest\",\n        name: \"req\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"verify\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x61014060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100fb8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061011092505050565b60805160a05160c05160e0516101005161012051610b6961015f60003960006104f701526000610546015260006105210152600061047a015260006104a4015260006104ce0152610b696000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f610054366004610901565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b610095610090366004610931565b6100d3565b604051610079929190610a00565b3480156100af57600080fd5b506100c36100be366004610931565b610277565b6040519015158152602001610079565b600060606100e2858585610277565b6101595760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f657360448201527f206e6f74206d617463682072657175657374000000000000000000000000000060648201526084015b60405180910390fd5b61016860808601356001610a3c565b6000806101786020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101b29190610901565b6001600160a01b0316606088013560408901356101d260a08b018b610a62565b6101df60208d018d610901565b6040516020016101f193929190610aa9565b60408051601f198184030181529082905261020b91610acf565b600060405180830381858888f193505050503d8060008114610249576040519150601f19603f3d011682016040523d82523d6000602084013e61024e565b606091505b509092509050610263603f6060890135610aeb565b5a1161026b57fe5b90969095509350505050565b60008061038a84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038492507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e7905060208a018a610901565b6102f760408b0160208c01610901565b60408b013560608c013560808d013561031360a08f018f610a62565b604051610321929190610b0d565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f5565b90610449565b905060808501356000806103a16020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103ec57506103d76020860186610901565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061044361040261046d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006104588585610594565b9150915061046581610604565b509392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156104c657507f000000000000000000000000000000000000000000000000000000000000000046145b156104f057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156105cb5760208301516040840151606085015160001a6105bf878285856107c2565b945094505050506105fd565b8251604014156105f557602083015160408401516105ea8683836108af565b9350935050506105fd565b506000905060025b9250929050565b600081600481111561061857610618610b1d565b14156106215750565b600181600481111561063557610635610b1d565b14156106835760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610150565b600281600481111561069757610697610b1d565b14156106e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610150565b60038160048111156106f9576106f9610b1d565b14156107525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610150565b600481600481111561076657610766610b1d565b14156107bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610150565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107f957506000905060036108a6565b8460ff16601b1415801561081157508460ff16601c14155b1561082257506000905060046108a6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610876573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661089f576000600192509250506108a6565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816108e560ff86901c601b610a3c565b90506108f3878288856107c2565b935093505050935093915050565b60006020828403121561091357600080fd5b81356001600160a01b038116811461092a57600080fd5b9392505050565b60008060006040848603121561094657600080fd5b833567ffffffffffffffff8082111561095e57600080fd5b9085019060c0828803121561097257600080fd5b9093506020850135908082111561098857600080fd5b818601915086601f83011261099c57600080fd5b8135818111156109ab57600080fd5b8760208285010111156109bd57600080fd5b6020830194508093505050509250925092565b60005b838110156109eb5781810151838201526020016109d3565b838111156109fa576000848401525b50505050565b82151581526040602082015260008251806040840152610a278160608501602087016109d0565b601f01601f1916919091016060019392505050565b60008219821115610a5d57634e487b7160e01b600052601160045260246000fd5b500190565b6000808335601e19843603018112610a7957600080fd5b83018035915067ffffffffffffffff821115610a9457600080fd5b6020019150368190038213156105fd57600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610ae18184602087016109d0565b9190910192915050565b600082610b0857634e487b7160e01b600052601260045260246000fd5b500490565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212209306207ce9577feaceff6e4eb11f4c5a7b15ecf2c97100d032e05b97bfab1bf864736f6c634300080c0033\";\n\ntype ForwarderConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: ForwarderConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Forwarder__factory extends ContractFactory {\n  constructor(...args: ForwarderConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Forwarder> {\n    return super.deploy(overrides || {}) as Promise<Forwarder>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): Forwarder {\n    return super.attach(address) as Forwarder;\n  }\n  override connect(signer: Signer): Forwarder__factory {\n    return super.connect(signer) as Forwarder__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): ForwarderInterface {\n    return new utils.Interface(_abi) as ForwarderInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Forwarder {\n    return new Contract(address, _abi, signerOrProvider) as Forwarder;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { IERC20, IERC20Interface } from \"../IERC20\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"who\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class IERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): IERC20Interface {\n    return new utils.Interface(_abi) as IERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): IERC20 {\n    return new Contract(address, _abi, signerOrProvider) as IERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type {\n  IThirdwebContract,\n  IThirdwebContractInterface,\n} from \"../IThirdwebContract\";\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"contractType\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"contractURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"contractVersion\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"_uri\",\n        type: \"string\",\n      },\n    ],\n    name: \"setContractURI\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class IThirdwebContract__factory {\n  static readonly abi = _abi;\n  static createInterface(): IThirdwebContractInterface {\n    return new utils.Interface(_abi) as IThirdwebContractInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IThirdwebContract {\n    return new Contract(address, _abi, signerOrProvider) as IThirdwebContract;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { TWFactory, TWFactoryInterface } from \"../TWFactory\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_registry\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"contractType\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"version\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ImplementationAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"isApproved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ImplementationApproved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"proxy\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployer\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProxyDeployed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"FACTORY_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"addImplementation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"approval\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_implementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_toApprove\",\n        type: \"bool\",\n      },\n    ],\n    name: \"approveImplementation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"currentVersion\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"deployProxy\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_implementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"deployProxyByImplementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"deployedProxy\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_salt\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"deployProxyDeterministic\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"deployer\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_version\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getImplementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_type\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getLatestImplementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"implementation\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"registry\",\n    outputs: [\n      {\n        internalType: \"contract TWRegistry\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60c06040523480156200001157600080fd5b5060405162001f6238038062001f62833981016040819052620000349162000276565b6001600160a01b0382166080526200005760006200005162000099565b620000b5565b620000867fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee276200005162000099565b6001600160a01b031660a05250620002ae565b6000620000b0620000c560201b62000d211760201c565b905090565b620000c18282620000fe565b5050565b6080516000906001600160a01b0316331415620000e9575060131936013560601c90565b620000b06200014160201b62000d6b1760201c565b6200011582826200014560201b62000d6f1760201c565b60008281526001602090815260409091206200013c91839062000e0e620001e7821b17901c565b505050565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001a362000099565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001fe836001600160a01b03841662000207565b90505b92915050565b6000818152600183016020526040812054620002505750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000201565b50600062000201565b80516001600160a01b03811681146200027157600080fd5b919050565b600080604083850312156200028a57600080fd5b620002958362000259565b9150620002a56020840162000259565b90509250929050565b60805160a051611c79620002e960003960008181610336015281816106510152610c6f0152600081816103010152610d250152611c796000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80639010d07c116100e3578063c6e2a4001161008c578063dd47595a11610066578063dd47595a1461044f578063e92016a414610483578063ec54d72f146104b757600080fd5b8063c6e2a40014610416578063ca15c87314610429578063d547741f1461043c57600080fd5b8063a217fddf116100bd578063a217fddf146103c5578063ac9650d8146103cd578063b9caf9d9146103ed57600080fd5b80639010d07c1461035857806391d148541461036b5780639430b496146103a257600080fd5b806336568abe1161014557806356fb09581161011f57806356fb0958146102de578063572b6c05146102f15780637b1039991461033157600080fd5b806336568abe146102705780633b426d3f1461028357806344ab6680146102a357600080fd5b80631e5e1e99116101765780631e5e1e9914610225578063248a9ca3146102385780632f2ff15d1461025b57600080fd5b806301ffc9a71461019d57806304a0fb17146101c557806311b804ab146101fa575b600080fd5b6101b06101ab366004611675565b6104ca565b60405190151581526020015b60405180910390f35b6101ec7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee2781565b6040519081526020016101bc565b61020d61020836600461175e565b6104f5565b6040516001600160a01b0390911681526020016101bc565b61020d6102333660046117b5565b610705565b6101ec6102463660046117e8565b60009081526020819052604090206001015490565b61026e610269366004611801565b610745565b005b61026e61027e366004611801565b610777565b6101ec6102913660046117e8565b60036020526000908152604090205481565b61020d6102b13660046117e8565b6000908152600460209081526040808320600383528184205484529091529020546001600160a01b031690565b61026e6102ec36600461182d565b610813565b6101b06102ff366004611869565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b61020d610366366004611884565b6108db565b6101b0610379366004611801565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101b06103b0366004611869565b60026020526000908152604090205460ff1681565b6101ec600081565b6103e06103db3660046118a6565b6108f3565b6040516101bc9190611977565b61020d6103fb366004611869565b6005602052600090815260409020546001600160a01b031681565b61026e610424366004611869565b6109e8565b6101ec6104373660046117e8565b610c2b565b61026e61044a366004611801565b610c42565b61020d61045d366004611884565b60009182526004602090815260408084209284529190529020546001600160a01b031690565b61020d610491366004611884565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61020d6104c53660046119d9565b610c6a565b60006001600160e01b03198216635a05180f60e01b14806104ef57506104ef82610e23565b92915050565b6001600160a01b03831660009081526002602052604081205460ff166105625760405162461bcd60e51b815260206004820152601b60248201527f696d706c656d656e746174696f6e206e6f7420617070726f766564000000000060448201526064015b60405180910390fd5b600061056c610e58565b8360405160200161059b92919060609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6040516020818303038152906040528051906020012090506105bd8582610e62565b91506105c7610e58565b6001600160a01b038381166000908152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff19169290911691909117905561060b610e58565b6040516001600160a01b038481168252918216918716907f9e0862c4ebff2150fbbfd3f8547483f55bdec0c34fd977d3fccaa55d6c4ce7849060200160405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352c28fab610686610e58565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529085166024820152604401600060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050506000845111156106fd576106fb8285610f19565b505b509392505050565b6000838152600460209081526040808320600383528184205484529091528120546001600160a01b031661073a8185856104f5565b9150505b9392505050565b60008281526020819052604090206001015461076881610763610e58565b610f5b565b6107728383610fd9565b505050565b61077f610e58565b6001600160a01b0316816001600160a01b0316146108055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610559565b61080f8282610ffb565b5050565b61083f7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27610379610e58565b6108785760405162461bcd60e51b815260206004820152600a6024820152693737ba1030b236b4b71760b11b6044820152606401610559565b6001600160a01b038216600081815260026020908152604091829020805460ff19168515159081179091558251938452908301527f46c2f0868ef35772e9324a42eb6fa484490cca8494538a909cf05c897d7d4108910160405180910390a15050565b600082815260016020526040812061073e908361101d565b60608167ffffffffffffffff81111561090e5761090e6116bb565b60405190808252806020026020018201604052801561094157816020015b606081526020019060019003908161092c5790505b50905060005b828110156109e1576109b13085858481811061096557610965611a20565b90506020028101906109779190611a36565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102992505050565b8282815181106109c3576109c3611a20565b602002602001018190525080806109d990611a9a565b915050610947565b5092915050565b610a147fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27610379610e58565b610a4d5760405162461bcd60e51b815260206004820152600a6024820152693737ba1030b236b4b71760b11b6044820152606401610559565b60008190506000816001600160a01b031663cb2ef6f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190611ab5565b90506000826001600160a01b031663a0a8e4606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190611ace565b60008381526003602052604090205490915060ff8082169083161015610b845760405162461bcd60e51b815260206004820152601460248201527f77726f6e67206d6f64756c652076657273696f6e0000000000000000000000006044820152606401610559565b600083815260036020908152604080832060ff861690819055600483528184208185528352818420805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b169081179091558085526002845293829020805460ff1916600117905581519384529183019190915284917fc39db2d47bafbb20367a9c840abffa57a2bc243c1f1e67c939ea0e89e59ed01a910160405180910390a25050505050565b60008181526001602052604081206104ef9061104e565b600082815260208190526040902060010154610c6081610763610e58565b6107728383610ffb565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305d85eda610ca4610e58565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c9190611ab5565b9050610d19848483610705565b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415610d61575060131936013560601c90565b503390565b905090565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610dca610e58565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061073e836001600160a01b038416611058565b60006001600160e01b03198216637965db0b60e01b14806104ef57506301ffc9a760e01b6001600160e01b03198316146104ef565b6000610d66610d21565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166104ef5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610559565b606061073e83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506110a7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f57610f97816001600160a01b031660146110b6565b610fa28360206110b6565b604051602001610fb3929190611af1565b60408051601f198184030181529082905262461bcd60e51b825261055991600401611b72565b610fe38282610d6f565b60008281526001602052604090206107729082610e0e565b611005828261125f565b600082815260016020526040902061077290826112fc565b600061073e8383611311565b606061073e8383604051806060016040528060278152602001611c1d6027913961133b565b60006104ef825490565b600081815260018301602052604081205461109f575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ef565b5060006104ef565b6060610d198484600085611418565b606060006110c5836002611b85565b6110d0906002611ba4565b67ffffffffffffffff8111156110e8576110e86116bb565b6040519080825280601f01601f191660200182016040528015611112576020820181803683370190505b509050600360fc1b8160008151811061112d5761112d611a20565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061115c5761115c611a20565b60200101906001600160f81b031916908160001a9053506000611180846002611b85565b61118b906001611ba4565b90505b6001811115611210577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106111cc576111cc611a20565b1a60f81b8282815181106111e2576111e2611a20565b60200101906001600160f81b031916908160001a90535060049490941c9361120981611bbc565b905061118e565b50831561073e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610559565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561080f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556112b8610e58565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061073e836001600160a01b038416611549565b600082600001828154811061132857611328611a20565b9060005260206000200154905092915050565b60606001600160a01b0384163b6113a35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610559565b600080856001600160a01b0316856040516113be9190611bd3565b600060405180830381855af49150503d80600081146113f9576040519150601f19603f3d011682016040523d82523d6000602084013e6113fe565b606091505b509150915061140e82828661163c565b9695505050505050565b6060824710156114795760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610559565b6001600160a01b0385163b6114d05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610559565b600080866001600160a01b031685876040516114ec9190611bd3565b60006040518083038185875af1925050503d8060008114611529576040519150601f19603f3d011682016040523d82523d6000602084013e61152e565b606091505b509150915061153e82828661163c565b979650505050505050565b6000818152600183016020526040812054801561163257600061156d600183611bef565b855490915060009061158190600190611bef565b90508181146115e65760008660000182815481106115a1576115a1611a20565b90600052602060002001549050808760000184815481106115c4576115c4611a20565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806115f7576115f7611c06565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104ef565b60009150506104ef565b6060831561164b57508161073e565b82511561165b5782518084602001fd5b8160405162461bcd60e51b81526004016105599190611b72565b60006020828403121561168757600080fd5b81356001600160e01b03198116811461073e57600080fd5b80356001600160a01b03811681146116b657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126116e257600080fd5b813567ffffffffffffffff808211156116fd576116fd6116bb565b604051601f8301601f19908116603f01168101908282118183101715611725576117256116bb565b8160405283815286602085880101111561173e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561177357600080fd5b61177c8461169f565b9250602084013567ffffffffffffffff81111561179857600080fd5b6117a4868287016116d1565b925050604084013590509250925092565b6000806000606084860312156117ca57600080fd5b83359250602084013567ffffffffffffffff81111561179857600080fd5b6000602082840312156117fa57600080fd5b5035919050565b6000806040838503121561181457600080fd5b823591506118246020840161169f565b90509250929050565b6000806040838503121561184057600080fd5b6118498361169f565b91506020830135801515811461185e57600080fd5b809150509250929050565b60006020828403121561187b57600080fd5b61073e8261169f565b6000806040838503121561189757600080fd5b50508035926020909101359150565b600080602083850312156118b957600080fd5b823567ffffffffffffffff808211156118d157600080fd5b818501915085601f8301126118e557600080fd5b8135818111156118f457600080fd5b8660208260051b850101111561190957600080fd5b60209290920196919550909350505050565b60005b8381101561193657818101518382015260200161191e565b83811115611945576000848401525b50505050565b6000815180845261196381602086016020860161191b565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156119cc57603f198886030184526119ba85835161194b565b9450928501929085019060010161199e565b5092979650505050505050565b600080604083850312156119ec57600080fd5b82359150602083013567ffffffffffffffff811115611a0a57600080fd5b611a16858286016116d1565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611a4d57600080fd5b83018035915067ffffffffffffffff821115611a6857600080fd5b602001915036819003821315611a7d57600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611aae57611aae611a84565b5060010190565b600060208284031215611ac757600080fd5b5051919050565b600060208284031215611ae057600080fd5b815160ff8116811461073e57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611b2981601785016020880161191b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611b6681602884016020880161191b565b01602801949350505050565b60208152600061073e602083018461194b565b6000816000190483118215151615611b9f57611b9f611a84565b500290565b60008219821115611bb757611bb7611a84565b500190565b600081611bcb57611bcb611a84565b506000190190565b60008251611be581846020870161191b565b9190910192915050565b600082821015611c0157611c01611a84565b500390565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a715dc4629baeee69aad7fcca92ef128d615383104dac998cd5fabf7d89917fb64736f6c634300080c0033\";\n\ntype TWFactoryConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TWFactoryConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class TWFactory__factory extends ContractFactory {\n  constructor(...args: TWFactoryConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    _trustedForwarder: string,\n    _registry: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<TWFactory> {\n    return super.deploy(\n      _trustedForwarder,\n      _registry,\n      overrides || {}\n    ) as Promise<TWFactory>;\n  }\n  override getDeployTransaction(\n    _trustedForwarder: string,\n    _registry: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(\n      _trustedForwarder,\n      _registry,\n      overrides || {}\n    );\n  }\n  override attach(address: string): TWFactory {\n    return super.attach(address) as TWFactory;\n  }\n  override connect(signer: Signer): TWFactory__factory {\n    return super.connect(signer) as TWFactory__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TWFactoryInterface {\n    return new utils.Interface(_abi) as TWFactoryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): TWFactory {\n    return new Contract(address, _abi, signerOrProvider) as TWFactory;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { TWRegistry, TWRegistryInterface } from \"../TWRegistry\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployer\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"Added\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployer\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"Deleted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"OPERATOR_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"add\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n    ],\n    name: \"count\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n    ],\n    name: \"getAll\",\n    outputs: [\n      {\n        internalType: \"address[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"data\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"multicall\",\n    outputs: [\n      {\n        internalType: \"bytes[]\",\n        name: \"results\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_deployer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_deployment\",\n        type: \"address\",\n      },\n    ],\n    name: \"remove\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60a06040523480156200001157600080fd5b50604051620016c6380380620016c683398101604081905262000034916200021e565b6001600160a01b038116608052620000576000620000516200005e565b6200007a565b5062000250565b6000620000756200008a60201b6200082e1760201c565b905090565b620000868282620000c3565b5050565b6080516000906001600160a01b0316331415620000ae575060131936013560601c90565b620000756200010660201b620008781760201c565b620000da82826200010a60201b6200087c1760201c565b6000828152600160209081526040909120620001019183906200091b620001ac821b17901c565b505050565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000086576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001686200005e565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001c3836001600160a01b038416620001cc565b90505b92915050565b60008181526001830160205260408120546200021557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001c6565b506000620001c6565b6000602082840312156200023157600080fd5b81516001600160a01b03811681146200024957600080fd5b9392505050565b60805161145362000273600039600081816101bc015261083201526114536000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639010d07c11610097578063ca15c87311610066578063ca15c87314610289578063d547741f1461029c578063eb077342146102af578063f5b541a6146102cf57600080fd5b80639010d07c146101ff57806391d148541461022a578063a217fddf14610261578063ac9650d81461026957600080fd5b806336568abe116100d357806336568abe1461018657806352c28fab14610199578063572b6c05146101ac5780637f7c1491146101ec57600080fd5b806301ffc9a71461010557806305d85eda1461012d578063248a9ca31461014e5780632f2ff15d14610171575b600080fd5b610118610113366004610fae565b6102f6565b60405190151581526020015b60405180910390f35b61014061013b366004610ff4565b610321565b604051908152602001610124565b61014061015c36600461100f565b60009081526020819052604090206001015490565b61018461017f366004611028565b610342565b005b610184610194366004611028565b610374565b6101846101a7366004611054565b610415565b6101186101ba366004610ff4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6101846101fa366004611054565b610566565b61021261020d36600461107e565b6106b7565b6040516001600160a01b039091168152602001610124565b610118610238366004611028565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610140600081565b61027c6102773660046110a0565b6106d6565b6040516101249190611171565b61014061029736600461100f565b6107cb565b6101846102aa366004611028565b6107e2565b6102c26102bd366004610ff4565b61080a565b60405161012491906111d3565b6101407f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b60006001600160e01b03198216635a05180f60e01b148061031b575061031b82610930565b92915050565b6001600160a01b038116600090815260026020526040812061031b90610965565b6000828152602081905260409020600101546103658161036061096f565b610979565b61036f83836109f7565b505050565b61037c61096f565b6001600160a01b0316816001600160a01b0316146104075760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104118282610a19565b5050565b6104417f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92961023861096f565b80610464575061044f61096f565b6001600160a01b0316826001600160a01b0316145b6104b05760405162461bcd60e51b815260206004820152601960248201527f6e6f74206f70657261746f72206f72206465706c6f7965722e0000000000000060448201526064016103fe565b6001600160a01b03821660009081526002602052604081206104d2908361091b565b9050806105215760405162461bcd60e51b815260206004820152600d60248201527f6661696c656420746f206164640000000000000000000000000000000000000060448201526064016103fe565b816001600160a01b0316836001600160a01b03167f938c63ac3d228b23f6bee7618fefc6790522e338ac202c958a2ea9eb9706c5d160405160405180910390a3505050565b6105927f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92961023861096f565b806105b557506105a061096f565b6001600160a01b0316826001600160a01b0316145b6106015760405162461bcd60e51b815260206004820152601960248201527f6e6f74206f70657261746f72206f72206465706c6f7965722e0000000000000060448201526064016103fe565b6001600160a01b03821660009081526002602052604081206106239083610a37565b9050806106725760405162461bcd60e51b815260206004820152601060248201527f6661696c656420746f2072656d6f76650000000000000000000000000000000060448201526064016103fe565b816001600160a01b0316836001600160a01b03167ffc5ffe2160301e6b21a86f66febb30fe4e9e6932ac1afc0348fb2fd5daa18b1360405160405180910390a3505050565b60008281526001602052604081206106cf9083610a4c565b9392505050565b60608167ffffffffffffffff8111156106f1576106f1611220565b60405190808252806020026020018201604052801561072457816020015b606081526020019060019003908161070f5790505b50905060005b828110156107c4576107943085858481811061074857610748611236565b905060200281019061075a919061124c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a5892505050565b8282815181106107a6576107a6611236565b602002602001018190525080806107bc906112b0565b91505061072a565b5092915050565b600081815260016020526040812061031b90610965565b6000828152602081905260409020600101546108008161036061096f565b61036f8383610a19565b6001600160a01b038116600090815260026020526040902060609061031b90610a7d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561086e575060131936013560601c90565b503390565b905090565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610411576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556108d761096f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106cf836001600160a01b038416610a8a565b60006001600160e01b03198216637965db0b60e01b148061031b57506301ffc9a760e01b6001600160e01b031983161461031b565b600061031b825490565b600061087361082e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610411576109b5816001600160a01b03166014610ad9565b6109c0836020610ad9565b6040516020016109d19291906112cb565b60408051601f198184030181529082905262461bcd60e51b82526103fe9160040161134c565b610a01828261087c565b600082815260016020526040902061036f908261091b565b610a238282610c82565b600082815260016020526040902061036f90825b60006106cf836001600160a01b038416610d1f565b60006106cf8383610e12565b60606106cf83836040518060600160405280602781526020016113f760279139610e3c565b606060006106cf83610f19565b6000818152600183016020526040812054610ad15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561031b565b50600061031b565b60606000610ae883600261135f565b610af390600261137e565b67ffffffffffffffff811115610b0b57610b0b611220565b6040519080825280601f01601f191660200182016040528015610b35576020820181803683370190505b509050600360fc1b81600081518110610b5057610b50611236565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b7f57610b7f611236565b60200101906001600160f81b031916908160001a9053506000610ba384600261135f565b610bae90600161137e565b90505b6001811115610c33577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610bef57610bef611236565b1a60f81b828281518110610c0557610c05611236565b60200101906001600160f81b031916908160001a90535060049490941c93610c2c81611396565b9050610bb1565b5083156106cf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103fe565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610411576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610cdb61096f565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008181526001830160205260408120548015610e08576000610d436001836113ad565b8554909150600090610d57906001906113ad565b9050818114610dbc576000866000018281548110610d7757610d77611236565b9060005260206000200154905080876000018481548110610d9a57610d9a611236565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610dcd57610dcd6113c4565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061031b565b600091505061031b565b6000826000018281548110610e2957610e29611236565b9060005260206000200154905092915050565b60606001600160a01b0384163b610ea45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016103fe565b600080856001600160a01b031685604051610ebf91906113da565b600060405180830381855af49150503d8060008114610efa576040519150601f19603f3d011682016040523d82523d6000602084013e610eff565b606091505b5091509150610f0f828286610f75565b9695505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f6957602002820191906000526020600020905b815481526020019060010190808311610f55575b50505050509050919050565b60608315610f845750816106cf565b825115610f945782518084602001fd5b8160405162461bcd60e51b81526004016103fe919061134c565b600060208284031215610fc057600080fd5b81356001600160e01b0319811681146106cf57600080fd5b80356001600160a01b0381168114610fef57600080fd5b919050565b60006020828403121561100657600080fd5b6106cf82610fd8565b60006020828403121561102157600080fd5b5035919050565b6000806040838503121561103b57600080fd5b8235915061104b60208401610fd8565b90509250929050565b6000806040838503121561106757600080fd5b61107083610fd8565b915061104b60208401610fd8565b6000806040838503121561109157600080fd5b50508035926020909101359150565b600080602083850312156110b357600080fd5b823567ffffffffffffffff808211156110cb57600080fd5b818501915085601f8301126110df57600080fd5b8135818111156110ee57600080fd5b8660208260051b850101111561110357600080fd5b60209290920196919550909350505050565b60005b83811015611130578181015183820152602001611118565b8381111561113f576000848401525b50505050565b6000815180845261115d816020860160208601611115565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111c657603f198886030184526111b4858351611145565b94509285019290850190600101611198565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156112145783516001600160a01b0316835292840192918401916001016111ef565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261126357600080fd5b83018035915067ffffffffffffffff82111561127e57600080fd5b60200191503681900382131561129357600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156112c4576112c461129a565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611303816017850160208801611115565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611340816028840160208801611115565b01602801949350505050565b6020815260006106cf6020830184611145565b60008160001904831182151516156113795761137961129a565b500290565b600082198211156113915761139161129a565b500190565b6000816113a5576113a561129a565b506000190190565b6000828210156113bf576113bf61129a565b500390565b634e487b7160e01b600052603160045260246000fd5b600082516113ec818460208701611115565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bcbd7fa7886da2ee105a46e09a3f481d193becac0b7b4afd5779fa6954e292dd64736f6c634300080c0033\";\n\ntype TWRegistryConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TWRegistryConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class TWRegistry__factory extends ContractFactory {\n  constructor(...args: TWRegistryConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    _trustedForwarder: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<TWRegistry> {\n    return super.deploy(\n      _trustedForwarder,\n      overrides || {}\n    ) as Promise<TWRegistry>;\n  }\n  override getDeployTransaction(\n    _trustedForwarder: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_trustedForwarder, overrides || {});\n  }\n  override attach(address: string): TWRegistry {\n    return super.attach(address) as TWRegistry;\n  }\n  override connect(signer: Signer): TWRegistry__factory {\n    return super.connect(signer) as TWRegistry__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TWRegistryInterface {\n    return new utils.Interface(_abi) as TWRegistryInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): TWRegistry {\n    return new Contract(address, _abi, signerOrProvider) as TWRegistry;\n  }\n}\n","import { BigNumber, BigNumberish, Contract, ethers, Signer } from \"ethers\";\nimport {\n  EIP712Domain,\n  EIP712StandardDomain,\n  signTypedDataInternal,\n} from \"./sign\";\n\nconst NAME_ABI = [\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst DOMAIN_SEPARATOR_ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeperator\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst NONCES_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"user\", type: \"address\" }],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"nonce\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nasync function getSignerNonce(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\n\nasync function getDomainSeperator(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    return await contract.getDomainSeperator();\n  }\n}\n\nasync function getTokenName(signer: Signer, contractAddress: string) {\n  return new Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(\n  signer: Signer,\n  domain: EIP712StandardDomain,\n) {\n  const contractDomainSeparator = await getDomainSeperator(\n    signer,\n    domain.verifyingContract,\n  );\n\n  const polygonDomain: EIP712Domain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: ethers.utils.hexZeroPad(\n      BigNumber.from(domain.chainId).toHexString(),\n      32,\n    ),\n  };\n\n  if (\n    ethers.utils._TypedDataEncoder.hashDomain(polygonDomain) ===\n    contractDomainSeparator\n  ) {\n    return polygonDomain;\n  }\n\n  return domain;\n}\n\n/**\n * @internal\n */\nexport async function signDAIPermit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  allowed = true,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    nonce,\n    deadline,\n    value: 0,\n    allowed,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"holder\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"expiry\", type: \"uint256\" },\n      { name: \"allowed\", type: \"bool\" },\n    ],\n  };\n\n  const { signature } = await signTypedDataInternal(signer, domain, types, {\n    holder: owner,\n    spender,\n    nonce,\n    expiry: deadline,\n    allowed,\n  });\n\n  return {\n    message,\n    signature,\n  };\n}\n\n/**\n * @internal\n */\nexport async function signEIP2612Permit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  value: BigNumberish,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"owner\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n  };\n\n  const { signature } = await signTypedDataInternal(\n    signer,\n    domain,\n    types,\n    message,\n  );\n  return {\n    message,\n    signature,\n  };\n}\n","// couldn't find this in barbones ethers export, but \"type\" should mean it does not increase bundle size either way\nimport type { TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { ethers, Signer, providers } from \"ethers\";\n\n/**\n * @internal\n */\nexport interface EIP712StandardDomain {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n}\n\n/**\n * @internal\n */\nexport interface EIP712PolygonDomain {\n  name: string;\n  version: string;\n  verifyingContract: string;\n  salt: string;\n}\n\n/**\n * @internal\n */\nexport type EIP712Domain = EIP712StandardDomain | EIP712PolygonDomain;\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nexport async function signTypedDataInternal(\n  signer: Signer,\n  domain: EIP712Domain,\n  types: Record<string, Array<TypedDataField>>,\n  message: Record<string, any>,\n) {\n  const provider = signer?.provider as providers.JsonRpcProvider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n\n  const payload = ethers.utils._TypedDataEncoder.getPayload(\n    domain,\n    types,\n    message,\n  );\n\n  let signature = \"\";\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if ((provider as any)?.provider?.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [\n      (await signer.getAddress()).toLowerCase(),\n      JSON.stringify(payload),\n    ]);\n  } else {\n    try {\n      signature = await (signer as providers.JsonRpcSigner)._signTypedData(\n        domain,\n        types,\n        message,\n      );\n    } catch (err: any) {\n      if (err?.message?.includes(\"Method eth_signTypedData_v4 not supported\")) {\n        signature = await provider.send(\"eth_signTypedData\", [\n          (await signer.getAddress()).toLowerCase(),\n          JSON.stringify(payload),\n        ]);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: ethers.utils.joinSignature(\n      ethers.utils.splitSignature(signature),\n    ),\n  };\n}\n","import { ChainId } from \"../constants/chains\";\nimport { BigNumber, ethers } from \"ethers\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId: ChainId.Polygon | ChainId.Mumbai): string {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return \"https://gasstation-mainnet.matic.network/v2\";\n    case ChainId.Mumbai:\n      return \"https://gasstation-mumbai.matic.today/v2\";\n  }\n}\n\nconst MIN_POLYGON_GAS_PRICE = ethers.utils.parseUnits(\"31\", \"gwei\");\nconst MIN_MUMBAI_GAS_PRICE = ethers.utils.parseUnits(\"1\", \"gwei\");\n\n/**\n * @internal\n */\nfunction getDefaultGasFee(\n  chainId: ChainId.Polygon | ChainId.Mumbai,\n): BigNumber {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return MIN_POLYGON_GAS_PRICE;\n    case ChainId.Mumbai:\n      return MIN_MUMBAI_GAS_PRICE;\n  }\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getPolygonGasPriorityFee(\n  chainId: ChainId.Polygon | ChainId.Mumbai,\n): Promise<BigNumber> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    // take the standard speed here, SDK options will define the extra tip\n    const priorityFee = data[\"standard\"][\"maxPriorityFee\"];\n    if (priorityFee > 0) {\n      const fixedFee = parseFloat(priorityFee).toFixed(9);\n      return ethers.utils.parseUnits(fixedFee, \"gwei\");\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return getDefaultGasFee(chainId);\n}\n","export enum ListingType {\n  Direct = 0,\n  Auction = 1,\n}\n","export enum ProposalState {\n  Pending,\n  Active,\n  Canceled,\n  Defeated,\n  Succeeded,\n  Queued,\n  Expired,\n  Executed,\n}\n","export enum VoteType {\n  Against = 0,\n  For = 1,\n  Abstain = 2,\n}\n","export enum ClaimEligibility {\n  NotEnoughSupply = \"There is not enough supply to claim.\",\n\n  AddressNotAllowed = \"This address is not on the allowlist.\",\n\n  WaitBeforeNextClaimTransaction = \"Not enough time since last claim transaction. Please wait.\",\n\n  AlreadyClaimed = \"You have already claimed the token.\",\n\n  NotEnoughTokens = \"There are not enough tokens in the wallet to pay for the claim.\",\n\n  NoActiveClaimPhase = \"There is no active claim phase at the moment. Please check back in later.\",\n\n  NoClaimConditionSet = \"There is no claim condition set.\",\n\n  NoWallet = \"No wallet connected.\",\n\n  Unknown = \"No claim conditions found.\",\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  ethers,\n  constants,\n  providers,\n  utils,\n} from \"ethers\";\nimport {\n  SnapshotInputSchema,\n  SnapshotSchema,\n} from \"../schema/contracts/common/snapshots\";\nimport {\n  approveErc20Allowance,\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n} from \"./currency\";\nimport {\n  ClaimCondition,\n  ClaimConditionInput,\n  ClaimVerification,\n  FilledConditionInput,\n  SnapshotInfo,\n} from \"../types\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core\";\nimport {\n  ClaimConditionInputArray,\n  ClaimConditionInputSchema,\n  ClaimConditionOutputSchema,\n} from \"../schema/contracts/common/claim-conditions\";\nimport { createSnapshot } from \"./snapshots\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../constants\";\nimport { IDropClaimCondition } from \"contracts/DropERC20\";\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nexport async function prepareClaim(\n  quantity: BigNumberish,\n  activeClaimCondition: ClaimCondition,\n  merkleMetadataFetcher: () => Promise<Record<string, string>>,\n  tokenDecimals: number,\n  contractWrapper: ContractWrapper<any>,\n  storage: IStorage,\n  checkERC20Allowance: boolean,\n): Promise<ClaimVerification> {\n  const addressToClaim = await contractWrapper.getSignerAddress();\n  let maxClaimable = BigNumber.from(0);\n  let proofs = [utils.hexZeroPad([0], 32)];\n  try {\n    if (\n      !activeClaimCondition.merkleRootHash\n        .toString()\n        .startsWith(constants.AddressZero)\n    ) {\n      const claims = await fetchSnapshot(\n        activeClaimCondition.merkleRootHash.toString(),\n        await merkleMetadataFetcher(),\n        storage,\n      );\n      const item =\n        claims &&\n        claims.find(\n          (c) => c.address.toLowerCase() === addressToClaim.toLowerCase(),\n        );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n      maxClaimable = ethers.utils.parseUnits(item.maxClaimable, tokenDecimals);\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if ((e as Error)?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\n      \"failed to check claim condition merkle root hash, continuing anyways\",\n      e,\n    );\n  }\n\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  const price = activeClaimCondition.price;\n  const currencyAddress = activeClaimCondition.currencyAddress;\n  if (price.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(price)\n        .mul(quantity)\n        .div(ethers.utils.parseUnits(\"1\", tokenDecimals));\n    } else if (checkERC20Allowance) {\n      await approveErc20Allowance(\n        contractWrapper,\n        currencyAddress,\n        price,\n        quantity,\n        tokenDecimals,\n      );\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxQuantityPerTransaction: maxClaimable,\n    price,\n    currencyAddress,\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot\n * @param merkleMetadata\n * @param storage\n */\nexport async function fetchSnapshot(\n  merkleRoot: string,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n) {\n  const snapshotUri = merkleMetadata[merkleRoot];\n  let snapshot = undefined;\n  if (snapshotUri) {\n    const raw = await storage.get(snapshotUri);\n    const snapshotData = SnapshotSchema.parse(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      snapshot = snapshotData.claims;\n    }\n  }\n  return snapshot;\n}\n\n/**\n * @internal\n * @param index\n * @param claimConditionInput\n * @param existingConditions\n */\nexport async function updateExistingClaimConditions(\n  index: number,\n  claimConditionInput: ClaimConditionInput,\n  existingConditions: ClaimCondition[],\n): Promise<ClaimConditionInput[]> {\n  if (index >= existingConditions.length) {\n    throw Error(\n      `Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`,\n    );\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = ethers.utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = ClaimConditionInputSchema.parse({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput,\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = ClaimConditionOutputSchema.parse({\n    ...newConditionParsed,\n    price: priceInWei,\n  });\n\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = ethers.utils.formatUnits(\n      newConditionAtIndex.price,\n      priceDecimals,\n    );\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice, // manually transform back to input price type\n    };\n  });\n}\n\n/**\n * Fetches the proof for the current signer for a particular wallet.\n *\n * @param merkleRoot - The merkle root of the condition to check.\n * @returns - The proof for the current signer for the specified condition.\n */\nexport async function getClaimerProofs(\n  addressToClaim: string,\n  merkleRoot: string,\n  tokenDecimals: number,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n): Promise<{ maxClaimable: BigNumber; proof: string[] }> {\n  const claims = await fetchSnapshot(merkleRoot, merkleMetadata, storage);\n  if (claims === undefined) {\n    return {\n      proof: [],\n      maxClaimable: BigNumber.from(0),\n    };\n  }\n  const item = claims.find(\n    (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n  );\n\n  if (item === undefined) {\n    return {\n      proof: [],\n      maxClaimable: BigNumber.from(0),\n    };\n  }\n  return {\n    proof: item.proof,\n    maxClaimable: ethers.utils.parseUnits(item.maxClaimable, tokenDecimals),\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @internal\n */\nexport async function processClaimConditionInputs(\n  claimConditionInputs: ClaimConditionInput[],\n  tokenDecimals: number,\n  provider: providers.Provider,\n  storage: IStorage,\n) {\n  const snapshotInfos: SnapshotInfo[] = [];\n  const inputsWithSnapshots = await Promise.all(\n    claimConditionInputs.map(async (conditionInput) => {\n      // check snapshots and upload if provided\n      if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n        const snapshotInfo = await createSnapshot(\n          SnapshotInputSchema.parse(conditionInput.snapshot),\n          tokenDecimals,\n          storage,\n        );\n        snapshotInfos.push(snapshotInfo);\n        conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n      } else {\n        // if no snapshot is passed or empty, reset the merkle root\n        conditionInput.merkleRootHash = utils.hexZeroPad([0], 32);\n      }\n      // fill condition with defaults values if not provided\n      return conditionInput;\n    }),\n  );\n\n  const parsedInputs = ClaimConditionInputArray.parse(inputsWithSnapshots);\n\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions: IDropClaimCondition.ClaimConditionStruct[] = (\n    await Promise.all(\n      parsedInputs.map((c) =>\n        convertToContractModel(c, tokenDecimals, provider),\n      ),\n    )\n  ).sort((a, b) => {\n    const left = BigNumber.from(a.startTimestamp);\n    const right = BigNumber.from(b.startTimestamp);\n    if (left.eq(right)) {\n      return 0;\n    } else if (left.gt(right)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  return { snapshotInfos, sortedConditions };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c\n * @param tokenDecimals\n * @param provider\n * @internal\n */\nasync function convertToContractModel(\n  c: FilledConditionInput,\n  tokenDecimals: number,\n  provider: providers.Provider,\n): Promise<IDropClaimCondition.ClaimConditionStruct> {\n  const currency =\n    c.currencyAddress === constants.AddressZero\n      ? NATIVE_TOKEN_ADDRESS\n      : c.currencyAddress;\n  let maxClaimableSupply;\n  let quantityLimitPerTransaction;\n  if (c.maxQuantity === \"unlimited\") {\n    maxClaimableSupply = ethers.constants.MaxUint256.toString();\n  } else {\n    maxClaimableSupply = ethers.utils.parseUnits(c.maxQuantity, tokenDecimals);\n  }\n  if (c.quantityLimitPerTransaction === \"unlimited\") {\n    quantityLimitPerTransaction = ethers.constants.MaxUint256.toString();\n  } else {\n    quantityLimitPerTransaction = ethers.utils.parseUnits(\n      c.quantityLimitPerTransaction,\n      tokenDecimals,\n    );\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash,\n  };\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm\n * @param tokenDecimals\n * @param provider\n * @param merkleMetadata\n * @param storage\n * @internal\n */\nexport async function transformResultToClaimCondition(\n  pm: IDropClaimCondition.ClaimConditionStructOutput,\n  tokenDecimals: number,\n  provider: providers.Provider,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n): Promise<ClaimCondition> {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const claims = await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage);\n  const maxClaimableSupply = convertToReadableQuantity(\n    pm.maxClaimableSupply,\n    tokenDecimals,\n  );\n  const quantityLimitPerTransaction = convertToReadableQuantity(\n    pm.quantityLimitPerTransaction,\n    tokenDecimals,\n  );\n  const availableSupply = convertToReadableQuantity(\n    BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed),\n    tokenDecimals,\n  );\n  const currentMintSupply = convertToReadableQuantity(\n    pm.supplyClaimed,\n    tokenDecimals,\n  );\n  return ClaimConditionOutputSchema.parse({\n    startTime: pm.startTimestamp,\n    maxQuantity: maxClaimableSupply,\n    currentMintSupply,\n    availableSupply,\n    quantityLimitPerTransaction,\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: claims,\n  });\n}\n\nfunction convertToReadableQuantity(bn: BigNumber, tokenDecimals: number) {\n  if (bn.toString() === ethers.constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return ethers.utils.formatUnits(bn, tokenDecimals);\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc721ContractInput = CommonContractSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc721ContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc721ContractDeploy = DropErc721ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc721ContractSchema = {\n  deploy: DropErc721ContractDeploy,\n  output: DropErc721ContractOutput,\n  input: DropErc721ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc1155ContractInput = CommonContractSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc1155ContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc1155ContractDeploy = DropErc1155ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc1155ContractSchema = {\n  deploy: DropErc1155ContractDeploy,\n  output: DropErc1155ContractOutput,\n  input: DropErc1155ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const MarketplaceContractInput = CommonContractSchema;\n\nexport const MarketplaceContractOutput = CommonContractOutputSchema;\n\nexport const MarketplaceContractDeploy = MarketplaceContractInput.merge(\n  CommonPlatformFeeSchema,\n).merge(CommonTrustedForwarderSchema);\n\nexport const MarketplaceContractSchema = {\n  deploy: MarketplaceContractDeploy,\n  output: MarketplaceContractOutput,\n  input: MarketplaceContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const PackContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const PackContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const PackContractDeploy = PackContractInput.merge(\n  CommonPlatformFeeSchema,\n).merge(CommonTrustedForwarderSchema);\n\nexport const PackContractSchema = {\n  deploy: PackContractDeploy,\n  output: PackContractOutput,\n  input: PackContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { z } from \"zod\";\nimport { AddressSchema, BasisPointsSchema } from \"../shared\";\n\nconst SplitRecipientInputSchema = z.object({\n  address: AddressSchema,\n  sharesBps: BasisPointsSchema.gt(0, \"Shares must be greater than 0\"),\n});\n\nconst SplitRecipientOuputSchema = SplitRecipientInputSchema.extend({\n  address: AddressSchema,\n  sharesBps: BasisPointsSchema,\n});\n\nexport const SplitsContractInput = CommonContractSchema.extend({\n  recipients: z\n    .array(SplitRecipientInputSchema)\n    .default([])\n    .superRefine((val, context) => {\n      const addressMap: Record<string, boolean> = {};\n      let totalShares = 0;\n      for (let index = 0; index < val.length; index++) {\n        const entry = val[index];\n        if (addressMap[entry.address]) {\n          context.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: `Duplicate address.`,\n            path: [index, `address`],\n          });\n        }\n        addressMap[entry.address] = true;\n        totalShares += entry.sharesBps;\n        if (totalShares > 10_000) {\n          context.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: `Total shares cannot go over 100%.`,\n            path: [index, `sharesBps`],\n          });\n        }\n      }\n      if (totalShares !== 10_000) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Total shares need to add up to 100%. Total shares are currently ${\n            totalShares / 100\n          }%`,\n          path: [],\n        });\n      }\n    }),\n});\n\nexport const SplitsContractOutput = CommonContractOutputSchema.extend({\n  recipients: z.array(SplitRecipientOuputSchema),\n});\n\nexport const SplitsContractDeploy = SplitsContractInput.merge(\n  SplitsContractInput,\n).merge(CommonTrustedForwarderSchema);\n\nexport const SplitsContractSchema = {\n  deploy: SplitsContractDeploy,\n  output: SplitsContractOutput,\n  input: SplitsContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonSymbolSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc20ContractInput =\n  CommonContractSchema.merge(CommonSymbolSchema);\n\nexport const TokenErc20ContractOutput =\n  CommonContractOutputSchema.merge(CommonSymbolSchema);\n\nexport const TokenErc20ContractDeploy = TokenErc20ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc20ContractSchema = {\n  deploy: TokenErc20ContractDeploy,\n  output: TokenErc20ContractOutput,\n  input: TokenErc20ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc721ContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const TokenErc721ContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const TokenErc721ContractDeploy = TokenErc721ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc721ContractSchema = {\n  deploy: TokenErc721ContractDeploy,\n  output: TokenErc721ContractOutput,\n  input: TokenErc721ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc1155ContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const TokenErc1155ContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const TokenErc1155ContractDeploy = TokenErc1155ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc1155ContractSchema = {\n  deploy: TokenErc1155ContractDeploy,\n  output: TokenErc1155ContractOutput,\n  input: TokenErc1155ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport {\n  AddressSchema,\n  BigNumberishSchema,\n  BigNumberSchema,\n  PercentSchema,\n} from \"../shared\";\nimport { z } from \"zod\";\n\nexport const VoteSettingsInputSchema = z.object({\n  voting_delay_in_blocks: z.number().min(0).default(0),\n  voting_period_in_blocks: z.number().min(1).default(1),\n  voting_token_address: AddressSchema,\n  voting_quorum_fraction: PercentSchema.default(0),\n  proposal_token_threshold: BigNumberishSchema.default(1),\n});\n\nexport const VoteSettingsOuputSchema = VoteSettingsInputSchema.extend({\n  proposal_token_threshold: BigNumberSchema,\n});\n\nexport const VoteContractInput = CommonContractSchema.merge(\n  VoteSettingsInputSchema,\n);\n\nexport const VoteContractOutput = CommonContractOutputSchema.merge(\n  VoteSettingsOuputSchema,\n);\n\nexport const VoteContractDeploy = VoteContractInput.merge(\n  CommonTrustedForwarderSchema,\n);\n\nexport const VoteContractSchema = {\n  deploy: VoteContractDeploy,\n  output: VoteContractOutput,\n  input: VoteContractInput,\n};\n\nexport const ProposalOutputSchema = z.object({\n  proposalId: BigNumberSchema,\n  proposer: z.string(),\n  targets: z.array(z.string()),\n  values: z.array(BigNumberSchema),\n  signatures: z.array(z.string()),\n  calldatas: z.array(z.string()),\n  startBlock: BigNumberSchema,\n  endBlock: BigNumberSchema,\n  description: z.string(),\n});\n","import { z } from \"zod\";\nimport { BigNumberishSchema, PriceSchema, RawDateSchema } from \"../shared\";\nimport { NFTInputOrUriSchema } from \"./common\";\nimport {\n  ERC1155WrappableSchema,\n  ERC20WrappableSchema,\n  ERC721WrappableSchema,\n} from \"./common/wrap\";\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = ERC20WrappableSchema.omit({\n  quantity: true,\n}).extend({\n  quantityPerReward: PriceSchema,\n});\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = ERC1155WrappableSchema.omit({\n  quantity: true,\n}).extend({\n  quantityPerReward: BigNumberishSchema,\n});\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\"),\n});\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\"),\n});\n\n/**\n * @internal\n */\nexport const PackRewardsSchema = z.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([]),\n});\n\n/**\n * @internal\n */\nexport const PackRewardsOutputSchema = z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([]),\n});\n\n/**\n * @internal\n */\nexport const PackMetadataInputSchema = PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date()),\n});\n\n/**\n * @public\n */\nexport type PackMetadataInput = z.input<typeof PackMetadataInputSchema>;\n\n/**\n * @public\n */\nexport type PackMetadataOutput = z.output<typeof PackMetadataInputSchema>;\n\n/**\n * @public\n */\nexport type PackRewards = z.input<typeof PackRewardsSchema>;\n\n/**\n * @public\n */\nexport type PackRewardsOutput = z.output<typeof PackRewardsOutputSchema>;\n","import { z } from \"zod\";\nimport { AddressSchema, BigNumberishSchema, PriceSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = z.object({\n  contractAddress: AddressSchema,\n});\n\n/**\n * @internal\n */\nexport const ERC20WrappableSchema = CommonWrappableSchema.extend({\n  quantity: PriceSchema,\n});\n\n/**\n * @internal\n */\nexport const ERC721WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n});\n\n/**\n * @internal\n */\nexport const ERC1155WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema,\n});\n","import { IStorage } from \"../interfaces/IStorage\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport {\n  ContractMetadata as ContractMetadataContract,\n  DropERC1155,\n  DropSinglePhase1155,\n  IERC20,\n  IERC20__factory,\n} from \"contracts\";\nimport { BigNumber, BigNumberish, constants, ethers, utils } from \"ethers\";\nimport { isNativeToken } from \"../../common/currency\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  ClaimCondition,\n  ClaimConditionInput,\n  ClaimConditionsForToken,\n  ClaimVerification,\n} from \"../../types\";\nimport deepEqual from \"fast-deep-equal\";\nimport { ClaimEligibility } from \"../../enums\";\nimport { TransactionResult } from \"../index\";\nimport {\n  getClaimerProofs,\n  prepareClaim,\n  processClaimConditionInputs,\n  transformResultToClaimCondition,\n  updateExistingClaimConditions,\n} from \"../../common/claim-conditions\";\nimport { includesErrorMessage } from \"../../common\";\nimport { hasFunction } from \"../../common/feature-detection\";\nimport { isNode } from \"../../common/utils\";\nimport { BaseClaimConditionERC1155 } from \"../../types/eips\";\nimport { IDropClaimCondition } from \"contracts/DropERC1155\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../constants/index\";\n\n/**\n * Manages claim conditions for Edition Drop contracts\n * @public\n */\nexport class DropErc1155ClaimConditions<\n  TContract extends DropERC1155 | BaseClaimConditionERC1155,\n> {\n  private contractWrapper;\n  private metadata;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    metadata: ContractMetadata<TContract, any>,\n    storage: IStorage,\n  ) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  public async getActive(tokenId: BigNumberish): Promise<ClaimCondition> {\n    const mc = await this.get(tokenId);\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(\n      mc,\n      0,\n      this.contractWrapper.getProvider(),\n      metadata.merkle,\n      this.storage,\n    );\n  }\n\n  private async get(\n    tokenId: BigNumberish,\n  ): Promise<IDropClaimCondition.ClaimConditionStructOutput> {\n    if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n      return (await this.contractWrapper.readContract.claimCondition(\n        tokenId,\n      )) as IDropClaimCondition.ClaimConditionStructOutput;\n    } else if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n      const id =\n        await this.contractWrapper.readContract.getActiveClaimConditionId(\n          tokenId,\n        );\n      return await this.contractWrapper.readContract.getClaimConditionById(\n        tokenId,\n        id,\n      );\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  public async getAll(tokenId: BigNumberish): Promise<ClaimCondition[]> {\n    if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n      const claimCondition =\n        (await this.contractWrapper.readContract.claimCondition(tokenId)) as {\n          currentStartId: BigNumber;\n          count: BigNumber;\n        };\n      const startId = claimCondition.currentStartId.toNumber();\n      const count = claimCondition.count.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(\n          await this.contractWrapper.readContract.getClaimConditionById(\n            tokenId,\n            i,\n          ),\n        );\n      }\n      const metadata = await this.metadata.get();\n      return Promise.all(\n        conditions.map((c) =>\n          transformResultToClaimCondition(\n            c,\n            0,\n            this.contractWrapper.getProvider(),\n            metadata.merkle,\n            this.storage,\n          ),\n        ),\n      );\n    } else {\n      return [await this.getActive(tokenId)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if a particular NFT can currently be claimed by a given user.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    // TODO switch to use verifyClaim\n    return (\n      (\n        await this.getClaimIneligibilityReasons(\n          tokenId,\n          quantity,\n          addressToCheck,\n        )\n      ).length === 0\n    );\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human-readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - the token id to check\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n\n    try {\n      claimCondition = await this.getActive(tokenId);\n    } catch (err: any) {\n      if (\n        includesErrorMessage(err, \"!CONDITION\") ||\n        includesErrorMessage(err, \"no active mint condition\")\n      ) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(\n      claimCondition.merkleRootHash,\n    );\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRootHash.toString();\n      const metadata = await this.metadata.get();\n      const proofs = await getClaimerProofs(\n        addressToCheck,\n        merkleLower,\n        0,\n        metadata.merkle,\n        this.storage,\n      );\n      try {\n        let validMerkleProof;\n        if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n          activeConditionIndex =\n            await this.contractWrapper.readContract.getActiveClaimConditionId(\n              tokenId,\n            );\n          [validMerkleProof] =\n            await this.contractWrapper.readContract.verifyClaimMerkleProof(\n              activeConditionIndex,\n              addressToCheck,\n              tokenId,\n              quantity,\n              proofs.proof,\n              proofs.maxClaimable,\n            );\n        } else if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n          [validMerkleProof] =\n            await this.contractWrapper.readContract.verifyClaimMerkleProof(\n              tokenId,\n              addressToCheck,\n              quantity,\n              {\n                proof: proofs.proof,\n                maxQuantityInAllowlist: proofs.maxClaimable,\n              },\n            );\n        }\n\n        if (!validMerkleProof) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      } catch (e) {\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n    }\n\n    // check for claim timestamp between claims\n    let [lastClaimedTimestamp, timestampForNextClaim] = [\n      BigNumber.from(0),\n      BigNumber.from(0),\n    ];\n    if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n      activeConditionIndex =\n        await this.contractWrapper.readContract.getActiveClaimConditionId(\n          tokenId,\n        );\n      [lastClaimedTimestamp, timestampForNextClaim] =\n        await this.contractWrapper.readContract.getClaimTimestamp(\n          tokenId,\n          activeConditionIndex,\n          addressToCheck,\n        );\n    } else if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n      [lastClaimedTimestamp, timestampForNextClaim] =\n        await this.contractWrapper.readContract.getClaimTimestamp(\n          tokenId,\n          addressToCheck,\n        );\n    }\n\n    const now = BigNumber.from(Date.now()).div(1000);\n\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper<IERC20>(\n          provider,\n          claimCondition.currencyAddress,\n          IERC20__factory.abi,\n          {},\n        );\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set claim conditions on a single NFT\n   *\n   * @remarks Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this contract.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await dropContract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   *\n   * @param tokenId - The id of the NFT to set the claim conditions on\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  public async set(\n    tokenId: BigNumberish,\n    claimConditionInputs: ClaimConditionInput[],\n    resetClaimEligibilityForAll = false,\n  ): Promise<TransactionResult> {\n    return this.setBatch(\n      [\n        {\n          tokenId,\n          claimConditions: claimConditionInputs,\n        },\n      ],\n      resetClaimEligibilityForAll,\n    );\n  }\n\n  /**\n   * Set claim conditions on multiple NFTs at once\n   *\n   * @remarks Sets the claim conditions that need to be fulfilled by users to claim the given NFTs in this contract.\n   *\n   * @example\n   * ```javascript\n   * const claimConditionsForTokens = [\n   *   {\n   *     tokenId: 0,\n   *     claimConditions: [{\n   *       startTime: new Date(), // start the claim phase now\n   *       maxQuantity: 2, // limit how many mints for this tokenId\n   *       price: 0.01, // price for this tokenId\n   *       snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *     }]\n   *   },\n   *   {\n   *     tokenId: 1,\n   *     claimConditions: [{\n   *       startTime: new Date(),\n   *       price: 0.08, // different price for this tokenId\n   *     }]\n   *   },\n   * ];\n   *\n   * await dropContract.claimConditions.setBatch(claimConditionsForTokens);\n   * ```\n   *\n   * @param claimConditionsForToken - The claim conditions for each NFT\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  public async setBatch(\n    claimConditionsForToken: ClaimConditionsForToken[],\n    resetClaimEligibilityForAll = false,\n  ) {\n    const merkleInfo: { [key: string]: string } = {};\n    const processedClaimConditions = await Promise.all(\n      claimConditionsForToken.map(async ({ tokenId, claimConditions }) => {\n        // sanitize for single phase deletions\n        let claimConditionsProcessed = claimConditions;\n        if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n          resetClaimEligibilityForAll = true;\n          if (claimConditions.length === 0) {\n            claimConditionsProcessed = [\n              {\n                startTime: new Date(0),\n                currencyAddress: NATIVE_TOKEN_ADDRESS,\n                price: 0,\n                maxQuantity: 0,\n                quantityLimitPerTransaction: 0,\n                waitInSeconds: 0,\n                merkleRootHash: utils.hexZeroPad([0], 32),\n                snapshot: [],\n              },\n            ];\n          } else if (claimConditions.length > 1) {\n            throw new Error(\n              \"Single phase drop contract cannot have multiple claim conditions, only one is allowed\",\n            );\n          }\n        }\n        // process inputs\n        const { snapshotInfos, sortedConditions } =\n          await processClaimConditionInputs(\n            claimConditionsProcessed,\n            0,\n            this.contractWrapper.getProvider(),\n            this.storage,\n          );\n\n        snapshotInfos.forEach((s) => {\n          merkleInfo[s.merkleRoot] = s.snapshotUri;\n        });\n        return {\n          tokenId,\n          sortedConditions,\n        };\n      }),\n    );\n\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // keep the old merkle roots from other tokenIds\n    for (const key of Object.keys(metadata.merkle)) {\n      merkleInfo[key] = metadata.merkle[key];\n    }\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!deepEqual(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo,\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(\n        mergedMetadata,\n      );\n\n      if (\n        hasFunction<ContractMetadataContract>(\n          \"setContractURI\",\n          this.contractWrapper,\n        )\n      ) {\n        encoded.push(\n          this.contractWrapper.readContract.interface.encodeFunctionData(\n            \"setContractURI\",\n            [contractURI],\n          ),\n        );\n      } else {\n        throw new Error(\n          \"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\",\n        );\n      }\n    }\n\n    processedClaimConditions.forEach(({ tokenId, sortedConditions }) => {\n      if (this.isSinglePhaseDropContract(this.contractWrapper)) {\n        encoded.push(\n          this.contractWrapper.readContract.interface.encodeFunctionData(\n            \"setClaimConditions\",\n            [tokenId, sortedConditions[0], resetClaimEligibilityForAll],\n          ),\n        );\n      } else if (this.isMultiPhaseDropContract(this.contractWrapper)) {\n        encoded.push(\n          this.contractWrapper.readContract.interface.encodeFunctionData(\n            \"setClaimConditions\",\n            [tokenId, sortedConditions, resetClaimEligibilityForAll],\n          ),\n        );\n      } else {\n        throw new Error(\"Contract does not support claim conditions\");\n      }\n    });\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   * @param tokenId - the token id to update\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  public async update(\n    tokenId: BigNumberish,\n    index: number,\n    claimConditionInput: ClaimConditionInput,\n  ): Promise<TransactionResult> {\n    const existingConditions = await this.getAll(tokenId);\n    const newConditionInputs = await updateExistingClaimConditions(\n      index,\n      claimConditionInput,\n      existingConditions,\n    );\n    return await this.set(tokenId, newConditionInputs);\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  public async prepareClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    checkERC20Allowance: boolean,\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.getActive(tokenId),\n      async () => (await this.metadata.get()).merkle,\n      0,\n      this.contractWrapper,\n      this.storage,\n      checkERC20Allowance,\n    );\n  }\n\n  private isSinglePhaseDropContract(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<DropSinglePhase1155> {\n    return !hasFunction<DropSinglePhase1155>(\n      \"getClaimConditionById\",\n      contractWrapper,\n    );\n  }\n\n  private isMultiPhaseDropContract(\n    contractWrapper: ContractWrapper<any>,\n  ): contractWrapper is ContractWrapper<DropERC1155> {\n    return hasFunction<DropERC1155>(\"getClaimConditionById\", contractWrapper);\n  }\n}\n","import { DropERC1155 } from \"contracts\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ContractEvents } from \"./contract-events\";\n\n/**\n * Manages history for Edition Drop contracts\n * @public\n */\nexport class DropErc1155History {\n  private events;\n\n  constructor(events: ContractEvents<DropERC1155>) {\n    this.events = events;\n  }\n\n  /**\n   * Get all claimer addresses\n   *\n   * @remarks Get a list of all the addresses that have claimed a token\n   * @param tokenId - the tokenId of the NFT to get the addresses of*\n   * @returns - A unique list of addresses that claimed the token\n   * @example\n   * ```javascript\n   * const tokenId = \"0\";\n   * const allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);\n   * ```\n   */\n  public async getAllClaimerAddresses(\n    tokenId: BigNumberish,\n  ): Promise<string[]> {\n    const a = (await this.events.getEvents(\"TokensClaimed\")).filter((e) =>\n      e.data && BigNumber.isBigNumber(e.data.tokenId)\n        ? e.data.tokenId.eq(tokenId)\n        : false,\n    );\n\n    return Array.from(\n      new Set(\n        a\n          .filter((b) => typeof b.data?.claimer === \"string\")\n          .map((b) => b.data.claimer as string),\n      ),\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  DropERC20,\n  IBurnableERC20,\n  IMintableERC20,\n  TokenERC20,\n} from \"contracts\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport { Amount, Currency, CurrencyValue } from \"../../types/currency\";\nimport {\n  fetchCurrencyMetadata,\n  fetchCurrencyValue,\n} from \"../../common/currency\";\nimport { TokenMintInput } from \"../../schema/tokens/token\";\nimport { PriceSchema } from \"../../schema\";\nimport {\n  BaseDropERC20,\n  BaseERC20,\n  BaseSignatureMintERC20,\n} from \"../../types/eips\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc20Mintable } from \"./erc-20-mintable\";\nimport { FEATURE_TOKEN } from \"../../constants/erc20-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { Erc20SignatureMintable } from \"./erc-20-signature-mintable\";\nimport { Erc20Burnable } from \"./erc-20-burnable\";\nimport { Erc20Droppable } from \"./erc-20-droppable\";\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nexport class Erc20<\n  T extends TokenERC20 | DropERC20 | BaseERC20 =\n    | BaseERC20\n    | BaseSignatureMintERC20,\n> implements UpdateableNetwork, DetectableFeature\n{\n  featureName = FEATURE_TOKEN.name;\n  /**\n   * Mint tokens\n   */\n  public mint: Erc20Mintable | undefined;\n  public burn: Erc20Burnable | undefined;\n  public drop: Erc20Droppable | undefined;\n  public signature: Erc20SignatureMintable | undefined;\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n    this.mint = this.detectErc20Mintable();\n    this.burn = this.detectErc20Burnable();\n    this.drop = this.detectErc20Droppable();\n    this.signature = this.detectErc20SignatureMintable();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.token.get();\n   * ```\n   * @returns The token metadata\n   */\n  public async get(): Promise<Currency> {\n    return await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n    );\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.token.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.token.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return this.getValue(\n      await this.contractWrapper.readContract.balanceOf(address),\n    );\n  }\n\n  /**\n   * The total supply for this Token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.token.totalSupply();\n   * ```\n   */\n  public async totalSupply(): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.totalSupply(),\n    );\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.token.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowance(spender: string): Promise<CurrencyValue> {\n    return await this.allowanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      spender,\n    );\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.token.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowanceOf(\n    owner: string,\n    spender: string,\n  ): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.allowance(owner, spender),\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.token.transfer(toAddress, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transfer\", [\n        to,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.token.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transferFrom\", [\n        from,\n        to,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.token.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  public async setAllowance(\n    spender: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [\n        spender,\n        await this.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.token.transferBatch(data);\n   * ```\n   */\n  public async transferBatch(args: TokenMintInput[]) {\n    const encoded = await Promise.all(\n      args.map(async (arg) => {\n        const amountWithDecimals = await this.normalizeAmount(arg.amount);\n        return this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"transfer\",\n          [arg.toAddress, amountWithDecimals],\n        );\n      }),\n    );\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * returns the wei amount from a token amount\n   * @internal\n   * @param amount\n   */\n  public async normalizeAmount(amount: Amount): Promise<BigNumber> {\n    const decimals = await this.contractWrapper.readContract.decimals();\n    return ethers.utils.parseUnits(PriceSchema.parse(amount), decimals);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n      BigNumber.from(value),\n    );\n  }\n\n  private detectErc20Mintable(): Erc20Mintable | undefined {\n    if (detectContractFeature<IMintableERC20>(this.contractWrapper, \"ERC20\")) {\n      return new Erc20Mintable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc20Burnable(): Erc20Burnable | undefined {\n    if (\n      detectContractFeature<IBurnableERC20>(\n        this.contractWrapper,\n        \"ERC20Burnable\",\n      )\n    ) {\n      return new Erc20Burnable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc20Droppable(): Erc20Droppable | undefined {\n    if (\n      detectContractFeature<BaseDropERC20>(\n        this.contractWrapper,\n        \"ERC20Droppable\",\n      )\n    ) {\n      return new Erc20Droppable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n\n  private detectErc20SignatureMintable(): Erc20SignatureMintable | undefined {\n    if (\n      detectContractFeature<TokenERC20>(\n        this.contractWrapper,\n        \"ERC20SignatureMintable\",\n      )\n    ) {\n      return new Erc20SignatureMintable(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC20, IMulticall } from \"contracts\";\nimport { TransactionResult } from \"../types\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc20 } from \"./erc-20\";\nimport { Amount } from \"../../types\";\nimport { Erc20BatchMintable } from \"./erc-20-batch-mintable\";\nimport { FEATURE_TOKEN_MINTABLE } from \"../../constants/erc20-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint ERC20 Tokens\n * @remarks Token minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nexport class Erc20Mintable implements DetectableFeature {\n  featureName = FEATURE_TOKEN_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC20>;\n  private erc20: Erc20;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n  public batch: Erc20BatchMintable | undefined;\n\n  constructor(erc20: Erc20, contractWrapper: ContractWrapper<IMintableERC20>) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.batch = this.detectErc20BatchMintable();\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.token.mint.to(toAddress, amount);\n   * ```\n   */\n  public async to(to: string, amount: Amount): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"mintTo\", [\n        to,\n        await this.erc20.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  private detectErc20BatchMintable() {\n    if (\n      detectContractFeature<IMintableERC20 & IMulticall>(\n        this.contractWrapper,\n        \"ERC20BatchMintable\",\n      )\n    ) {\n      return new Erc20BatchMintable(this.erc20, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC20, IMulticall } from \"contracts\";\nimport { Erc20 } from \"./erc-20\";\nimport { TokenMintInput } from \"../../schema\";\nimport { TransactionResult } from \"../types\";\nimport { FEATURE_TOKEN_BATCH_MINTABLE } from \"../../constants/erc20-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint Many ERC20 Tokens at once\n * @remarks Token batch minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\nexport class Erc20BatchMintable implements DetectableFeature {\n  featureName = FEATURE_TOKEN_BATCH_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC20 & IMulticall>;\n  private erc20: Erc20;\n\n  constructor(\n    erc20: Erc20,\n    contractWrapper: ContractWrapper<IMintableERC20 & IMulticall>,\n  ) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  public async to(args: TokenMintInput[]): Promise<TransactionResult> {\n    const encoded = [];\n    for (const arg of args) {\n      encoded.push(\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"mintTo\",\n          [arg.toAddress, await this.erc20.normalizeAmount(arg.amount)],\n        ),\n      );\n    }\n    return { receipt: await this.contractWrapper.multiCall(encoded) };\n  }\n}\n","import {\n  FilledSignaturePayload20,\n  MintRequest20,\n  PayloadToSign20,\n  PayloadWithUri20,\n  Signature20PayloadInput,\n  Signature20PayloadOutput,\n  SignedPayload20,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResult } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport { BigNumber, ethers } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ITokenERC20, TokenERC20 } from \"contracts\";\nimport { ContractRoles } from \"./contract-roles\";\nimport { Token } from \"../../contracts\";\nimport { FEATURE_TOKEN_SIGNATURE_MINTABLE } from \"../../constants/erc20-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Enables generating ERC20 Tokens with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\n// TODO consolidate into a single class\nexport class Erc20SignatureMintable implements DetectableFeature {\n  featureName = FEATURE_TOKEN_SIGNATURE_MINTABLE.name;\n\n  private contractWrapper: ContractWrapper<TokenERC20>;\n  private roles:\n    | ContractRoles<TokenERC20, typeof Token.contractRoles[number]>\n    | undefined;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC20>,\n    roles?: ContractRoles<TokenERC20, typeof Token.contractRoles[number]>,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint tokens from a signature\n   *\n   * @remarks Mint a certain amount of tokens from a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc20SignatureMintable.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload20,\n  ): Promise<TransactionResult> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(\n      this.contractWrapper,\n      BigNumber.from(message.price),\n      mintRequest.currencyAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"mintWithSignature\",\n        [message, signature],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Mint any number of generated tokens signatures at once\n   * @remarks Mint multiple token signatures in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   */\n  public async mintBatch(\n    signedPayloads: SignedPayload20[],\n  ): Promise<TransactionResult> {\n    const contractPayloads = await Promise.all(\n      signedPayloads.map(async (s) => {\n        const message = await this.mapPayloadToContractStruct(s.payload);\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\n            \"Can only batch free mints. For mints with a price, use regular mint()\",\n          );\n        }\n        return {\n          message,\n          signature,\n        };\n      }),\n    );\n    const encoded = contractPayloads.map((p) => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"mintWithSignature\",\n        [p.message, p.signature],\n      );\n    });\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(signedPayload: SignedPayload20): Promise<boolean> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification: [boolean, string] =\n      await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a certain amount of tokens\n   *\n   * @remarks Takes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens (or AddressZero for anyone)\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(\n    mintRequest: PayloadToSign20,\n  ): Promise<SignedPayload20> {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many token signatures.\n   *\n   * @remarks See {@link Erc20SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign20[],\n  ): Promise<SignedPayload20[]> {\n    await this.roles?.verify(\n      [\"minter\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const parsedRequests: FilledSignaturePayload20[] = payloadsToSign.map((m) =>\n      Signature20PayloadInput.parse(m),\n    );\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    // ERC20Permit (EIP-712) spec differs from signature mint 721, 1155.\n    const name = await this.contractWrapper.readContract.name();\n\n    return await Promise.all(\n      parsedRequests.map(async (m) => {\n        const finalPayload = Signature20PayloadOutput.parse(m);\n        const signature = await this.contractWrapper.signTypedData(\n          signer,\n          {\n            name,\n            version: \"1\",\n            chainId,\n            verifyingContract: this.contractWrapper.readContract.address,\n          },\n          { MintRequest: MintRequest20 },\n          await this.mapPayloadToContractStruct(finalPayload),\n        );\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri20,\n  ): Promise<ITokenERC20.MintRequestStructOutput> {\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    const amountWithDecimals = ethers.utils.parseUnits(\n      mintRequest.quantity,\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      to: mintRequest.to,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      quantity: amountWithDecimals,\n      price: normalizedPrice,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n    } as ITokenERC20.MintRequestStructOutput;\n  }\n}\n","import { IBurnableERC20 } from \"contracts/IBurnableERC20\";\nimport { FEATURE_TOKEN_BURNABLE } from \"../../constants/erc20-features\";\nimport { Amount } from \"../../types/currency\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { TransactionResult } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { Erc20 } from \"./erc-20\";\n\nexport class Erc20Burnable implements DetectableFeature {\n  featureName = FEATURE_TOKEN_BURNABLE.name;\n\n  private erc20: Erc20;\n  private contractWrapper: ContractWrapper<IBurnableERC20>;\n\n  constructor(erc20: Erc20, contractWrapper: ContractWrapper<IBurnableERC20>) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.tokens(amount);\n   * ```\n   */\n  public async tokens(amount: Amount): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        await this.erc20.normalizeAmount(amount),\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.from(holderAddress, amount);\n   * ```\n   */\n  public async from(\n    holder: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burnFrom\", [\n        holder,\n        await this.erc20.normalizeAmount(amount),\n      ]),\n    };\n  }\n}\n","import { FEATURE_TOKEN_DROPPABLE } from \"../../constants/erc20-features\";\nimport { CustomContractSchema } from \"../../schema/contracts/custom\";\nimport { ClaimVerification } from \"../../types\";\nimport { Amount } from \"../../types/currency\";\nimport { BaseDropERC20 } from \"../../types/eips\";\nimport { IStorage } from \"../interfaces\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { TransactionResult } from \"../types\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { DropClaimConditions } from \"./drop-claim-conditions\";\nimport { Erc20 } from \"./erc-20\";\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\nexport class Erc20Droppable implements DetectableFeature {\n  featureName = FEATURE_TOKEN_DROPPABLE.name;\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.nft.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n  public claimConditions: DropClaimConditions<BaseDropERC20>;\n  private contractWrapper: ContractWrapper<BaseDropERC20>;\n  private erc20: Erc20;\n  private storage: IStorage;\n\n  constructor(\n    erc20: Erc20,\n    contractWrapper: ContractWrapper<BaseDropERC20>,\n    storage: IStorage,\n  ) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n\n    this.storage = storage;\n    const metadata = new ContractMetadata(\n      this.contractWrapper,\n      CustomContractSchema,\n      this.storage,\n    );\n    this.claimConditions = new DropClaimConditions(\n      this.contractWrapper,\n      metadata,\n      this.storage,\n    );\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.token.drop.claim.to(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - The transaction receipt\n   */\n  public async claimTo(\n    destinationAddress: string,\n    amount: Amount,\n    checkERC20Allowance = true,\n    claimData?: ClaimVerification,\n  ): Promise<TransactionResult> {\n    const quantity = await this.erc20.normalizeAmount(amount);\n\n    let claimVerification = claimData;\n    if (this.claimConditions && !claimData) {\n      claimVerification = await this.claimConditions.prepareClaim(\n        quantity,\n        checkERC20Allowance,\n        await this.contractWrapper.readContract.decimals(),\n      );\n    }\n    if (!claimVerification) {\n      throw new Error(\n        \"Claim verification Data is required - either pass it in as 'claimData' or set claim conditions via 'conditions.set()'\",\n      );\n    }\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"claim\",\n      [\n        destinationAddress,\n        quantity,\n        claimVerification.currencyAddress,\n        claimVerification.price,\n        claimVerification.proofs,\n        claimVerification.maxQuantityPerTransaction,\n      ],\n      claimVerification.overrides,\n    );\n    return { receipt };\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BigNumber, constants } from \"ethers\";\nimport { TokenERC20 } from \"contracts\";\nimport { TokenHolderBalance } from \"../../types\";\nimport { fetchCurrencyValue } from \"../../common/currency\";\nimport { ContractEvents } from \"./contract-events\";\n\n/**\n * Manages history for Token contracts\n * @public\n */\nexport class TokenERC20History {\n  private events;\n  private contractWrapper;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC20>,\n    events: ContractEvents<TokenERC20>,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  public async getAllHolderBalances(): Promise<TokenHolderBalance[]> {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns: Record<string, any>[] = a.map((b) => b.data);\n    const balances: {\n      [key: string]: BigNumber;\n    } = {};\n    txns.forEach((item) => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return Promise.all(\n      Object.keys(balances).map(async (addr) => ({\n        holder: addr,\n        balance: await fetchCurrencyValue(\n          this.contractWrapper.getProvider(),\n          this.contractWrapper.readContract.address,\n          balances[addr],\n        ),\n      })),\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { NFTMetadata, NFTMetadataOwner } from \"../../schema/tokens/common\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport {\n  detectContractFeature,\n  hasFunction,\n  NotFoundError,\n} from \"../../common\";\nimport {\n  DropERC721,\n  IBurnableERC721,\n  IERC721Supply,\n  IMintableERC721,\n  ISignatureMintERC721,\n  Multiwrap,\n  SignatureDrop,\n  TokenERC721,\n} from \"contracts\";\nimport { Erc721Supply } from \"./erc-721-supply\";\nimport { Erc721Mintable } from \"./erc-721-mintable\";\nimport { BaseDropERC721, BaseERC721 } from \"../../types/eips\";\nimport { FEATURE_NFT } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { Erc721Droppable } from \"./erc-721-droppable\";\nimport { Erc721WithQuantitySignatureMintable } from \"./erc-721-with-quantity-signature-mintable\";\nimport { Erc721Burnable } from \"./erc-721-burnable\";\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nexport class Erc721<\n  T extends\n    | Multiwrap\n    | SignatureDrop\n    | DropERC721\n    | TokenERC721\n    | BaseERC721 = BaseERC721,\n> implements UpdateableNetwork, DetectableFeature\n{\n  featureName = FEATURE_NFT.name;\n  public query: Erc721Supply | undefined;\n  public mint: Erc721Mintable | undefined;\n  public burn: Erc721Burnable | undefined;\n  public drop: Erc721Droppable | undefined;\n  public signature: Erc721WithQuantitySignatureMintable | undefined;\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n    this.query = this.detectErc721Enumerable();\n    this.mint = this.detectErc721Mintable();\n    this.burn = this.detectErc721Burnable();\n    this.drop = this.detectErc721Droppable();\n    this.signature = this.detectErc721SignatureMintable();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.nft.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  public async get(tokenId: BigNumberish): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => constants.AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n    return { owner, metadata };\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  public async ownerOf(tokenId: BigNumberish): Promise<string> {\n    return await this.contractWrapper.readContract.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.nft.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.nft.transfer(walletAddress, tokenId);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"safeTransferFrom(address,address,uint256)\",\n        [from, to, tokenId],\n      ),\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  public async setApprovalForAll(\n    operator: string,\n    approved: boolean,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  public async setApprovalForToken(\n    operator: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [\n        operator,\n        tokenId,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  async getTokenMetadata(tokenId: BigNumberish): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.tokenURI(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  public async nextTokenIdToMint(): Promise<BigNumber> {\n    if (hasFunction<TokenERC721>(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return await this.contractWrapper.readContract.nextTokenIdToMint();\n    } else if (hasFunction<TokenERC721>(\"totalSupply\", this.contractWrapper)) {\n      return await this.contractWrapper.readContract.totalSupply();\n    } else {\n      throw new Error(\n        \"Contract requires either `nextTokenIdToMint` or `totalSupply` function available to determine the next token ID to mint\",\n      );\n    }\n  }\n\n  private detectErc721Enumerable(): Erc721Supply | undefined {\n    if (\n      detectContractFeature<BaseERC721 & IERC721Supply>(\n        this.contractWrapper,\n        \"ERC721Supply\",\n      ) ||\n      hasFunction<TokenERC721>(\"nextTokenIdToMint\", this.contractWrapper)\n    ) {\n      return new Erc721Supply(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc721Mintable(): Erc721Mintable | undefined {\n    if (\n      detectContractFeature<IMintableERC721>(\n        this.contractWrapper,\n        \"ERC721Mintable\",\n      )\n    ) {\n      return new Erc721Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n\n  private detectErc721Burnable(): Erc721Burnable | undefined {\n    if (\n      detectContractFeature<IBurnableERC721>(\n        this.contractWrapper,\n        \"ERC721Burnable\",\n      )\n    ) {\n      return new Erc721Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc721Droppable(): Erc721Droppable | undefined {\n    if (\n      detectContractFeature<BaseDropERC721>(\n        this.contractWrapper,\n        \"ERC721Droppable\",\n      )\n    ) {\n      return new Erc721Droppable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n\n  private detectErc721SignatureMintable():\n    | Erc721WithQuantitySignatureMintable\n    | undefined {\n    if (\n      detectContractFeature<ISignatureMintERC721>(\n        this.contractWrapper,\n        \"ERC721SignatureMint\",\n      )\n    ) {\n      return new Erc721WithQuantitySignatureMintable(\n        this.contractWrapper,\n        this.storage,\n      );\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IERC721Enumerable, IERC721Supply } from \"contracts\";\nimport { BigNumber } from \"ethers\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../../types\";\nimport { NFTMetadataOwner } from \"../../schema\";\nimport { Erc721 } from \"./erc-721\";\nimport { BaseERC721 } from \"../../types/eips\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc721Enumerable } from \"./erc-721-enumerable\";\nimport { FEATURE_NFT_SUPPLY } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * List ERC721 NFTs\n * @remarks Easily list all the NFTs in a ERC721 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.nft.query.all();\n * ```\n * @public\n */\nexport class Erc721Supply implements DetectableFeature {\n  featureName = FEATURE_NFT_SUPPLY.name;\n  private contractWrapper: ContractWrapper<BaseERC721 & IERC721Supply>;\n  private erc721: Erc721;\n\n  public owned: Erc721Enumerable | undefined;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<BaseERC721 & IERC721Supply>,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.owned = this.detectErc721Owned();\n  }\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.nft.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async all(queryParams?: QueryAllParams): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n\n    const maxSupply = await this.erc721.nextTokenIdToMint();\n    const maxId = Math.min(maxSupply.toNumber(), start + count);\n    return await Promise.all(\n      [...Array(maxId - start).keys()].map((i) =>\n        this.erc721.get((start + i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async totalCount(): Promise<BigNumber> {\n    return await this.erc721.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the number of NFTs of this contract currently owned by end users\n   * @returns the total number of NFTs of this contract in circulation (minted & not burned)\n   * @public\n   */\n  public async totalCirculatingSupply(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalSupply();\n  }\n\n  private detectErc721Owned(): Erc721Enumerable | undefined {\n    if (\n      detectContractFeature<BaseERC721 & IERC721Enumerable>(\n        this.contractWrapper,\n        \"ERC721Enumerable\",\n      )\n    ) {\n      return new Erc721Enumerable(this.erc721, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n","import { BigNumberish } from \"ethers\";\n\n/**\n * @internal\n */\nexport const DEFAULT_QUERY_ALL_COUNT = 100;\n\n/**\n * Pagination Parameters\n * @public\n */\nexport interface QueryAllParams {\n  /**\n   * the index to start from (default: 0)\n   */\n  start?: BigNumberish;\n  /**\n   * how many items to return (default: 100)\n   */\n  count?: BigNumberish;\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IERC721Enumerable } from \"contracts\";\nimport { BigNumber } from \"ethers\";\nimport { NFTMetadataOwner } from \"../../schema\";\nimport { Erc721 } from \"./erc-721\";\nimport { BaseERC721 } from \"../../types/eips\";\nimport { FEATURE_NFT_ENUMERABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\nexport class Erc721Enumerable implements DetectableFeature {\n  featureName = FEATURE_NFT_ENUMERABLE.name;\n  private contractWrapper: ContractWrapper<BaseERC721 & IERC721Enumerable>;\n  private erc721: Erc721;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<BaseERC721 & IERC721Enumerable>,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async all(walletAddress?: string): Promise<NFTMetadataOwner[]> {\n    const tokenIds = await this.tokenIds(walletAddress);\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.erc721.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  public async tokenIds(walletAddress?: string): Promise<BigNumber[]> {\n    const address =\n      walletAddress || (await this.contractWrapper.getSignerAddress());\n\n    const balance = await this.contractWrapper.readContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    return await Promise.all(\n      indices.map((i) =>\n        this.contractWrapper.readContract.tokenOfOwnerByIndex(address, i),\n      ),\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC721, IMulticall } from \"contracts\";\nimport { NFTMetadataOrUri, NFTMetadataOwner } from \"../../schema\";\nimport { TransactionResultWithId } from \"../types\";\nimport { uploadOrExtractURI } from \"../../common/nft\";\nimport { IStorage } from \"../interfaces\";\nimport { Erc721 } from \"./erc-721\";\nimport { Erc721BatchMintable } from \"./erc-721-batch-mintable\";\nimport { detectContractFeature } from \"../../common\";\nimport { FEATURE_NFT_MINTABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { TransferEvent } from \"contracts/ITokenERC721\";\n\n/**\n * Mint ERC721 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nexport class Erc721Mintable implements DetectableFeature {\n  featureName = FEATURE_NFT_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC721>;\n  private storage: IStorage;\n  private erc721: Erc721;\n\n  public batch: Erc721BatchMintable | undefined;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<IMintableERC721>,\n    storage: IStorage,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc721BatchMintable();\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.nft.mint.to(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadata: NFTMetadataOrUri,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    const uri = await uploadOrExtractURI(metadata, this.storage);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      uri,\n    ]);\n    const event = this.contractWrapper.parseLogs<TransferEvent>(\n      \"Transfer\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TransferEvent event not found\");\n    }\n    const id = event[0].args.tokenId;\n    return {\n      id,\n      receipt,\n      data: () => this.erc721.get(id),\n    };\n  }\n\n  private detectErc721BatchMintable(): Erc721BatchMintable | undefined {\n    if (\n      detectContractFeature<IMintableERC721 & IMulticall>(\n        this.contractWrapper,\n        \"ERC721BatchMintable\",\n      )\n    ) {\n      return new Erc721BatchMintable(\n        this.erc721,\n        this.contractWrapper,\n        this.storage,\n      );\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC721, IMulticall } from \"contracts\";\nimport { NFTMetadataOrUri, NFTMetadataOwner } from \"../../schema\";\nimport { TransactionResultWithId } from \"../types\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { IStorage } from \"../interfaces\";\nimport { Erc721 } from \"./erc-721\";\nimport { TokensMintedEvent } from \"contracts/IMintableERC721\";\nimport { FEATURE_NFT_BATCH_MINTABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint Many ERC721 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\nexport class Erc721BatchMintable implements DetectableFeature {\n  featureName = FEATURE_NFT_BATCH_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC721 & IMulticall>;\n  private storage: IStorage;\n  private erc721: Erc721;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<IMintableERC721 & IMulticall>,\n    storage: IStorage,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mint.batch.to(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadatas: NFTMetadataOrUri[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const encoded = uris.map((uri) =>\n      this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        uri,\n      ]),\n    );\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map((e) => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.erc721.get(id),\n      };\n    });\n  }\n}\n","import { ethers } from \"ethers\";\nimport {\n  FEATURE_NFT_DROPPABLE,\n  FEATURE_NFT_REVEALABLE,\n} from \"../../constants/erc721-features\";\nimport { NFTMetadata, NFTMetadataOrUri } from \"../../schema\";\nimport { UploadProgressEvent } from \"../../types\";\nimport {\n  BaseClaimConditionERC721,\n  BaseDelayedRevealERC721,\n  BaseDropERC721,\n} from \"../../types/eips\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { TransactionResultWithId } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { Erc721 } from \"./erc-721\";\nimport { DelayedReveal } from \"./delayed-reveal\";\nimport { detectContractFeature } from \"../../common/feature-detection\";\nimport { TokensLazyMintedEvent } from \"contracts/LazyMint\";\nimport { Erc721Claimable } from \"./erc-721-claimable\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\n\n/**\n * Lazily mint and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.drop.claim(quantity);\n * ```\n */\nexport class Erc721Droppable implements DetectableFeature {\n  featureName = FEATURE_NFT_DROPPABLE.name;\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.nft.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.nft.drop.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n  public revealer: DelayedReveal<BaseDelayedRevealERC721> | undefined;\n\n  /**\n   * Claim tokens and configure claim conditions\n   * @remarks Let users claim NFTs. Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const quantity = 10;\n   * await contract.nft.drop.claim.to(\"0x...\", quantity);\n   * ```\n   */\n  public claim: Erc721Claimable | undefined;\n\n  private contractWrapper: ContractWrapper<BaseDropERC721>;\n  private erc721: Erc721;\n  private storage: IStorage;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<BaseDropERC721>,\n    storage: IStorage,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n\n    this.storage = storage;\n    this.revealer = this.detectErc721Revealable();\n    this.claim = this.detectErc721Claimable();\n  }\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.nft.lazy.mint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  public async lazyMint(\n    metadatas: NFTMetadataOrUri[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(\n      metadatas,\n      this.storage,\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n      options,\n    );\n    // ensure baseUri is the same for the entire batch\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n    for (let i = 0; i < batch.length; i++) {\n      const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n      if (baseUri !== uri) {\n        throw new Error(\n          `Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`,\n        );\n      }\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.length,\n      baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n      ethers.utils.toUtf8Bytes(\"\"),\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.getTokenMetadata(id),\n      });\n    }\n    return results;\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private detectErc721Revealable():\n    | DelayedReveal<BaseDelayedRevealERC721>\n    | undefined {\n    if (\n      detectContractFeature<BaseDelayedRevealERC721>(\n        this.contractWrapper,\n        \"ERC721Revealable\",\n      )\n    ) {\n      return new DelayedReveal(\n        this.contractWrapper,\n        this.storage,\n        FEATURE_NFT_REVEALABLE.name,\n        () => this.erc721.nextTokenIdToMint(),\n      );\n    }\n    return undefined;\n  }\n\n  private detectErc721Claimable(): Erc721Claimable | undefined {\n    if (\n      detectContractFeature<BaseClaimConditionERC721>(\n        this.contractWrapper,\n        \"ERC721Claimable\",\n      )\n    ) {\n      return new Erc721Claimable(\n        this.erc721,\n        this.contractWrapper,\n        this.storage,\n      );\n    }\n    return undefined;\n  }\n}\n","import { TokensClaimedEvent } from \"contracts/Drop\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { FEATURE_NFT_CLAIMABLE } from \"../../constants/erc721-features\";\nimport { NFTMetadataOwner } from \"../../schema\";\nimport { ClaimVerification } from \"../../types\";\nimport { BaseClaimConditionERC721 } from \"../../types/eips\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { TransactionResultWithId } from \"../types\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { DropClaimConditions } from \"./drop-claim-conditions\";\nimport { Erc721 } from \"./erc-721\";\nimport { CustomContractSchema } from \"../../schema/contracts/custom\";\nimport { TransactionTask } from \"./TransactionTask\";\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.drop.claim.to(\"0x...\", quantity);\n * ```\n */\nexport class Erc721Claimable implements DetectableFeature {\n  featureName = FEATURE_NFT_CLAIMABLE.name;\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.nft.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n  public conditions: DropClaimConditions<BaseClaimConditionERC721>;\n  private contractWrapper: ContractWrapper<BaseClaimConditionERC721>;\n  private erc721: Erc721;\n  private storage: IStorage;\n\n  constructor(\n    erc721: Erc721,\n    contractWrapper: ContractWrapper<BaseClaimConditionERC721>,\n    storage: IStorage,\n  ) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n\n    this.storage = storage;\n    const metadata = new ContractMetadata(\n      this.contractWrapper,\n      CustomContractSchema,\n      this.storage,\n    );\n    this.conditions = new DropClaimConditions(\n      this.contractWrapper,\n      metadata,\n      this.storage,\n    );\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   * @param claimData\n   */\n  public async getClaimTransaction(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    checkERC20Allowance = true, // TODO split up allowance checks\n    claimData?: ClaimVerification,\n  ): Promise<TransactionTask> {\n    let claimVerification = claimData;\n    if (this.conditions && !claimData) {\n      claimVerification = await this.conditions.prepareClaim(\n        quantity,\n        checkERC20Allowance,\n      );\n    }\n    if (!claimVerification) {\n      throw new Error(\n        \"Claim verification Data is required - either pass it in as 'claimData' or set claim conditions via 'conditions.set()'\",\n      );\n    }\n    return TransactionTask.make({\n      contractWrapper: this.contractWrapper,\n      functionName: \"claim\",\n      args: [\n        destinationAddress,\n        quantity,\n        claimVerification.currencyAddress,\n        claimVerification.price,\n        {\n          proof: claimVerification.proofs,\n          maxQuantityInAllowlist: claimVerification.maxQuantityPerTransaction,\n        },\n        ethers.utils.toUtf8Bytes(\"\"),\n      ],\n      overrides: claimVerification.overrides,\n    });\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.nft.drop.claim.to(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the first NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the first claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async to(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n    claimData?: ClaimVerification,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const task = await this.getClaimTransaction(\n      destinationAddress,\n      quantity,\n      checkERC20Allowance,\n      claimData,\n    );\n    const { receipt } = await task.execute();\n    const event = this.contractWrapper.parseLogs<TokensClaimedEvent>(\n      \"TokensClaimed\",\n      receipt?.logs,\n    );\n    const startingIndex: BigNumber = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.get(id),\n      });\n    }\n    return results;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  BigNumber,\n  BigNumberish,\n  CallOverrides,\n  ContractTransaction,\n} from \"ethers\";\nimport { ContractEncoder } from \"./contract-encoder\";\nimport { GasCostEstimator } from \"./gas-cost-estimator\";\nimport { TransactionResult } from \"../types\";\n\n/**\n * Arguments for creating a transaction task.\n * @internal\n */\ninterface TransactionTaskArgs {\n  // required\n  contractWrapper: ContractWrapper<any>;\n  functionName: string;\n  // options\n  args?: any[];\n  overrides?: CallOverrides;\n}\n\n/**\n * @internal\n * Represents a transaction to be executed and can be customized.\n */\nexport class TransactionTask {\n  static make(taskArgs: TransactionTaskArgs) {\n    return new TransactionTask(taskArgs);\n  }\n\n  private contractWrapper: ContractWrapper<any>;\n  private functionName: string;\n  private args: any[];\n  private overrides: CallOverrides | undefined;\n  private encoder: ContractEncoder<any>;\n  private estimator: GasCostEstimator<any>;\n\n  private constructor(taskArgs: TransactionTaskArgs) {\n    this.contractWrapper = taskArgs.contractWrapper;\n    this.functionName = taskArgs.functionName;\n    this.args = taskArgs.args || [];\n    this.overrides = taskArgs.overrides;\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n\n  // ////////////// Overrides ////////////////\n\n  /**\n   * Override the gas limit for this transaction.\n   * @param gasLimit\n   */\n  public overrideGasLimit(gasLimit: BigNumberish): TransactionTask {\n    this.overrides = {\n      ...this.overrides,\n      gasLimit,\n    };\n    return this;\n  }\n\n  /**\n   * Override the gas price for this transaction.\n   * @param gasPrice\n   */\n  public overrideGasPrice(gasPrice: BigNumberish): TransactionTask {\n    this.overrides = {\n      ...this.overrides,\n      gasPrice,\n    };\n    return this;\n  }\n\n  /**\n   * Override the nonce for this transaction.\n   * @param nonce\n   */\n  public overrideNonce(nonce: BigNumberish): TransactionTask {\n    this.overrides = {\n      ...this.overrides,\n      nonce,\n    };\n    return this;\n  }\n\n  /**\n   * Override the value sent with this transaction.\n   * @param value\n   */\n  public overrideValue(value: BigNumberish): TransactionTask {\n    this.overrides = {\n      ...this.overrides,\n      value,\n    };\n    return this;\n  }\n\n  // ////////////// Estimates ////////////////\n\n  /**\n   * Returns the gas limit that this transaction would consume if executed.\n   * @returns the gas limit in gas units\n   */\n  public async estimateGasLimit(): Promise<BigNumber> {\n    return await this.estimator.gasLimitOf(this.functionName, this.args);\n  }\n\n  /**\n   * Returns the total gas cost of this transaction if executed.\n   * @returns the gas cost in ether\n   */\n  public async estimateGasCostInEther(): Promise<string> {\n    return await this.estimator.gasCostOf(this.functionName, this.args);\n  }\n\n  // ////////////// Actions ////////////////\n\n  /**\n   * Returns the encoded function data of this transaction if executed.\n   */\n  public async encodeFunctionData(): Promise<string> {\n    return this.encoder.encode(this.functionName, this.args);\n  }\n\n  /**\n   * Submits this transaction to the network. Does not wait for the transaction to be mined.\n   * To wait for the transaction to be mined, you can call `.wait()` on the result of this function.\n   */\n  public async submit(): Promise<ContractTransaction> {\n    return await this.contractWrapper.sendTransactionByFunction(\n      this.functionName,\n      this.args,\n      this.overrides || {},\n    );\n  }\n\n  /**\n   * Submits this transaction to the network and waits for it to be mined.\n   */\n  public async execute(): Promise<TransactionResult> {\n    const receipt = await this.contractWrapper.sendTransaction(\n      this.functionName,\n      this.args,\n      this.overrides || {},\n    );\n    return {\n      receipt,\n    };\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, BigNumber, ethers } from \"ethers\";\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nexport class GasCostEstimator<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  public async gasCostOf(\n    fn: keyof TContract[\"functions\"] | (string & {}),\n    args: Parameters<TContract[\"functions\"][typeof fn]> | any[],\n  ): Promise<string> {\n    const price = await this.contractWrapper.getPreferredGasPrice();\n    const gasUnits = await this.contractWrapper.estimateGas(fn, args);\n    return ethers.utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  public async gasLimitOf(\n    fn: keyof TContract[\"functions\"] | (string & {}),\n    args: Parameters<TContract[\"functions\"][typeof fn]> | any[],\n  ): Promise<BigNumber> {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  public async currentGasPriceInGwei(): Promise<string> {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return ethers.utils.formatUnits(price, \"gwei\");\n  }\n}\n","import {\n  MintRequest721,\n  MintRequest721withQuantity,\n  PayloadToSign721withQuantity,\n  PayloadWithUri721withQuantity,\n  Signature721WithQuantityInput,\n  Signature721WithQuantityOutput,\n  SignedPayload721WithQuantitySignature,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResultWithId } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  ISignatureMintERC721,\n  ITokenERC721,\n  SignatureMintERC721,\n  TokenERC721,\n} from \"contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { TokensMintedWithSignatureEvent } from \"contracts/SignatureDrop\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_NFT_SIGNATURE_MINTABLE } from \"../../constants/erc721-features\";\nimport { hasFunction } from \"../../common\";\n\n/**\n * Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nexport class Erc721WithQuantitySignatureMintable implements DetectableFeature {\n  featureName = FEATURE_NFT_SIGNATURE_MINTABLE.name;\n\n  private contractWrapper: ContractWrapper<SignatureMintERC721 | TokenERC721>;\n\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<SignatureMintERC721 | TokenERC721>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721WithQuantitySignatureMintable.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload721WithQuantitySignature,\n  ): Promise<TransactionResultWithId> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n\n    let message;\n    let price;\n    if (isLegacyNFTContract) {\n      message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      price = message.price;\n    } else {\n      message = await this.mapPayloadToContractStruct(mintRequest);\n      price = message.pricePerToken.mul(message.quantity);\n    }\n\n    const overrides = await this.contractWrapper.getCallOverrides();\n\n    await setErc20Allowance(\n      this.contractWrapper,\n      price,\n      mintRequest.currencyAddress,\n      overrides,\n    );\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n    const t = this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n      \"TokensMintedWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n    };\n  }\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   */\n  public async mintBatch(\n    signedPayloads: SignedPayload721WithQuantitySignature[],\n  ): Promise<TransactionResultWithId[]> {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n\n    const contractPayloads = await Promise.all(\n      signedPayloads.map(async (s) => {\n        let message;\n\n        if (isLegacyNFTContract) {\n          message = await this.mapLegacyPayloadToContractStruct(s.payload);\n        } else {\n          message = await this.mapPayloadToContractStruct(s.payload);\n        }\n\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\n            \"Can only batch free mints. For mints with a price, use regular mint()\",\n          );\n        }\n        return {\n          message,\n          signature,\n        };\n      }),\n    );\n    const encoded = contractPayloads.map((p) => {\n      if (isLegacyNFTContract) {\n        const contract = this.contractWrapper.readContract as TokenERC721;\n        return contract.interface.encodeFunctionData(\"mintWithSignature\", [\n          p.message as ITokenERC721.MintRequestStructOutput,\n          p.signature,\n        ]);\n      } else {\n        const contract = this.contractWrapper\n          .readContract as SignatureMintERC721;\n        return contract.interface.encodeFunctionData(\"mintWithSignature\", [\n          p.message as ISignatureMintERC721.MintRequestStructOutput,\n          p.signature,\n        ]);\n      }\n    });\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events =\n      this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n        \"TokensMintedWithSignature\",\n        receipt.logs,\n      );\n    if (events.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    return events.map((log) => ({\n      id: log.args.tokenIdMinted,\n      receipt,\n    }));\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(\n    signedPayload: SignedPayload721WithQuantitySignature,\n  ): Promise<boolean> {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n\n    let message;\n    let verification: [boolean, string];\n\n    if (isLegacyNFTContract) {\n      const contract = this.contractWrapper.readContract as TokenERC721;\n      message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      verification = await contract.verify(message, signature);\n    } else {\n      const contract = this.contractWrapper.readContract as SignatureMintERC721;\n      message = await this.mapPayloadToContractStruct(mintRequest);\n      verification = await contract.verify(message, signature);\n    }\n\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(\n    mintRequest: PayloadToSign721withQuantity,\n  ): Promise<SignedPayload721WithQuantitySignature> {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721WithQuantitySignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign721withQuantity[],\n  ): Promise<SignedPayload721WithQuantitySignature[]> {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n\n    const parsedRequests = payloadsToSign.map((m) =>\n      Signature721WithQuantityInput.parse(m),\n    );\n\n    const metadatas = parsedRequests.map((r) => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    return await Promise.all(\n      parsedRequests.map(async (m, i) => {\n        const uri = uris[i];\n        const finalPayload = Signature721WithQuantityOutput.parse({\n          ...m,\n          uri,\n        });\n        let signature;\n\n        if (isLegacyNFTContract) {\n          signature = await this.contractWrapper.signTypedData(\n            signer,\n            {\n              name: \"TokenERC721\",\n              version: \"1\",\n              chainId,\n              verifyingContract: this.contractWrapper.readContract.address,\n            },\n            { MintRequest: MintRequest721 },\n            await this.mapLegacyPayloadToContractStruct(finalPayload),\n          );\n        } else {\n          signature = await this.contractWrapper.signTypedData(\n            signer,\n            {\n              name: \"SignatureMintERC721\",\n              version: \"1\",\n              chainId,\n              verifyingContract: await this.contractWrapper.readContract\n                .address,\n            },\n            { MintRequest: MintRequest721withQuantity }, // TYPEHASH\n            await this.mapPayloadToContractStruct(finalPayload),\n          );\n        }\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri721withQuantity,\n  ): Promise<ISignatureMintERC721.MintRequestStructOutput> {\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n    } as ISignatureMintERC721.MintRequestStructOutput;\n  }\n\n  private async mapLegacyPayloadToContractStruct(\n    mintRequest: PayloadWithUri721withQuantity,\n  ): Promise<ITokenERC721.MintRequestStructOutput> {\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    return {\n      to: mintRequest.to,\n      price: normalizedPricePerToken,\n      uri: mintRequest.uri,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n    } as ITokenERC721.MintRequestStructOutput;\n  }\n\n  private async isLegacyNFTContract() {\n    if (hasFunction<TokenERC721>(\"contractType\", this.contractWrapper)) {\n      try {\n        const contractType = ethers.utils.toUtf8String(\n          await this.contractWrapper.readContract.contractType(),\n        );\n        return contractType.includes(\"TokenERC721\");\n      } catch (e) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n}\n","import { IBurnableERC721 } from \"contracts/IBurnableERC721\";\nimport { BigNumberish } from \"ethers\";\nimport { FEATURE_NFT_BURNABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { TransactionResult } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\n\nexport class Erc721Burnable implements DetectableFeature {\n  featureName = FEATURE_NFT_BURNABLE.name;\n\n  private contractWrapper: ContractWrapper<IBurnableERC721>;\n\n  constructor(contractWrapper: ContractWrapper<IBurnableERC721>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn NFTs\n   *\n   * @remarks Burn NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   *\n   * await contract.nft.burn.token(tokenId);\n   * ```\n   */\n  public async token(tokenId: BigNumberish): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [tokenId]),\n    };\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  DropERC1155,\n  IBurnableERC1155,\n  IERC1155Enumerable,\n  IMintableERC1155,\n  TokenERC1155,\n} from \"contracts\";\nimport { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { NFTMetadata } from \"../../schema/tokens/common\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport {\n  EditionMetadata,\n  EditionMetadataOutputSchema,\n} from \"../../schema/tokens/edition\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport {\n  detectContractFeature,\n  hasFunction,\n  NotFoundError,\n} from \"../../common\";\nimport { AirdropInput } from \"../../types/airdrop/airdrop\";\nimport { AirdropInputSchema } from \"../../schema/contracts/common/airdrop\";\nimport {\n  BaseDropERC1155,\n  BaseERC1155,\n  BaseSignatureMintERC1155,\n} from \"../../types/eips\";\nimport { Erc1155Enumerable } from \"./erc-1155-enumerable\";\nimport { Erc1155Mintable } from \"./erc-1155-mintable\";\nimport { FEATURE_EDITION } from \"../../constants/erc1155-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { Erc1155SignatureMintable } from \"./erc-1155-signature-mintable\";\nimport { Erc1155Droppable } from \"./erc-1155-droppable\";\nimport { Erc1155Burnable } from \"./erc-1155-burnable\";\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nexport class Erc1155<\n  T extends DropERC1155 | TokenERC1155 | BaseERC1155 =\n    | BaseERC1155\n    | BaseSignatureMintERC1155,\n> implements UpdateableNetwork, DetectableFeature\n{\n  featureName = FEATURE_EDITION.name;\n  public query: Erc1155Enumerable | undefined;\n  public mint: Erc1155Mintable | undefined;\n  public burn: Erc1155Burnable | undefined;\n  public drop: Erc1155Droppable | undefined;\n  public signature: Erc1155SignatureMintable | undefined;\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n    this.query = this.detectErc1155Enumerable();\n    this.mint = this.detectErc1155Mintable();\n    this.burn = this.detectErc1155Burnable();\n    this.drop = this.detectErc1155Droppable();\n    this.signature = this.detectErc1155SignatureMintable();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  public async get(tokenId: BigNumberish): Promise<EditionMetadata> {\n    const [supply, metadata] = await Promise.all([\n      this.contractWrapper.readContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(0)),\n      this.getTokenMetadata(tokenId),\n    ]);\n    return EditionMetadataOutputSchema.parse({\n      supply,\n      metadata,\n    });\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  public async totalSupply(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  public async balanceOf(\n    address: string,\n    tokenId: BigNumberish,\n  ): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  public async balance(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.balanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [\n        from,\n        to,\n        tokenId,\n        amount,\n        data,\n      ]),\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  public async setApprovalForAll(\n    operator: string,\n    approved: boolean,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  public async airdrop(\n    tokenId: BigNumberish,\n    addresses: AirdropInput,\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n\n    const balanceOf = await this.balanceOf(from, tokenId);\n\n    const input = AirdropInputSchema.parse(addresses);\n\n    const totalToAirdrop = input.reduce((prev, curr) => {\n      return prev + Number(curr?.quantity || 1);\n    }, 0);\n\n    if (balanceOf.toNumber() < totalToAirdrop) {\n      throw new Error(\n        `The caller owns ${balanceOf.toNumber()} NFTs, but wants to airdrop ${totalToAirdrop} NFTs.`,\n      );\n    }\n\n    const encoded = input.map(({ address: to, quantity }) => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"safeTransferFrom\",\n        [from, to, tokenId, quantity, data],\n      );\n    });\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  public async nextTokenIdToMint(): Promise<BigNumber> {\n    if (hasFunction<TokenERC1155>(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return await this.contractWrapper.readContract.nextTokenIdToMint();\n    } else {\n      throw new Error(\n        \"Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint\",\n      );\n    }\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   * @param tokenId - the token Id to fetch\n   */\n  public async getTokenMetadata(tokenId: BigNumberish): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.uri(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  private detectErc1155Enumerable(): Erc1155Enumerable | undefined {\n    if (\n      detectContractFeature<BaseERC1155 & IERC1155Enumerable>(\n        this.contractWrapper,\n        \"ERC1155Enumerable\",\n      )\n    ) {\n      return new Erc1155Enumerable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc1155Mintable(): Erc1155Mintable | undefined {\n    if (\n      detectContractFeature<IMintableERC1155>(\n        this.contractWrapper,\n        \"ERC1155Mintable\",\n      )\n    ) {\n      return new Erc1155Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n\n  private detectErc1155Burnable(): Erc1155Burnable | undefined {\n    if (\n      detectContractFeature<IBurnableERC1155>(\n        this.contractWrapper,\n        \"ERC1155Burnable\",\n      )\n    ) {\n      return new Erc1155Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc1155Droppable(): Erc1155Droppable | undefined {\n    if (\n      detectContractFeature<BaseDropERC1155>(\n        this.contractWrapper,\n        \"ERC1155Droppable\",\n      )\n    ) {\n      return new Erc1155Droppable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n\n  private detectErc1155SignatureMintable():\n    | Erc1155SignatureMintable\n    | undefined {\n    if (\n      detectContractFeature<BaseSignatureMintERC1155>(\n        this.contractWrapper,\n        \"ERC1155SignatureMintable\",\n      )\n    ) {\n      return new Erc1155SignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n","import { z } from \"zod\";\nimport { AddressSchema, PriceSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const AirdropAddressInput = z.object({\n  address: AddressSchema,\n  quantity: PriceSchema.default(1),\n});\n\n/**\n * @internal\n */\nexport const AirdropInputSchema = z.union([\n  z.array(z.string()).transform((strings) =>\n    strings.map((address) =>\n      AirdropAddressInput.parse({\n        address,\n      }),\n    ),\n  ),\n  z.array(AirdropAddressInput),\n]);\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IERC1155Enumerable } from \"contracts\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../../types\";\nimport { EditionMetadata, EditionMetadataOwner } from \"../../schema\";\nimport { Erc1155 } from \"./erc-1155\";\nimport { BaseERC1155 } from \"../../types/eips\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_EDITION_ENUMERABLE } from \"../../constants/erc1155-features\";\n\n/**\n * List ERC1155 NFTs\n * @remarks Easily list all the NFTs in a ERC1155 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.edition.query.all();\n * ```\n * @public\n */\nexport class Erc1155Enumerable implements DetectableFeature {\n  featureName = FEATURE_EDITION_ENUMERABLE.name;\n  private contractWrapper: ContractWrapper<BaseERC1155 & IERC1155Enumerable>;\n  private erc1155: Erc1155;\n\n  constructor(\n    erc1155: Erc1155,\n    contractWrapper: ContractWrapper<BaseERC1155 & IERC1155Enumerable>,\n  ) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.edition.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async all(queryParams?: QueryAllParams): Promise<EditionMetadata[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min((await this.totalCount()).toNumber(), start + count);\n    return await Promise.all(\n      [...Array(maxId - start).keys()].map((i) =>\n        this.erc1155.get((start + i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async totalCount(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the supply of token for a given tokenId.\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async totalCirculatingSupply(\n    tokenId: BigNumberish,\n  ): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.edition.query.owned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async owned(walletAddress?: string): Promise<EditionMetadataOwner[]> {\n    const address =\n      walletAddress || (await this.contractWrapper.getSignerAddress());\n    const maxId = await this.contractWrapper.readContract.nextTokenIdToMint();\n    const balances = await this.contractWrapper.readContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => {\n        const editionMetadata = await this.erc1155.get(b.tokenId.toString());\n        return {\n          ...editionMetadata,\n          owner: address,\n          quantityOwned: b.balance,\n        };\n      }),\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC1155, IMulticall } from \"contracts\";\nimport { detectContractFeature } from \"../../common\";\nimport { Erc1155 } from \"./erc-1155\";\nimport { Erc1155BatchMintable } from \"./erc-1155-batch-mintable\";\nimport { EditionMetadata, EditionMetadataOrUri } from \"../../schema\";\nimport { TransactionResultWithId } from \"../types\";\nimport { uploadOrExtractURI } from \"../../common/nft\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { IStorage } from \"../interfaces\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_EDITION_MINTABLE } from \"../../constants/erc1155-features\";\nimport { TransferSingleEvent } from \"contracts/ITokenERC1155\";\n\n/**\n * Mint ERC1155 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nexport class Erc1155Mintable implements DetectableFeature {\n  featureName = FEATURE_EDITION_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC1155>;\n  private erc1155: Erc1155;\n  private storage: IStorage;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n  public batch: Erc1155BatchMintable | undefined;\n\n  constructor(\n    erc1155: Erc1155,\n    contractWrapper: ContractWrapper<IMintableERC1155>,\n    storage: IStorage,\n  ) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc1155BatchMintable();\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.edition.mint.to(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    const uri = await uploadOrExtractURI(\n      metadataWithSupply.metadata,\n      this.storage,\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      ethers.constants.MaxUint256,\n      uri,\n      metadataWithSupply.supply,\n    ]);\n    const event = this.contractWrapper.parseLogs<TransferSingleEvent>(\n      \"TransferSingle\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TransferSingleEvent event not found\");\n    }\n    const id = event[0].args.id;\n    return {\n      id,\n      receipt,\n      data: () => this.erc1155.get(id.toString()),\n    };\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async additionalSupplyTo(\n    to: string,\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    const metadata = await this.erc1155.getTokenMetadata(tokenId);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      tokenId,\n      metadata.uri,\n      additionalSupply,\n    ]);\n    return {\n      id: BigNumber.from(tokenId),\n      receipt,\n      data: () => this.erc1155.get(tokenId),\n    };\n  }\n\n  private detectErc1155BatchMintable() {\n    if (\n      detectContractFeature<IMintableERC1155 & IMulticall>(\n        this.contractWrapper,\n        \"ERC1155BatchMintable\",\n      )\n    ) {\n      return new Erc1155BatchMintable(\n        this.erc1155,\n        this.contractWrapper,\n        this.storage,\n      );\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMintableERC1155, IMulticall } from \"contracts\";\nimport { TransactionResultWithId } from \"../types\";\nimport { Erc1155 } from \"./erc-1155\";\nimport { EditionMetadata, EditionMetadataOrUri } from \"../../schema\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { ethers } from \"ethers\";\nimport { TokensMintedEvent } from \"contracts/TokenERC1155\";\nimport { IStorage } from \"../interfaces\";\nimport { FEATURE_EDITION_BATCH_MINTABLE } from \"../../constants/erc1155-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\n\n/**\n * Mint Many ERC1155 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.batch.to(walletAddress, [nftMetadataWithSupply1, nftMetadataWithSupply2, ...]);\n * ```\n * @public\n */\nexport class Erc1155BatchMintable implements DetectableFeature {\n  featureName = FEATURE_EDITION_BATCH_MINTABLE.name;\n  private contractWrapper: ContractWrapper<IMintableERC1155 & IMulticall>;\n  private erc1155: Erc1155;\n  private storage: IStorage;\n\n  constructor(\n    erc1155: Erc1155,\n    contractWrapper: ContractWrapper<IMintableERC1155 & IMulticall>,\n    storage: IStorage,\n  ) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.edition.mint.batch.to(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async to(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    const metadatas = metadataWithSupply.map((a) => a.metadata);\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const encoded = uris.map((uri, index) =>\n      this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        ethers.constants.MaxUint256,\n        uri,\n        supplies[index],\n      ]),\n    );\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map((e) => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.erc1155.get(id),\n      };\n    });\n  }\n}\n","import {\n  FilledSignaturePayload1155WithTokenId,\n  MintRequest1155,\n  PayloadToSign1155,\n  PayloadToSign1155WithTokenId,\n  PayloadWithUri1155,\n  Signature1155PayloadInputWithTokenId,\n  Signature1155PayloadOutput,\n  SignedPayload1155,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResultWithId } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ITokenERC1155, TokenERC1155 } from \"contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { ContractRoles } from \"./contract-roles\";\nimport { NFTCollection } from \"../../contracts\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport { TokensMintedWithSignatureEvent } from \"contracts/ITokenERC1155\";\nimport { BaseSignatureMintERC1155 } from \"../../types/eips\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_EDITION_SIGNATURE_MINTABLE } from \"../../constants/erc1155-features\";\n\n/**\n * Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nexport class Erc1155SignatureMintable implements DetectableFeature {\n  featureName = FEATURE_EDITION_SIGNATURE_MINTABLE.name;\n\n  private contractWrapper: ContractWrapper<\n    BaseSignatureMintERC1155 | TokenERC1155\n  >;\n  private storage: IStorage;\n  private roles:\n    | ContractRoles<TokenERC1155, typeof NFTCollection.contractRoles[number]>\n    | undefined;\n\n  constructor(\n    contractWrapper: ContractWrapper<BaseSignatureMintERC1155 | TokenERC1155>,\n    storage: IStorage,\n    roles?: ContractRoles<\n      TokenERC1155,\n      typeof NFTCollection.contractRoles[number]\n    >,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc1155SignatureMintable.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload1155,\n  ): Promise<TransactionResultWithId> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(\n      this.contractWrapper,\n      message.pricePerToken.mul(message.quantity),\n      mintRequest.currencyAddress,\n      overrides,\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n    const t = this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n      \"TokensMintedWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n    };\n  }\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   */\n  public async mintBatch(\n    signedPayloads: SignedPayload1155[],\n  ): Promise<TransactionResultWithId[]> {\n    const contractPayloads = await Promise.all(\n      signedPayloads.map(async (s) => {\n        const message = await this.mapPayloadToContractStruct(s.payload);\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\n            \"Can only batch free mints. For mints with a price, use regular mint()\",\n          );\n        }\n        return {\n          message,\n          signature,\n        };\n      }),\n    );\n    const encoded = contractPayloads.map((p) => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"mintWithSignature\",\n        [p.message, p.signature],\n      );\n    });\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events =\n      this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n        \"TokensMintedWithSignature\",\n        receipt.logs,\n      );\n    if (events.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    return events.map((log) => ({\n      id: log.args.tokenIdMinted,\n      receipt,\n    }));\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(signedPayload: SignedPayload1155): Promise<boolean> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification: [boolean, string] =\n      await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint an NFT dynamically.\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(\n    payloadToSign: PayloadToSign1155,\n  ): Promise<SignedPayload1155> {\n    const payload = {\n      ...payloadToSign,\n      tokenId: ethers.constants.MaxUint256,\n    };\n    return this.generateFromTokenId(payload);\n  }\n\n  /**\n   * Generate a signature that can be used to mint additionaly supply to an existing NFT.\n   *\n   * @remarks Takes in a payload with the token ID of an existing NFT, and signs it with your private key. The generated signature can then be used to mint additional supply to the NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   tokenId: 0, // Instead of metadata, we specificy the token ID of the NFT to mint supply to\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generateFromTokenId(\n    payloadToSign: PayloadToSign1155WithTokenId,\n  ): Promise<SignedPayload1155> {\n    const payloads = await this.generateBatchFromTokenIds([payloadToSign]);\n    return payloads[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many new NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign1155[],\n  ): Promise<SignedPayload1155[]> {\n    const payloads = payloadsToSign.map((payload) => ({\n      ...payload,\n      tokenId: ethers.constants.MaxUint256,\n    }));\n    return this.generateBatchFromTokenIds(payloads);\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint new NFTs or additionaly supply to existing NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generateFromTokenId}\n   *\n   * @param payloadsToSign - the payloads to sign with tokenIds specified\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatchFromTokenIds(\n    payloadsToSign: PayloadToSign1155WithTokenId[],\n  ): Promise<SignedPayload1155[]> {\n    await this.roles?.verify(\n      [\"minter\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const parsedRequests: FilledSignaturePayload1155WithTokenId[] =\n      payloadsToSign.map((m) => Signature1155PayloadInputWithTokenId.parse(m));\n\n    const metadatas = parsedRequests.map((r) => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    return await Promise.all(\n      parsedRequests.map(async (m, i) => {\n        const uri = uris[i];\n        const finalPayload = Signature1155PayloadOutput.parse({\n          ...m,\n          uri,\n        });\n        const signature = await this.contractWrapper.signTypedData(\n          signer,\n          {\n            name: \"TokenERC1155\",\n            version: \"1\",\n            chainId,\n            verifyingContract: this.contractWrapper.readContract.address,\n          },\n          { MintRequest: MintRequest1155 }, // TYPEHASH\n          await this.mapPayloadToContractStruct(finalPayload),\n        );\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri1155,\n  ): Promise<ITokenERC1155.MintRequestStructOutput> {\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    return {\n      to: mintRequest.to,\n      tokenId: mintRequest.tokenId,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n    } as ITokenERC1155.MintRequestStructOutput;\n  }\n}\n","import { TokensLazyMintedEvent } from \"contracts/LazyMint\";\nimport { detectContractFeature } from \"../../common/feature-detection\";\nimport { uploadOrExtractURIs } from \"../../common/nft\";\nimport {\n  FEATURE_EDITION_DROPPABLE,\n  FEATURE_EDITION_REVEALABLE,\n} from \"../../constants/erc1155-features\";\nimport { NFTMetadata, NFTMetadataOrUri } from \"../../schema/tokens/common\";\nimport {\n  BaseClaimConditionERC1155,\n  BaseDelayedRevealERC1155,\n  BaseDropERC1155,\n} from \"../../types/eips\";\nimport { UploadProgressEvent } from \"../../types/events\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { TransactionResultWithId } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { Erc1155 } from \"./erc-1155\";\nimport { Erc1155Claimable } from \"./erc-1155-claimable\";\nimport { DelayedReveal } from \"./delayed-reveal\";\n\nexport class Erc1155Droppable implements DetectableFeature {\n  featureName = FEATURE_EDITION_DROPPABLE.name;\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.edition.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.edition.drop.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n  public revealer: DelayedReveal<BaseDelayedRevealERC1155> | undefined;\n\n  /**\n   * Claim tokens and configure claim conditions\n   * @remarks Let users claim NFTs. Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const quantity = 10;\n   * const tokenId = 0;\n   * await contract.edition.drop.claim.to(\"0x...\", 0, quantity);\n   * ```\n   */\n  public claim: Erc1155Claimable | undefined;\n\n  private contractWrapper: ContractWrapper<BaseDropERC1155>;\n  private erc1155: Erc1155;\n  private storage: IStorage;\n\n  constructor(\n    erc1155: Erc1155,\n    contractWrapper: ContractWrapper<BaseDropERC1155>,\n    storage: IStorage,\n  ) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n\n    this.storage = storage;\n    this.claim = this.detectErc1155Claimable();\n    this.revealer = this.detectErc721Revealable();\n  }\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.edition.drop.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  public async lazyMint(\n    metadatas: NFTMetadataOrUri[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const startFileNumber = await this.erc1155.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(\n      metadatas,\n      this.storage,\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n      options,\n    );\n    // ensure baseUri is the same for the entire batch\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n    for (let i = 0; i < batch.length; i++) {\n      const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n      if (baseUri !== uri) {\n        throw new Error(\n          `Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`,\n        );\n      }\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.length,\n      `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`,\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc1155.getTokenMetadata(id),\n      });\n    }\n    return results;\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private detectErc1155Claimable(): Erc1155Claimable | undefined {\n    if (\n      detectContractFeature<BaseClaimConditionERC1155>(\n        this.contractWrapper,\n        \"ERC1155Claimable\",\n      )\n    ) {\n      return new Erc1155Claimable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n\n  private detectErc721Revealable():\n    | DelayedReveal<BaseDelayedRevealERC1155>\n    | undefined {\n    if (\n      detectContractFeature<BaseDelayedRevealERC1155>(\n        this.contractWrapper,\n        \"ERC1155Revealable\",\n      )\n    ) {\n      return new DelayedReveal(\n        this.contractWrapper,\n        this.storage,\n        FEATURE_EDITION_REVEALABLE.name,\n        () => this.erc1155.nextTokenIdToMint(),\n      );\n    }\n    return undefined;\n  }\n}\n","import { DropErc1155ClaimConditions } from \"./drop-erc1155-claim-conditions\";\nimport { FEATURE_NFT_CLAIMABLE } from \"../../constants/erc721-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { BaseClaimConditionERC1155 } from \"../../types/eips\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport { CustomContractSchema } from \"../../schema/contracts/custom\";\nimport { ClaimVerification } from \"../../types/claim-conditions/claim-conditions\";\nimport { BigNumberish } from \"ethers\";\nimport { TransactionResult } from \"../types\";\nimport { TransactionTask } from \"./TransactionTask\";\n\nexport class Erc1155Claimable implements DetectableFeature {\n  featureName = FEATURE_NFT_CLAIMABLE.name;\n\n  public conditions: DropErc1155ClaimConditions<BaseClaimConditionERC1155>;\n  private contractWrapper: ContractWrapper<BaseClaimConditionERC1155>;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<BaseClaimConditionERC1155>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n\n    const metadata = new ContractMetadata(\n      this.contractWrapper,\n      CustomContractSchema,\n      this.storage,\n    );\n    this.conditions = new DropErc1155ClaimConditions(\n      contractWrapper,\n      metadata,\n      this.storage,\n    );\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   */\n  public async getClaimTransaction(\n    destinationAddress: string,\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    checkERC20Allowance = true, // TODO split up allowance checks\n    claimData?: ClaimVerification,\n  ): Promise<TransactionTask> {\n    let claimVerification = claimData;\n    if (this.conditions && !claimData) {\n      claimVerification = await this.conditions.prepareClaim(\n        tokenId,\n        quantity,\n        checkERC20Allowance,\n      );\n    }\n    if (!claimVerification) {\n      throw new Error(\n        \"Claim verification Data is required - either pass it in as 'claimData' or set claim conditions via 'conditions.set()'\",\n      );\n    }\n    return TransactionTask.make({\n      contractWrapper: this.contractWrapper,\n      functionName: \"claim\",\n      args: [\n        destinationAddress,\n        tokenId,\n        quantity,\n        claimVerification.currencyAddress,\n        claimVerification.price,\n        claimVerification.proofs,\n        claimVerification.maxQuantityPerTransaction,\n      ],\n      overrides: claimVerification.overrides,\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.edition.drop.claim.to(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async to(\n    destinationAddress: string,\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n    claimData?: ClaimVerification,\n  ): Promise<TransactionResult> {\n    let claimVerification = claimData;\n    if (this.conditions && !claimData) {\n      claimVerification = await this.conditions.prepareClaim(\n        tokenId,\n        quantity,\n        checkERC20Allowance,\n      );\n    }\n\n    if (!claimVerification) {\n      throw new Error(\n        \"Claim verification Data is required - either pass it in as 'claimData' or set claim conditions via 'conditions.set()'\",\n      );\n    }\n\n    const tx = await this.getClaimTransaction(\n      destinationAddress,\n      tokenId,\n      quantity,\n      checkERC20Allowance,\n      claimData,\n    );\n    return await tx.execute();\n  }\n}\n","import { IBurnableERC1155 } from \"contracts/IBurnableERC1155\";\nimport { BigNumberish } from \"ethers\";\nimport { FEATURE_EDITION_BURNABLE } from \"../../constants/erc1155-features\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { TransactionResult } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\n\nexport class Erc1155Burnable implements DetectableFeature {\n  featureName = FEATURE_EDITION_BURNABLE.name;\n\n  private contractWrapper: ContractWrapper<IBurnableERC1155>;\n\n  constructor(contractWrapper: ContractWrapper<IBurnableERC1155>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from the connected wallet\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of the NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.tokens(tokenId, amount);\n   * ```\n   */\n  public async tokens(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionResult> {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.from(account, tokenId, amount);\n  }\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from a specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenId - the tokenId to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of this NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.from(account, tokenId, amount);\n   * ```\n   */\n  public async from(\n    account: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        account,\n        tokenId,\n        amount,\n      ]),\n    };\n  }\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the connected wallet\n   *\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batch(tokenIds, amounts);\n   * ```\n   */\n  public async batch(\n    tokenIds: BigNumberish[],\n    amounts: BigNumberish[],\n  ): Promise<TransactionResult> {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.batchFrom(account, tokenIds, amounts);\n  }\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batchFrom(account, tokenIds, amounts);\n   * ```\n   */\n  public async batchFrom(\n    account: string,\n    tokenIds: BigNumberish[],\n    amounts: BigNumberish[],\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burnBatch\", [\n        account,\n        tokenIds,\n        amounts,\n      ]),\n    };\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  IERC1155,\n  IERC165,\n  IERC721,\n  IMarketplace,\n  Marketplace,\n} from \"contracts\";\nimport {\n  BigNumber,\n  BigNumberish,\n  Contract,\n  ethers,\n  constants,\n  utils,\n} from \"ethers\";\nimport {\n  DirectListing,\n  NewDirectListing,\n  Offer,\n} from \"../../types/marketplace\";\nimport { ListingNotFoundError, WrongListingTypeError } from \"../../common\";\nimport { ListingType } from \"../../enums\";\nimport { TransactionResult, TransactionResultWithId } from \"../types\";\nimport {\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n  setErc20Allowance,\n} from \"../../common/currency\";\nimport { Price } from \"../../types/currency\";\nimport { fetchTokenMetadataForContract } from \"../../common/nft\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../../constants/contract\";\nimport {\n  handleTokenApproval,\n  isTokenApprovedForTransfer,\n  mapOffer,\n  validateNewListingParam,\n} from \"../../common/marketplace\";\nimport { IStorage } from \"../interfaces\";\nimport invariant from \"tiny-invariant\";\nimport { ListingAddedEvent } from \"contracts/Marketplace\";\nimport ERC1155Abi from \"../../../abis/IERC1155.json\";\nimport ERC721Abi from \"../../../abis/IERC721.json\";\nimport ERC165Abi from \"../../../abis/IERC165.json\";\n\n/**\n * Handles direct listings\n * @public\n */\nexport class MarketplaceDirect {\n  private contractWrapper: ContractWrapper<Marketplace>;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<Marketplace>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  public async getListing(listingId: BigNumberish): Promise<DirectListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(\n        this.getAddress(),\n        listingId.toString(),\n        \"Auction\",\n        \"Direct\",\n      );\n    }\n\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  public async getActiveOffer(\n    listingId: BigNumberish,\n    address: string,\n  ): Promise<Offer | undefined> {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.readContract.offers(\n      listingId,\n      address,\n    );\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(\n      this.contractWrapper.getProvider(),\n      BigNumber.from(listingId),\n      offers,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  public async createListing(\n    listing: NewDirectListing,\n  ): Promise<TransactionResultWithId> {\n    validateNewListingParam(listing);\n\n    await handleTokenApproval(\n      this.contractWrapper.getSignerOrProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.buyoutPricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"createListing\",\n      [\n        {\n          assetContract: listing.assetContractAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: listing.currencyContractAddress,\n          listingType: ListingType.Direct,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedPricePerToken,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime),\n        } as IMarketplace.ListingParametersStruct,\n      ],\n      {\n        // Higher gas limit for create listing\n        gasLimit: 500000,\n      },\n    );\n\n    const event = this.contractWrapper.parseLogs<ListingAddedEvent>(\n      \"ListingAdded\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.listingId,\n      receipt,\n    };\n  }\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   * @remarks Make an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n   *\n   * // The listing ID of the asset you want to offer on\n   * const listingId = 0;\n   * // The price you are willing to offer per token\n   * const pricePerToken = 1;\n   * // The quantity of tokens you want to receive for this offer\n   * const quantity = 1;\n   * // The address of the currency you are making the offer in (must be ERC-20)\n   * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n   *\n   * await contract.direct.makeOffer(\n   *   listingId,\n   *   quantity,\n   *   currencyContractAddress,\n   *   pricePerToken\n   * );\n   * ```\n   */\n  public async makeOffer(\n    listingId: BigNumberish,\n    quantityDesired: BigNumberish,\n    currencyContractAddress: string,\n    pricePerToken: Price,\n    expirationDate?: Date,\n  ): Promise<TransactionResult> {\n    if (isNativeToken(currencyContractAddress)) {\n      throw new Error(\n        \"You must use the wrapped native token address when making an offer with a native token\",\n      );\n    }\n\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      pricePerToken,\n      currencyContractAddress,\n    );\n\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      currencyContractAddress,\n      overrides,\n    );\n\n    let expirationTimestamp = ethers.constants.MaxUint256;\n    if (expirationDate) {\n      expirationTimestamp = BigNumber.from(\n        Math.floor(expirationDate.getTime() / 1000),\n      );\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"offer\",\n        [\n          listingId,\n          quantityDesired,\n          currencyContractAddress,\n          normalizedPrice,\n          expirationTimestamp,\n        ],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Accept an offer on a direct listing\n   *\n   * @remarks Accept an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const offeror = \"0x...\";\n   *\n   * await contract.direct.acceptOffer(listingId, offeror);\n   * ```\n   */\n  public async acceptOffer(\n    listingId: BigNumberish,\n    addressOfOfferor: string,\n  ): Promise<TransactionResult> {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(BigNumber.from(listingId));\n    const offer = await this.contractWrapper.readContract.offers(\n      listingId,\n      addressOfOfferor,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"acceptOffer\", [\n        listingId,\n        addressOfOfferor,\n        offer.currency,\n        offer.pricePerToken,\n      ]),\n    };\n  }\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired: BigNumberish,\n    receiver?: string,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const { valid, error } = await this.isStillValidListing(\n      listing,\n      quantityDesired,\n    );\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver\n      ? receiver\n      : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      listing.currencyContractAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"buy\",\n        [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  public async updateListing(\n    listing: DirectListing,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [\n        listing.id,\n        listing.quantity,\n        listing.buyoutPrice, // reserve price, doesn't matter for direct listing\n        listing.buyoutPrice,\n        listing.currencyContractAddress,\n        listing.startTimeInSeconds,\n        listing.secondsUntilEnd,\n      ]),\n    };\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  public async cancelListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"cancelDirectListing\",\n        [listingId],\n      ),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateListing(listingId: BigNumber): Promise<DirectListing> {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  public async mapListing(\n    listing: IMarketplace.ListingStruct,\n  ): Promise<DirectListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(\n        listing.assetContract,\n        this.contractWrapper.getProvider(),\n        listing.tokenId,\n        this.storage,\n      ),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct,\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  public async isStillValidListing(\n    listing: DirectListing,\n    quantity?: BigNumberish,\n  ): Promise<{ valid: boolean; error?: string }> {\n    const approved = await isTokenApprovedForTransfer(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      listing.sellerAddress,\n    );\n\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`,\n      };\n    }\n\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(\n      listing.assetContractAddress,\n      ERC165Abi,\n      provider,\n    ) as IERC165;\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(\n        listing.assetContractAddress,\n        ERC721Abi,\n        provider,\n      ) as IERC721;\n      const valid =\n        (await asset.ownerOf(listing.tokenId)).toLowerCase() ===\n        listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid\n          ? undefined\n          : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`,\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(\n        listing.assetContractAddress,\n        ERC1155Abi,\n        provider,\n      ) as IERC1155;\n      const balance = await asset.balanceOf(\n        listing.sellerAddress,\n        listing.tokenId,\n      );\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid\n          ? undefined\n          : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`,\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\",\n      };\n    }\n  }\n}\n","import { BigNumber, BigNumberish, Contract, providers } from \"ethers\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../constants/contract\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { SignerOrProvider } from \"../core\";\nimport {\n  NewAuctionListing,\n  NewDirectListing,\n  Offer,\n} from \"../types/marketplace\";\nimport invariant from \"tiny-invariant\";\nimport { fetchCurrencyValue } from \"./currency\";\nimport { MAX_BPS } from \"../schema/shared\";\nimport { IERC1155, IERC165, IERC721 } from \"contracts\";\nimport ERC1155Abi from \"../../abis/IERC1155.json\";\nimport ERC721Abi from \"../../abis/IERC721.json\";\nimport ERC165Abi from \"../../abis/IERC165.json\";\n\n/**\n * This method checks if the given token is approved for the transferrerContractAddress contract.\n * This is particularly useful for contracts that need to transfer NFTs on the users' behalf\n *\n * @internal\n * @param provider - The connected provider\n * @param transferrerContractAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param owner - The address of the account that owns the token.\n * @returns - True if the transferrerContractAddress is approved on the token, false otherwise.\n */\nexport async function isTokenApprovedForTransfer(\n  provider: providers.Provider,\n  transferrerContractAddress: string,\n  assetContract: string,\n  tokenId: BigNumberish,\n  owner: string,\n): Promise<boolean> {\n  try {\n    const erc165 = new Contract(assetContract, ERC165Abi, provider) as IERC165;\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(assetContract, ERC721Abi, provider) as IERC721;\n\n      const approved = await asset.isApprovedForAll(\n        owner,\n        transferrerContractAddress,\n      );\n      if (approved) {\n        return true;\n      }\n      return (\n        (await asset.getApproved(tokenId)).toLowerCase() ===\n        transferrerContractAddress.toLowerCase()\n      );\n    } else if (isERC1155) {\n      const asset = new Contract(\n        assetContract,\n        ERC1155Abi,\n        provider,\n      ) as IERC1155;\n      return await asset.isApprovedForAll(owner, transferrerContractAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err: any) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param signerOrProvider\n * @param marketplaceAddress\n * @param assetContract\n * @param tokenId\n * @param from\n */\nexport async function handleTokenApproval(\n  signerOrProvider: SignerOrProvider,\n  marketplaceAddress: string,\n  assetContract: string,\n  tokenId: BigNumberish,\n  from: string,\n): Promise<void> {\n  const erc165 = new Contract(\n    assetContract,\n    ERC165Abi,\n    signerOrProvider,\n  ) as IERC165;\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  // check for token approval\n  if (isERC721) {\n    const asset = new ContractWrapper<IERC721>(\n      signerOrProvider,\n      assetContract,\n      ERC721Abi,\n      {},\n    );\n    const approved = await asset.readContract.isApprovedForAll(\n      from,\n      marketplaceAddress,\n    );\n    if (!approved) {\n      const isTokenApproved =\n        (await asset.readContract.getApproved(tokenId)).toLowerCase() ===\n        marketplaceAddress.toLowerCase();\n\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [\n          marketplaceAddress,\n          true,\n        ]);\n      }\n    }\n  } else if (isERC1155) {\n    const asset = new ContractWrapper<IERC1155>(\n      signerOrProvider,\n      assetContract,\n      ERC1155Abi,\n      {},\n    );\n\n    const approved = await asset.readContract.isApprovedForAll(\n      from,\n      marketplaceAddress,\n    );\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [\n        marketplaceAddress,\n        true,\n      ]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nexport function validateNewListingParam(\n  param: NewDirectListing | NewAuctionListing,\n) {\n  invariant(\n    param.assetContractAddress !== undefined &&\n      param.assetContractAddress !== null,\n    \"Asset contract address is required\",\n  );\n  invariant(\n    param.buyoutPricePerToken !== undefined &&\n      param.buyoutPricePerToken !== null,\n    \"Buyout price is required\",\n  );\n  invariant(\n    param.listingDurationInSeconds !== undefined &&\n      param.listingDurationInSeconds !== null,\n    \"Listing duration is required\",\n  );\n  invariant(\n    param.startTimestamp !== undefined && param.startTimestamp !== null,\n    \"Start time is required\",\n  );\n  invariant(\n    param.tokenId !== undefined && param.tokenId !== null,\n    \"Token ID is required\",\n  );\n  invariant(\n    param.quantity !== undefined && param.quantity !== null,\n    \"Quantity is required\",\n  );\n\n  switch (param.type) {\n    case \"NewAuctionListing\": {\n      invariant(\n        param.reservePricePerToken !== undefined &&\n          param.reservePricePerToken !== null,\n        \"Reserve price is required\",\n      );\n    }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer\n * @returns - An `Offer` object\n */\nexport async function mapOffer(\n  provider: providers.Provider,\n  listingId: BigNumber,\n  offer: any,\n): Promise<Offer> {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(\n      provider,\n      offer.currency,\n      (offer.quantityWanted as BigNumber).mul(offer.pricePerToken as BigNumber),\n    ),\n    listingId,\n  } as Offer;\n}\n\nexport function isWinningBid(\n  winningPrice: BigNumberish,\n  newBidPrice: BigNumberish,\n  bidBuffer: BigNumberish,\n): boolean {\n  bidBuffer = BigNumber.from(bidBuffer);\n  winningPrice = BigNumber.from(winningPrice);\n  newBidPrice = BigNumber.from(newBidPrice);\n  if (winningPrice.eq(BigNumber.from(0))) {\n    return false;\n  }\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMarketplace, Marketplace } from \"contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { BigNumber, BigNumberish, ethers, constants } from \"ethers\";\nimport {\n  AuctionListing,\n  NewAuctionListing,\n  Offer,\n} from \"../../types/marketplace\";\nimport {\n  AuctionAlreadyStartedError,\n  AuctionHasNotEndedError,\n  ListingNotFoundError,\n  WrongListingTypeError,\n} from \"../../common\";\nimport { ListingType } from \"../../enums\";\nimport {\n  fetchCurrencyMetadata,\n  fetchCurrencyValue,\n  normalizePriceValue,\n  setErc20Allowance,\n} from \"../../common/currency\";\nimport { fetchTokenMetadataForContract } from \"../../common/nft\";\nimport { TransactionResult, TransactionResultWithId } from \"../types\";\nimport {\n  handleTokenApproval,\n  isWinningBid,\n  mapOffer,\n  validateNewListingParam,\n} from \"../../common/marketplace\";\nimport { Price } from \"../../types/currency\";\nimport invariant from \"tiny-invariant\";\nimport { ListingAddedEvent } from \"contracts/Marketplace\";\n\n/**\n * Handles auction listings\n * @public\n */\nexport class MarketplaceAuction {\n  private contractWrapper: ContractWrapper<Marketplace>;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<Marketplace>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  public async getListing(listingId: BigNumberish): Promise<AuctionListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(\n        this.getAddress(),\n        listingId.toString(),\n        \"Direct\",\n        \"Auction\",\n      );\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinningBid(\n    listingId: BigNumberish,\n  ): Promise<Offer | undefined> {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(\n      this.contractWrapper.getProvider(),\n      BigNumber.from(listingId),\n      offers,\n    );\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinner(listingId: BigNumberish): Promise<string> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(\n      this.contractWrapper.readContract.filters.AuctionClosed(),\n    );\n    const auction = closedAuctions.find((a) =>\n      a.args.listingId.eq(BigNumber.from(listingId)),\n    );\n    if (!auction) {\n      throw new Error(\n        `Could not find auction with listingId ${listingId} in closed auctions`,\n      );\n    }\n    return auction.args.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  public async createListing(\n    listing: NewAuctionListing,\n  ): Promise<TransactionResultWithId> {\n    validateNewListingParam(listing);\n\n    await handleTokenApproval(\n      this.contractWrapper.getSignerOrProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.buyoutPricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    const normalizedReservePrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.reservePricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"createListing\",\n      [\n        {\n          assetContract: listing.assetContractAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: listing.currencyContractAddress,\n          listingType: ListingType.Auction,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedReservePrice,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime),\n        } as IMarketplace.ListingParametersStruct,\n      ],\n      {\n        // Higher gas limit for create listing\n        gasLimit: 500000,\n      },\n    );\n\n    const event = this.contractWrapper.parseLogs<ListingAddedEvent>(\n      \"ListingAdded\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.listingId,\n      receipt,\n    };\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n\n    const currencyMetadata = await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      listing.currencyContractAddress,\n    );\n\n    return this.makeBid(\n      listingId,\n      ethers.utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals),\n    );\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  public async makeBid(\n    listingId: BigNumberish,\n    pricePerToken: Price,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      pricePerToken,\n      listing.currencyContractAddress,\n    );\n    if (normalizedPrice.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    const bidBuffer = await this.contractWrapper.readContract.bidBufferBps();\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinnner = isWinningBid(\n        winningBid.pricePerToken,\n        normalizedPrice,\n        bidBuffer,\n      );\n\n      invariant(\n        isWinnner,\n        \"Bid price is too low based on the current winning bid and the bid buffer\",\n      );\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(\n        tokenPrice.gte(reservePrice),\n        \"Bid price is too low based on reserve price\",\n      );\n    }\n\n    const quantity = BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      listing.currencyContractAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"offer\",\n        [\n          listingId,\n          listing.quantity,\n          listing.currencyContractAddress,\n          normalizedPrice,\n          ethers.constants.MaxUint256,\n        ],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  public async cancelListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    if (now.gt(startTime) && offers.offeror !== constants.AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [\n        BigNumber.from(listingId),\n        await this.contractWrapper.getSignerAddress(),\n      ]),\n    };\n  }\n\n  /**\n   * Close the Auction\n   *\n   * @remarks Closes the Auction and executes the sale.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  public async closeListing(\n    listingId: BigNumberish,\n    closeFor?: string,\n  ): Promise<TransactionResult> {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [\n          BigNumber.from(listingId),\n          closeFor,\n        ]),\n      };\n    } catch (err: any) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(\n          listingId.toString(),\n          listing.endTimeInEpochSeconds.toString(),\n        );\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  public async updateListing(\n    listing: AuctionListing,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [\n        listing.id,\n        listing.quantity,\n        listing.reservePrice,\n        listing.buyoutPrice,\n        listing.currencyContractAddress,\n        listing.startTimeInEpochSeconds,\n        listing.endTimeInEpochSeconds,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateListing(listingId: BigNumber): Promise<AuctionListing> {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  public async mapListing(\n    listing: IMarketplace.ListingStruct,\n  ): Promise<AuctionListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(\n        listing.assetContract,\n        this.contractWrapper.getProvider(),\n        listing.tokenId,\n        this.storage,\n      ),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.reservePricePerToken,\n      ),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction,\n    };\n  }\n}\n","import { NetworkOrSignerOrProvider, ValidContractClass } from \"../types\";\nimport { z } from \"zod\";\nimport { ContractRegistry } from \"./registry\";\nimport { getContractAddressByChainId } from \"../../constants/addresses\";\nimport { ContractFactory } from \"./factory\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport {\n  Edition,\n  EditionDrop,\n  Marketplace,\n  NFTCollection,\n  NFTDrop,\n  Pack,\n  SignatureDrop,\n  Split,\n  Token,\n  Vote,\n} from \"../../contracts\";\nimport {\n  MarketplaceContractDeployMetadata,\n  MultiwrapContractDeployMetadata,\n  NFTContractDeployMetadata,\n  SplitContractDeployMetadata,\n  TokenContractDeployMetadata,\n  VoteContractDeployMetadata,\n} from \"../../types/deploy/deploy-metadata\";\nimport { TokenDrop } from \"../../contracts/token-drop\";\nimport { Multiwrap } from \"../../contracts/multiwrap\";\nimport { ThirdwebSDK } from \"../sdk\";\nimport invariant from \"tiny-invariant\";\nimport {\n  extractConstructorParamsFromAbi,\n  extractFunctionParamsFromAbi,\n  fetchExtendedReleaseMetadata,\n  fetchPreDeployMetadata,\n} from \"../../common/index\";\nimport { BigNumber, BytesLike, ContractInterface, ethers } from \"ethers\";\nimport { FactoryDeploymentSchema } from \"../../schema/contracts/custom\";\n\n/**\n * Handles deploying new contracts\n * @public\n */\nexport class ContractDeployer extends RPCConnectionHandler {\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getFactory} instead\n   */\n  private _factory: Promise<ContractFactory> | undefined;\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getRegistry} instead\n   */\n  private _registry: Promise<ContractRegistry> | undefined;\n  private storage: IStorage;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n    storage: IStorage,\n  ) {\n    super(network, options);\n    this.storage = storage;\n  }\n\n  /**\n   * Deploys an NFT Collection contract\n   *\n   * @remarks Deploys an NFT Collection contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployNFTCollection({\n   *   name: \"My Collection\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployNFTCollection(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(\n      NFTCollection.contractType,\n      metadata,\n    );\n  }\n\n  /**\n   * Deploys a new NFTDrop contract\n   *\n   * @remarks Deploys an NFT Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployNFTDrop({\n   *   name: \"My Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployNFTDrop(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(NFTDrop.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new SignatureDrop contract\n   *\n   * @remarks Deploys a SignatureDrop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deploySignatureDrop({\n   *   name: \"My Signature Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deploySignatureDrop(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(\n      SignatureDrop.contractType,\n      metadata,\n    );\n  }\n\n  /**\n   * Deploys a new Multiwrap contract\n   *\n   * @remarks Deploys a Multiwrap contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployMultiwrap({\n   *   name: \"My Multiwrap\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   * @beta\n   */\n  public async deployMultiwrap(\n    metadata: MultiwrapContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Multiwrap.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Edition contract\n   *\n   * @remarks Deploys an Edition contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployEdition({\n   *   name: \"My Edition\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployEdition(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Edition.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new EditionDrop contract\n   *\n   * @remarks Deploys an Edition Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployEditionDrop({\n   *   name: \"My Edition Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployEditionDrop(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    const parsed = EditionDrop.schema.deploy.parse(metadata);\n    return await this.deployBuiltInContract(EditionDrop.contractType, parsed);\n  }\n\n  /**\n   * Deploys a new Token contract\n   *\n   * @remarks Deploys a Token contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployToken({\n   *   name: \"My Token\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployToken(\n    metadata: TokenContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Token.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Token Drop contract\n   *\n   * @remarks Deploys a Token Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployTokenDrop({\n   *   name: \"My Token Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployTokenDrop(\n    metadata: TokenContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(TokenDrop.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Marketplace contract\n   *\n   * @remarks Deploys a Marketplace contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployMarketplace({\n   *   name: \"My Marketplace\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployMarketplace(\n    metadata: MarketplaceContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Marketplace.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Pack contract\n   *\n   * @remarks Deploys a Pack contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployPack({\n   *   name: \"My Pack\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployPack(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Pack.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Split contract\n   *\n   * @remarks Deploys a Split contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deploySplit({\n   *   name: \"My Split\",\n   *   primary_sale_recipient: \"your-address\",\n   *   recipients: [\n   *    {\n   *      address: \"your-address\",\n   *      sharesBps: 80 * 100, // 80%\n   *    },\n   *    {\n   *      address: \"another-address\",\n   *      sharesBps: 20 * 100, // 20%\n   *    },\n   *   ],\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deploySplit(\n    metadata: SplitContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Split.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Vote contract\n   *\n   * @remarks Deploys an Vote contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployVote({\n   *   name: \"My Vote\",\n   *   primary_sale_recipient: \"your-address\",\n   *   voting_token_address: \"your-token-contract-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployVote(\n    metadata: VoteContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployBuiltInContract(Vote.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new contract\n   *\n   * @internal\n   * @param contractType - the type of contract to deploy\n   * @param contractMetadata - the metadata to deploy the contract with\n   * @returns a promise of the address of the newly deployed contract\n   */\n  public async deployBuiltInContract<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    contractMetadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n  ): Promise<string> {\n    const factory = await this.getFactory();\n    return await factory.deploy(contractType, contractMetadata);\n  }\n\n  /**\n   * Deploy any released contract by its name\n   * @param releaserAddress the address of the releaser\n   * @param contractName the name of the contract to deploy\n   * @param constructorParams the constructor params to pass to the contract\n   */\n  public async deployReleasedContract(\n    releaserAddress: string,\n    contractName: string,\n    constructorParams: any[],\n  ): Promise<string> {\n    const release = await new ThirdwebSDK(\"polygon\")\n      .getPublisher()\n      .getLatest(releaserAddress, contractName);\n    return await this.deployContractFromUri(\n      release.metadataUri,\n      constructorParams,\n    );\n  }\n\n  /**\n   * Deploy a proxy contract of a given implementation via the given factory\n   * @param factoryAddress\n   * @param implementationAddress\n   * @param implementationAbi\n   * @param initializerFunction\n   * @param initializerArgs\n   */\n  public async deployViaFactory(\n    factoryAddress: string,\n    implementationAddress: string,\n    implementationAbi: ContractInterface,\n    initializerFunction: string,\n    initializerArgs: any[],\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"signer is required\");\n    // TODO only require factory interface here - IProxyFactory\n    const proxyFactory = new ContractFactory(\n      factoryAddress,\n      this.getSignerOrProvider(),\n      this.storage,\n      {},\n    );\n    return await proxyFactory.deployProxyByImplementation(\n      implementationAddress,\n      implementationAbi,\n      initializerFunction,\n      initializerArgs,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  public async getRegistry(): Promise<ContractRegistry> {\n    // if we already have a registry just return it back\n    if (this._registry) {\n      return this._registry;\n    }\n\n    // otherwise get the registry address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._registry\" has to be assigned to the promise upfront.\n    return (this._registry = this.getProvider()\n      .getNetwork()\n      .then(async ({ chainId }) => {\n        const registryAddress = getContractAddressByChainId(\n          chainId,\n          \"twRegistry\",\n        );\n        return new ContractRegistry(\n          registryAddress,\n          this.getSignerOrProvider(),\n          this.options,\n        );\n      }));\n  }\n\n  private async getFactory(): Promise<ContractFactory> {\n    // if we already have a factory just return it back\n    if (this._factory) {\n      return this._factory;\n    }\n\n    // otherwise get the factory address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._factory\" has to be assigned to the promise upfront.\n    return (this._factory = this.getProvider()\n      .getNetwork()\n      .then(async ({ chainId }) => {\n        const factoryAddress = getContractAddressByChainId(\n          chainId,\n          \"twFactory\",\n        );\n        return new ContractFactory(\n          factoryAddress,\n          this.getSignerOrProvider(),\n          this.storage,\n          this.options,\n        );\n      }));\n  }\n\n  public override updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n\n  private updateContractSignerOrProvider() {\n    // has to be promises now\n    this._factory?.then((factory) => {\n      factory.updateSignerOrProvider(this.getSignerOrProvider());\n    });\n    // has to be promises now\n    this._registry?.then((registry) => {\n      registry.updateSignerOrProvider(this.getSignerOrProvider());\n    });\n  }\n\n  /**\n   * @internal\n   * @param publishMetadataUri\n   * @param constructorParamValues\n   */\n  public async deployContractFromUri(\n    publishMetadataUri: string,\n    constructorParamValues: any[],\n  ) {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const compilerMetadata = await fetchPreDeployMetadata(\n      publishMetadataUri,\n      this.storage,\n    );\n    let isDeployableViaFactory;\n    let factoryDeploymentData;\n    try {\n      const extendedMetadata = await fetchExtendedReleaseMetadata(\n        publishMetadataUri,\n        this.storage,\n      );\n      isDeployableViaFactory = extendedMetadata.isDeployableViaFactory;\n      factoryDeploymentData = FactoryDeploymentSchema.parse(\n        extendedMetadata.factoryDeploymentData,\n      );\n    } catch (e) {\n      // not a factory deployment, ignore\n    }\n\n    if (isDeployableViaFactory && factoryDeploymentData) {\n      const chainId = (await this.getProvider().getNetwork()).chainId;\n      invariant(\n        factoryDeploymentData.factoryAddresses,\n        \"factoryAddresses is required\",\n      );\n      invariant(\n        factoryDeploymentData.implementationAddresses,\n        \"implementationAddresses is required\",\n      );\n      const factoryAddress = factoryDeploymentData.factoryAddresses[chainId];\n      const implementationAddress =\n        factoryDeploymentData.implementationAddresses[chainId];\n      invariant(\n        factoryAddress,\n        `factoryAddress not found for chainId '${chainId}'`,\n      );\n      invariant(\n        implementationAddress,\n        `implementationAddress not found for chainId '${chainId}'`,\n      );\n      invariant(\n        factoryDeploymentData.implementationInitializerFunction,\n        `implementationInitializerFunction not set'`,\n      );\n      const initializerParamTypes = extractFunctionParamsFromAbi(\n        compilerMetadata.abi,\n        factoryDeploymentData.implementationInitializerFunction,\n      ).map((p) => p.type);\n      const paramValues = this.convertParamValues(\n        initializerParamTypes,\n        constructorParamValues,\n      );\n      return await this.deployViaFactory(\n        factoryAddress,\n        implementationAddress,\n        compilerMetadata.abi,\n        factoryDeploymentData.implementationInitializerFunction,\n        paramValues,\n      );\n    }\n\n    const bytecode = compilerMetadata.bytecode.startsWith(\"0x\")\n      ? compilerMetadata.bytecode\n      : `0x${compilerMetadata.bytecode}`;\n    if (!ethers.utils.isHexString(bytecode)) {\n      throw new Error(`Contract bytecode is invalid.\\n\\n${bytecode}`);\n    }\n    const constructorParamTypes = extractConstructorParamsFromAbi(\n      compilerMetadata.abi,\n    ).map((p) => p.type);\n    const paramValues = this.convertParamValues(\n      constructorParamTypes,\n      constructorParamValues,\n    );\n    return this.deployContractWithAbi(\n      compilerMetadata.abi,\n      bytecode,\n      paramValues,\n    );\n  }\n\n  private convertParamValues(\n    constructorParamTypes: string[],\n    constructorParamValues: any[],\n  ) {\n    // check that both arrays are same length\n    if (constructorParamTypes.length !== constructorParamValues.length) {\n      throw Error(\"Passed the wrong number of constructor arguments\");\n    }\n    return constructorParamTypes.map((p, index) => {\n      if (p === \"tuple\" || p.endsWith(\"[]\")) {\n        if (typeof constructorParamValues[index] === \"string\") {\n          return JSON.parse(constructorParamValues[index]);\n        } else {\n          return constructorParamValues[index];\n        }\n      }\n      if (p === \"bytes32\") {\n        invariant(\n          ethers.utils.isHexString(constructorParamValues[index]),\n          `Could not parse bytes32 value. Expected valid hex string but got \"${constructorParamValues[index]}\".`,\n        );\n        return ethers.utils.hexZeroPad(constructorParamValues[index], 32);\n      }\n      if (p.startsWith(\"bytes\")) {\n        invariant(\n          ethers.utils.isHexString(constructorParamValues[index]),\n          `Could not parse bytes value. Expected valid hex string but got \"${constructorParamValues[index]}\".`,\n        );\n        return ethers.utils.toUtf8Bytes(constructorParamValues[index]);\n      }\n      if (p.startsWith(\"uint\") || p.startsWith(\"int\")) {\n        return BigNumber.from(constructorParamValues[index].toString());\n      }\n      return constructorParamValues[index];\n    });\n  }\n\n  /**\n   * @internal\n   * @param abi\n   * @param bytecode\n   * @param constructorParams\n   */\n  public async deployContractWithAbi(\n    abi: ContractInterface,\n    bytecode: BytesLike | { object: string },\n    constructorParams: Array<any>,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"Signer is required to deploy contracts\");\n    const deployer = await new ethers.ContractFactory(abi, bytecode)\n      .connect(signer)\n      .deploy(...constructorParams);\n    const deployedContract = await deployer.deployed();\n    // TODO parse transaction receipt\n    return deployedContract.address;\n  }\n}\n","import { TWRegistry, TWRegistry__factory } from \"contracts\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { NetworkOrSignerOrProvider } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { constants, utils } from \"ethers\";\nimport { TransactionResult } from \"..\";\n\n/**\n * @internal\n */\nexport class ContractRegistry extends ContractWrapper<TWRegistry> {\n  constructor(\n    registryAddress: string,\n    network: NetworkOrSignerOrProvider,\n    options?: SDKOptions,\n  ) {\n    super(network, registryAddress, TWRegistry__factory.abi, options);\n  }\n\n  public async getContractAddresses(walletAddress: string) {\n    // TODO @fixme the filter here is necessary because for some reason getAll returns a 0x0 address for the first entry\n    return (await this.readContract.getAll(walletAddress)).filter(\n      (adr) =>\n        utils.isAddress(adr) && adr.toLowerCase() !== constants.AddressZero,\n    );\n  }\n\n  public async addContract(\n    contractAddress: string,\n  ): Promise<TransactionResult> {\n    return await this.addContracts([contractAddress]);\n  }\n\n  public async addContracts(\n    contractAddresses: string[],\n  ): Promise<TransactionResult> {\n    const deployerAddress = await this.getSignerAddress();\n\n    const encoded: string[] = [];\n    contractAddresses.forEach((address) => {\n      encoded.push(\n        this.readContract.interface.encodeFunctionData(\"add\", [\n          deployerAddress,\n          address,\n        ]),\n      );\n    });\n\n    return {\n      receipt: await this.multiCall(encoded),\n    };\n  }\n\n  public async removeContract(\n    contractAddress: string,\n  ): Promise<TransactionResult> {\n    return await this.removeContracts([contractAddress]);\n  }\n\n  public async removeContracts(\n    contractAddresses: string[],\n  ): Promise<TransactionResult> {\n    const deployerAddress = await this.getSignerAddress();\n\n    const encoded: string[] = [];\n    contractAddresses.forEach((address) => {\n      encoded.push(\n        this.readContract.interface.encodeFunctionData(\"remove\", [\n          deployerAddress,\n          address,\n        ]),\n      );\n    });\n\n    return {\n      receipt: await this.multiCall(encoded),\n    };\n  }\n}\n","import { TWFactory, TWFactory__factory } from \"contracts\";\nimport {\n  BigNumber,\n  constants,\n  Contract,\n  ContractInterface,\n  ethers,\n} from \"ethers\";\nimport { z } from \"zod\";\nimport { CONTRACTS_MAP, REMOTE_CONTRACT_NAME } from \"../../contracts/maps\";\nimport { Edition } from \"../../contracts/edition\";\nimport { EditionDrop } from \"../../contracts/edition-drop\";\nimport { NFTCollection } from \"../../contracts/nft-collection\";\nimport { NFTDrop } from \"../../contracts/nft-drop\";\nimport { Marketplace } from \"../../contracts/marketplace\";\nimport { SignatureDrop } from \"../../contracts/signature-drop\";\nimport { Pack } from \"../../contracts/pack\";\nimport { Split } from \"../../contracts/split\";\nimport { Vote } from \"../../contracts/vote\";\nimport { Token } from \"../../contracts/token\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { NetworkOrSignerOrProvider, ValidContractClass } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\n\nimport {\n  CONTRACT_ADDRESSES,\n  OZ_DEFENDER_FORWARDER_ADDRESS,\n  SUPPORTED_CHAIN_IDS,\n} from \"../../constants\";\nimport { TokenDrop } from \"../../contracts/token-drop\";\nimport { ProxyDeployedEvent } from \"contracts/TWFactory\";\nimport { Multiwrap } from \"../../contracts/multiwrap\";\n\n/**\n * @internal\n */\nexport class ContractFactory extends ContractWrapper<TWFactory> {\n  private storage: IStorage;\n\n  constructor(\n    factoryAddr: string,\n    network: NetworkOrSignerOrProvider,\n    storage: IStorage,\n    options?: SDKOptions,\n  ) {\n    super(network, factoryAddr, TWFactory__factory.abi, options);\n    this.storage = storage;\n  }\n\n  public async deploy<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    contractMetadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n  ): Promise<string> {\n    const contract = CONTRACTS_MAP[contractType];\n    const metadata = contract.schema.deploy.parse(contractMetadata);\n\n    // TODO: is there any special pre-processing we need to do before uploading?\n    const contractURI = await this.storage.uploadMetadata(\n      metadata,\n      this.readContract.address,\n      await this.getSigner()?.getAddress(),\n    );\n\n    const encodedFunc = Contract.getInterface(\n      contract.contractAbi,\n    ).encodeFunctionData(\n      \"initialize\",\n      await this.getDeployArguments(contractType, metadata, contractURI),\n    );\n\n    const contractName = REMOTE_CONTRACT_NAME[contractType];\n    const encodedType = ethers.utils.formatBytes32String(contractName);\n    let receipt;\n    try {\n      receipt = await this.sendTransaction(\"deployProxy\", [\n        encodedType,\n        encodedFunc,\n      ]);\n    } catch (e) {\n      // deploy might fail due to salt already used, fallback to deterministic deploy\n      const blockNumber = await this.getProvider().getBlockNumber();\n      receipt = await this.sendTransaction(\"deployProxyDeterministic\", [\n        encodedType,\n        encodedFunc,\n        ethers.utils.formatBytes32String(blockNumber.toString()),\n      ]);\n    }\n\n    const events = this.parseLogs<ProxyDeployedEvent>(\n      \"ProxyDeployed\",\n      receipt.logs,\n    );\n    if (events.length < 1) {\n      throw new Error(\"No ProxyDeployed event found\");\n    }\n\n    return events[0].args.proxy;\n  }\n\n  // TODO once IContractFactory is implemented, this can be probably be moved to its own class\n  public async deployProxyByImplementation(\n    implementationAddress: string,\n    implementationAbi: ContractInterface,\n    initializerFunction: string,\n    initializerArgs: any[],\n  ): Promise<string> {\n    const encodedFunc = Contract.getInterface(\n      implementationAbi,\n    ).encodeFunctionData(initializerFunction, initializerArgs);\n\n    const blockNumber = await this.getProvider().getBlockNumber();\n    const receipt = await this.sendTransaction(\"deployProxyByImplementation\", [\n      implementationAddress,\n      encodedFunc,\n      ethers.utils.formatBytes32String(blockNumber.toString()),\n    ]);\n\n    const events = this.parseLogs<ProxyDeployedEvent>(\n      \"ProxyDeployed\",\n      receipt.logs,\n    );\n    if (events.length < 1) {\n      throw new Error(\"No ProxyDeployed event found\");\n    }\n\n    return events[0].args.proxy;\n  }\n\n  private async getDeployArguments<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    metadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n    contractURI: string,\n  ): Promise<any[]> {\n    let trustedForwarders = await this.getDefaultTrustedForwarders();\n    // override default forwarders if custom ones are passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders = metadata.trusted_forwarders;\n    }\n    switch (contractType) {\n      case NFTDrop.contractType:\n      case NFTCollection.contractType:\n        const erc721metadata = NFTDrop.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc721metadata.name,\n          erc721metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc721metadata.primary_sale_recipient,\n          erc721metadata.fee_recipient,\n          erc721metadata.seller_fee_basis_points,\n          erc721metadata.platform_fee_basis_points,\n          erc721metadata.platform_fee_recipient,\n        ];\n      case SignatureDrop.contractType:\n        const signatureDropmetadata =\n          SignatureDrop.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          signatureDropmetadata.name,\n          signatureDropmetadata.symbol,\n          contractURI,\n          trustedForwarders,\n          signatureDropmetadata.primary_sale_recipient,\n          signatureDropmetadata.fee_recipient,\n          signatureDropmetadata.seller_fee_basis_points,\n          signatureDropmetadata.platform_fee_basis_points,\n          signatureDropmetadata.platform_fee_recipient,\n        ];\n      case Multiwrap.contractType:\n        const multiwrapMetadata = Multiwrap.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          multiwrapMetadata.name,\n          multiwrapMetadata.symbol,\n          contractURI,\n          trustedForwarders,\n          multiwrapMetadata.fee_recipient,\n          multiwrapMetadata.seller_fee_basis_points,\n        ];\n      case EditionDrop.contractType:\n      case Edition.contractType:\n        const erc1155metadata = EditionDrop.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc1155metadata.name,\n          erc1155metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc1155metadata.primary_sale_recipient,\n          erc1155metadata.fee_recipient,\n          erc1155metadata.seller_fee_basis_points,\n          erc1155metadata.platform_fee_basis_points,\n          erc1155metadata.platform_fee_recipient,\n        ];\n      case TokenDrop.contractType:\n      case Token.contractType:\n        const erc20metadata = Token.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc20metadata.name,\n          erc20metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc20metadata.primary_sale_recipient,\n          erc20metadata.platform_fee_recipient,\n          erc20metadata.platform_fee_basis_points,\n        ];\n      case Vote.contractType:\n        const voteMetadata = Vote.schema.deploy.parse(metadata);\n        return [\n          voteMetadata.name,\n          contractURI,\n          trustedForwarders,\n          voteMetadata.voting_token_address,\n          voteMetadata.voting_delay_in_blocks,\n          voteMetadata.voting_period_in_blocks,\n          BigNumber.from(voteMetadata.proposal_token_threshold),\n          voteMetadata.voting_quorum_fraction,\n        ];\n      case Split.contractType:\n        const splitsMetadata = Split.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          contractURI,\n          trustedForwarders,\n          splitsMetadata.recipients.map((s) => s.address),\n          splitsMetadata.recipients.map((s) => BigNumber.from(s.sharesBps)),\n        ];\n      case Marketplace.contractType:\n        const marketplaceMetadata = Marketplace.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          contractURI,\n          trustedForwarders,\n          marketplaceMetadata.platform_fee_recipient,\n          marketplaceMetadata.platform_fee_basis_points,\n        ];\n      case Pack.contractType:\n        const packsMetadata = Pack.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          packsMetadata.name,\n          packsMetadata.symbol,\n          contractURI,\n          trustedForwarders,\n          packsMetadata.fee_recipient,\n          packsMetadata.seller_fee_basis_points,\n        ];\n      default:\n        return [];\n    }\n  }\n\n  private async getDefaultTrustedForwarders(): Promise<string[]> {\n    const chainId = await this.getChainID();\n    const chainEnum = SUPPORTED_CHAIN_IDS.find((c) => c === chainId);\n    const biconomyForwarder = chainEnum\n      ? CONTRACT_ADDRESSES[chainEnum].biconomyForwarder\n      : constants.AddressZero;\n    return biconomyForwarder !== constants.AddressZero\n      ? [OZ_DEFENDER_FORWARDER_ADDRESS, biconomyForwarder]\n      : [OZ_DEFENDER_FORWARDER_ADDRESS];\n  }\n}\n","import { NFTCollection } from \"./nft-collection\";\nimport { EditionDrop } from \"./edition-drop\";\nimport { Edition } from \"./edition\";\nimport { Token } from \"./token\";\nimport { Vote } from \"./vote\";\nimport { Split } from \"./split\";\nimport { Marketplace } from \"./marketplace\";\nimport { Pack } from \"./pack\";\nimport { NFTDrop } from \"./nft-drop\";\nimport { TokenDrop } from \"./token-drop\";\nimport { SmartContract } from \"./smart-contract\";\nimport { SignatureDrop } from \"./signature-drop\";\nimport { Multiwrap } from \"./multiwrap\";\n\n/**\n * @internal\n */\nexport const KNOWN_CONTRACTS_MAP = {\n  [NFTDrop.contractType]: NFTDrop,\n  [SignatureDrop.contractType]: SignatureDrop,\n  [NFTCollection.contractType]: NFTCollection,\n  [EditionDrop.contractType]: EditionDrop,\n  [Edition.contractType]: Edition,\n  [TokenDrop.contractType]: TokenDrop,\n  [Token.contractType]: Token,\n  [Vote.contractType]: Vote,\n  [Split.contractType]: Split,\n  [Marketplace.contractType]: Marketplace,\n  [Pack.contractType]: Pack,\n  [Multiwrap.contractType]: Multiwrap,\n} as const;\n\n/**\n * @internal\n */\nexport const CONTRACTS_MAP = {\n  ...KNOWN_CONTRACTS_MAP,\n  [SmartContract.contractType]: SmartContract,\n} as const;\n\n/**\n * @internal\n */\nexport const REMOTE_CONTRACT_NAME = {\n  [NFTDrop.contractType]: \"DropERC721\",\n  [SignatureDrop.contractType]: \"SignatureDrop\",\n  [NFTCollection.contractType]: \"TokenERC721\",\n  [EditionDrop.contractType]: \"DropERC1155\",\n  [Edition.contractType]: \"TokenERC1155\",\n  [TokenDrop.contractType]: \"DropERC20\",\n  [Token.contractType]: \"TokenERC20\",\n  [Vote.contractType]: \"VoteERC20\",\n  [Split.contractType]: \"Split\",\n  [Marketplace.contractType]: \"Marketplace\",\n  [Pack.contractType]: \"Pack\",\n  [SmartContract.contractType]: \"Custom\",\n  [Multiwrap.contractType]: \"Multiwrap\",\n} as const;\n\n/**\n * @internal\n */\nexport const REMOTE_CONTRACT_TO_CONTRACT_TYPE = {\n  DropERC721: NFTDrop.contractType,\n  SignatureDrop: SignatureDrop.contractType,\n  TokenERC721: NFTCollection.contractType,\n  DropERC1155: EditionDrop.contractType,\n  TokenERC1155: Edition.contractType,\n  DropERC20: TokenDrop.contractType,\n  TokenERC20: Token.contractType,\n  VoteERC20: Vote.contractType,\n  Split: Split.contractType,\n  Marketplace: Marketplace.contractType,\n  Pack: Pack.contractType,\n  Multiwrap: Multiwrap.contractType,\n} as const;\n","import { IStorage } from \"../core/interfaces/IStorage\";\nimport type {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { Erc721BatchMintable } from \"../core/classes/erc-721-batch-mintable\";\nimport { Erc721Enumerable } from \"../core/classes/erc-721-enumerable\";\nimport { Erc721Mintable } from \"../core/classes/erc-721-mintable\";\nimport { Erc721Supply } from \"../core/classes/erc-721-supply\";\nimport { TokenErc721ContractSchema } from \"../schema/contracts/token-erc721\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenERC721 } from \"contracts\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { getRoleHash } from \"../common\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { NFTMetadataOrUri, NFTMetadataOwner } from \"../schema\";\nimport { QueryAllParams } from \"../types\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { Erc721WithQuantitySignatureMintable } from \"../core\";\nimport { Erc721Burnable } from \"../core/classes/erc-721-burnable\";\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getNFTCollection(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTCollection extends Erc721<TokenERC721> {\n  static contractType = \"nft-collection\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/TokenERC721.json\");\n  /**\n   * @internal\n   */\n  static schema = TokenErc721ContractSchema;\n\n  public metadata: ContractMetadata<TokenERC721, typeof NFTCollection.schema>;\n  public roles: ContractRoles<\n    TokenERC721,\n    typeof NFTCollection.contractRoles[number]\n  >;\n  public encoder: ContractEncoder<TokenERC721>;\n  public estimator: GasCostEstimator<TokenERC721>;\n  public events: ContractEvents<TokenERC721>;\n  public sales: ContractPrimarySale<TokenERC721>;\n  public platformFees: ContractPlatformFee<TokenERC721>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalties: ContractRoyalty<TokenERC721, typeof NFTCollection.schema>;\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  override signature = super.signature as Erc721WithQuantitySignatureMintable;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<TokenERC721>;\n\n  private _mint = this.mint as Erc721Mintable;\n  private _burn = this.burn as Erc721Burnable;\n  private _batchMint = this._mint.batch as Erc721BatchMintable;\n  private _query = this.query as Erc721Supply;\n  private _owned = this._query.owned as Erc721Enumerable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC721>(\n      network,\n      address,\n      NFTCollection.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      NFTCollection.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      NFTCollection.contractRoles,\n    );\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.signature = new Erc721WithQuantitySignatureMintable(\n      this.contractWrapper,\n      this.storage,\n    );\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(walletAddress?: string): Promise<NFTMetadataOwner[]> {\n    return this._owned.all(walletAddress);\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  public async getOwnedTokenIds(walletAddress?: string): Promise<BigNumber[]> {\n    return this._owned.tokenIds(walletAddress);\n  }\n\n  /**\n   * Get the total count NFTs minted in this contract\n   */\n  public async totalSupply() {\n    return this._query.totalCirculatingSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintToSelf(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintToSelf(\n    metadata: NFTMetadataOrUri,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this._mint.to(signerAddress, metadata);\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintTo(\n    walletAddress: string,\n    metadata: NFTMetadataOrUri,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    return this._mint.to(walletAddress, metadata);\n  }\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatch(\n    metadata: NFTMetadataOrUri[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this._batchMint.to(signerAddress, metadata);\n  }\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatchTo(\n    walletAddress: string,\n    metadata: NFTMetadataOrUri[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this._batchMint.to(walletAddress, metadata);\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  public async burnToken(tokenId: BigNumberish): Promise<TransactionResult> {\n    return this._burn.token(tokenId);\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, CallOverrides } from \"ethers\";\n\n/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nexport class ContractInterceptor<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  public overrideNextTransaction(hook: () => CallOverrides) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, Event, providers } from \"ethers\";\nimport { EventType } from \"../../constants\";\nimport { ListenerFn } from \"eventemitter3\";\nimport { EventFragment } from \"@ethersproject/abi\";\nimport { ContractEvent, EventQueryFilter } from \"../../types/index\";\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nexport class ContractEvents<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  public addTransactionListener(listener: ListenerFn) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  public removeTransactionListener(listener: ListenerFn) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  public addEventListener(\n    eventName: keyof TContract[\"filters\"] | (string & {}),\n    listener: (event: Record<string, any>) => void,\n  ) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(\n      eventName as string,\n    );\n\n    const address = this.contractWrapper.readContract.address;\n    const filter = { address, topics: [event.name] };\n\n    const wrappedListener = (log: providers.Log) => {\n      const parsedLog =\n        this.contractWrapper.readContract.interface.parseLog(log);\n      listener(\n        this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log),\n      );\n    };\n\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  public listenToAllEvents(listener: (event: ContractEvent) => void) {\n    const address = this.contractWrapper.readContract.address;\n    const filter = { address };\n\n    const wrappedListener = (log: providers.Log) => {\n      try {\n        const parsedLog =\n          this.contractWrapper.readContract.interface.parseLog(log);\n\n        listener(\n          this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log),\n        );\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  public removeEventListener(\n    eventName: keyof TContract[\"filters\"] | (string & {}),\n    listener: providers.Listener,\n  ) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(\n      eventName as string,\n    );\n    this.contractWrapper.readContract.off(event.name as string, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  public removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.readContract.address;\n    const filter = { address };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  public async getAllEvents(\n    filters: EventQueryFilter = {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\",\n    },\n  ): Promise<ContractEvent[]> {\n    const events = await this.contractWrapper.readContract.queryFilter(\n      {},\n      filters.fromBlock,\n      filters.toBlock,\n    );\n\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\"\n        ? b.blockNumber - a.blockNumber\n        : a.blockNumber - b.blockNumber;\n    });\n\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getEvents(eventName, filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryFilter\n   * @returns The requested event objects with event data\n   */\n  public async getEvents(\n    eventName: string,\n    filters: EventQueryFilter = {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\",\n    },\n  ): Promise<ContractEvent[]> {\n    const event = this.contractWrapper.readContract.interface.getEvent(\n      eventName as string,\n    );\n    const filter = this.contractWrapper.readContract.filters[event.name];\n\n    const events = await this.contractWrapper.readContract.queryFilter(\n      filter(),\n      filters.fromBlock,\n      filters.toBlock,\n    );\n\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\"\n        ? b.blockNumber - a.blockNumber\n        : a.blockNumber - b.blockNumber;\n    });\n\n    return this.parseEvents(orderedEvents);\n  }\n\n  private parseEvents(events: Event[]): ContractEvent[] {\n    return events.map((e) => {\n      const transaction = Object.fromEntries(\n        Object.entries(e).filter(\n          (a) => typeof a[1] !== \"function\" && a[0] !== \"args\",\n        ),\n      ) as providers.Log;\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n\n        const data: Record<string, unknown> = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n\n        return {\n          eventName: e.event || \"\",\n          data,\n          transaction,\n        };\n      }\n\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction,\n      };\n    });\n  }\n\n  private toContractEvent(\n    event: EventFragment,\n    args: ReadonlyArray<any>,\n    rawLog: providers.Log,\n  ): ContractEvent {\n    const transaction = Object.fromEntries(\n      Object.entries(rawLog).filter(\n        (a) => typeof a[1] !== \"function\" && a[0] !== \"args\",\n      ),\n    ) as providers.Log;\n    const results: Record<string, unknown> = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const obj: Record<string, unknown> = {};\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          for (let i = 0; i < components.length; i++) {\n            const name = components[i].name;\n            obj[name] = arr[i];\n          }\n          results[param.name] = obj;\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction,\n    };\n  }\n}\n","import { IPlatformFee } from \"contracts\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { TransactionResult } from \"../types\";\nimport { CommonPlatformFeeSchema } from \"../../schema\";\nimport { z } from \"zod\";\nimport { DetectableFeature } from \"../interfaces/DetectableFeature\";\nimport { FEATURE_PLATFORM_FEE } from \"../../constants/thirdweb-features\";\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFee.get();\n * await contract.platformFee.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nexport class ContractPlatformFee<TContract extends IPlatformFee>\n  implements DetectableFeature\n{\n  featureName = FEATURE_PLATFORM_FEE.name;\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   * @returns the wallet address.\n   */\n  public async get() {\n    const [platformFeeRecipient, platformFeeBps] =\n      await this.contractWrapper.readContract.getPlatformFeeInfo();\n    return CommonPlatformFeeSchema.parse({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps,\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   * @param platformFeeInfo - the platform fee information\n   */\n  public async set(\n    platformFeeInfo: z.input<typeof CommonPlatformFeeSchema>,\n  ): Promise<TransactionResult> {\n    const parsed = CommonPlatformFeeSchema.parse(platformFeeInfo);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setPlatformFeeInfo\",\n        [parsed.platform_fee_recipient, parsed.platform_fee_basis_points],\n      ),\n    };\n  }\n}\n","import { Erc1155 } from \"../core/classes/erc-1155\";\nimport { DropERC1155 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { Erc1155Enumerable } from \"../core/classes/erc-1155-enumerable\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { NFTMetadata, NFTMetadataOrUri } from \"../schema/tokens/common\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { DropErc1155ClaimConditions } from \"../core/classes/drop-erc1155-claim-conditions\";\nimport { DropErc1155ContractSchema } from \"../schema/contracts/drop-erc1155\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { QueryAllParams, UploadProgressEvent } from \"../types\";\nimport { DropErc1155History } from \"../core/classes/drop-erc1155-history\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { getRoleHash } from \"../common\";\n\nimport { EditionMetadata, EditionMetadataOwner } from \"../schema\";\nimport { TransactionTask } from \"../core/classes/TransactionTask\";\nimport { Erc1155Burnable } from \"../core/classes/erc-1155-burnable\";\nimport { Erc1155Droppable } from \"../core/index\";\nimport { Erc1155Claimable } from \"../core/classes/erc-1155-claimable\";\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getEditionDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class EditionDrop extends Erc1155<DropERC1155> {\n  static contractType = \"edition-drop\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/DropERC1155.json\");\n  /**\n   * @internal\n   */\n  static schema = DropErc1155ContractSchema;\n\n  private _query = this.query as Erc1155Enumerable;\n  private _burn = this.burn as Erc1155Burnable;\n  private _drop = this.drop as Erc1155Droppable;\n  private _claim = this.drop?.claim as Erc1155Claimable;\n\n  public sales: ContractPrimarySale<DropERC1155>;\n  public platformFees: ContractPlatformFee<DropERC1155>;\n  public encoder: ContractEncoder<DropERC1155>;\n  public estimator: GasCostEstimator<DropERC1155>;\n  public events: ContractEvents<DropERC1155>;\n  public metadata: ContractMetadata<DropERC1155, typeof EditionDrop.schema>;\n  public roles: ContractRoles<\n    DropERC1155,\n    typeof EditionDrop.contractRoles[number]\n  >;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalties: ContractRoyalty<DropERC1155, typeof EditionDrop.schema>;\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n  public claimConditions: DropErc1155ClaimConditions<DropERC1155>;\n  public history: DropErc1155History;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<DropERC1155>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC1155>(\n      network,\n      address,\n      EditionDrop.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      EditionDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      EditionDrop.contractRoles,\n    );\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<EditionMetadata[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(\n    walletAddress?: string,\n  ): Promise<EditionMetadataOwner[]> {\n    return this._query.owned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return this._query.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  public async createBatch(\n    metadatas: NFTMetadataOrUri[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    return this._drop.lazyMint(metadatas, options);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param tokenId\n   * @param quantity\n   * @param checkERC20Allowance\n   */\n  public async getClaimTransaction(\n    destinationAddress: string,\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    checkERC20Allowance = true, // TODO split up allowance checks\n  ): Promise<TransactionTask> {\n    return this._claim.getClaimTransaction(\n      destinationAddress,\n      tokenId,\n      quantity,\n      checkERC20Allowance,\n    );\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claimTo(\n    destinationAddress: string,\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResult> {\n    return this._claim.to(\n      destinationAddress,\n      tokenId,\n      quantity,\n      checkERC20Allowance,\n    );\n  }\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResult> {\n    const address = await this.contractWrapper.getSignerAddress();\n    return this.claimTo(address, tokenId, quantity, checkERC20Allowance);\n  }\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  public async burnTokens(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionResult> {\n    return this._burn.tokens(tokenId, amount);\n  }\n}\n","import { Erc1155 } from \"../core/classes/erc-1155\";\nimport { TokenERC1155 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { Erc1155Enumerable } from \"../core/classes/erc-1155-enumerable\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenErc1155ContractSchema } from \"../schema/contracts/token-erc1155\";\nimport {\n  EditionMetadata,\n  EditionMetadataOrUri,\n  EditionMetadataOwner,\n} from \"../schema/tokens/edition\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { getRoleHash } from \"../common\";\nimport { QueryAllParams } from \"../types\";\nimport { Erc1155Mintable } from \"../core/classes/erc-1155-mintable\";\nimport { Erc1155BatchMintable } from \"../core/classes/erc-1155-batch-mintable\";\nimport { Erc1155SignatureMintable } from \"../core/classes/erc-1155-signature-mintable\";\nimport { Erc1155Burnable } from \"../core/classes/erc-1155-burnable\";\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getEdition(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Edition extends Erc1155<TokenERC1155> {\n  static contractType = \"edition\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/TokenERC1155.json\");\n  /**\n   * @internal\n   */\n  static schema = TokenErc1155ContractSchema;\n  public metadata: ContractMetadata<TokenERC1155, typeof Edition.schema>;\n  public roles: ContractRoles<\n    TokenERC1155,\n    typeof Edition.contractRoles[number]\n  >;\n  public sales: ContractPrimarySale<TokenERC1155>;\n  public platformFees: ContractPlatformFee<TokenERC1155>;\n  public encoder: ContractEncoder<TokenERC1155>;\n  public estimator: GasCostEstimator<TokenERC1155>;\n  public events: ContractEvents<TokenERC1155>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalties: ContractRoyalty<TokenERC1155, typeof Edition.schema>;\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  override signature = super.signature as Erc1155SignatureMintable;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<TokenERC1155>;\n  private _query = this.query as Erc1155Enumerable;\n  private _mint = this.mint as Erc1155Mintable;\n  private _burn = this.burn as Erc1155Burnable;\n  private _batchMint = this._mint.batch as Erc1155BatchMintable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC1155>(\n      network,\n      address,\n      Edition.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Edition.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc1155SignatureMintable(\n      this.contractWrapper,\n      this.storage,\n      this.roles,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<EditionMetadata[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(\n    walletAddress?: string,\n  ): Promise<EditionMetadataOwner[]> {\n    return this._query.owned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return this._query.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint NFT for the connected wallet\n   *\n   * @remarks See {@link Edition.mintTo}\n   */\n  public async mintToSelf(\n    metadataWithSupply: EditionMetadataOrUri,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.to(\n      await this.contractWrapper.getSignerAddress(),\n      metadataWithSupply,\n    );\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintTo(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.to(to, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to the connected wallet\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async mintAdditionalSupply(\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.additionalSupplyTo(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n      additionalSupply,\n    );\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async mintAdditionalSupplyTo(\n    to: string,\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this._mint.additionalSupplyTo(to, tokenId, additionalSupply);\n  }\n\n  /**\n   * Mint Many NFTs for the connected wallet\n   *\n   * @remarks See {@link Edition.mintBatchTo}\n   */\n  public async mintBatch(\n    metadatas: EditionMetadataOrUri[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    return this._batchMint.to(\n      await this.contractWrapper.getSignerAddress(),\n      metadatas,\n    );\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatchTo(\n    to: string,\n    metadataWithSupply: EditionMetadataOrUri[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    return this._batchMint.to(to, metadataWithSupply);\n  }\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  public async burnTokens(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionResult> {\n    return this._burn.tokens(tokenId, amount);\n  }\n}\n","import { TokenErc20ContractSchema } from \"../schema/contracts/token-erc20\";\nimport { TokenERC20 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenMintInput } from \"../schema/tokens/token\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { Erc20 } from \"../core/classes/erc-20\";\nimport { Amount, CurrencyValue } from \"../types\";\nimport { TokenERC20History } from \"../core/classes/erc-20-history\";\nimport { getRoleHash } from \"../common\";\nimport { Erc20Mintable } from \"../core/classes/erc-20-mintable\";\nimport { Erc20BatchMintable } from \"../core/classes/erc-20-batch-mintable\";\nimport { constants } from \"ethers\";\nimport { Erc20SignatureMintable } from \"../core/classes/erc-20-signature-mintable\";\nimport { Erc20Burnable } from \"../core/classes/erc-20-burnable\";\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getToken(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Token extends Erc20<TokenERC20> {\n  static contractType = \"token\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/TokenERC20.json\");\n  /**\n   * @internal\n   */\n  static schema = TokenErc20ContractSchema;\n  public metadata: ContractMetadata<TokenERC20, typeof Token.schema>;\n  public roles: ContractRoles<TokenERC20, typeof Token.contractRoles[number]>;\n  public encoder: ContractEncoder<TokenERC20>;\n  public estimator: GasCostEstimator<TokenERC20>;\n  public history: TokenERC20History;\n  public events: ContractEvents<TokenERC20>;\n  public platformFees: ContractPlatformFee<TokenERC20>;\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n  override signature = super.signature as Erc20SignatureMintable;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<TokenERC20>;\n  private _mint = this.mint as Erc20Mintable;\n  private _batchMint = this._mint.batch as Erc20BatchMintable;\n  private _burn = this.burn as Erc20Burnable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC20>(\n      network,\n      address,\n      Token.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Token.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMintable(\n      this.contractWrapper,\n      this.roles,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<CurrencyValue> {\n    return await this.getVoteBalanceOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.getVotes(account),\n    );\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  public async mintToSelf(amount: Amount): Promise<TransactionResult> {\n    return this._mint.to(await this.contractWrapper.getSignerAddress(), amount);\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  public async mintTo(to: string, amount: Amount): Promise<TransactionResult> {\n    return this._mint.to(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  public async mintBatchTo(args: TokenMintInput[]): Promise<TransactionResult> {\n    return this._batchMint.to(args);\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [\n        delegateeAddress,\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  public async burnTokens(amount: Amount): Promise<TransactionResult> {\n    return this._burn.tokens(amount);\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  public async burnFrom(\n    holder: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return this._burn.from(holder, amount);\n  }\n}\n","import { IERC20, VoteERC20 } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { VoteContractSchema } from \"../schema/contracts/vote\";\nimport {\n  Proposal,\n  ProposalExecutable,\n  ProposalVote,\n  VoteSettings,\n} from \"../types/vote\";\nimport { fetchCurrencyMetadata, fetchCurrencyValue } from \"../common/currency\";\nimport { BigNumber, BigNumberish, Contract, ethers } from \"ethers\";\nimport { VoteType } from \"../enums\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ProposalCreatedEvent } from \"contracts/VoteERC20\";\nimport ERC20Abi from \"../../abis/IERC20.json\";\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getVote(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Vote implements UpdateableNetwork {\n  static contractType = \"vote\" as const;\n  static contractAbi = require(\"../../abis/VoteERC20.json\");\n  /**\n   * @internal\n   */\n  static schema = VoteContractSchema;\n\n  private contractWrapper: ContractWrapper<VoteERC20>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<VoteERC20, typeof Vote.schema>;\n  public encoder: ContractEncoder<VoteERC20>;\n  public estimator: GasCostEstimator<VoteERC20>;\n  public events: ContractEvents<VoteERC20>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<VoteERC20>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<VoteERC20>(\n      network,\n      address,\n      Vote.contractAbi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Vote.schema,\n      this.storage,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  public async get(proposalId: BigNumberish): Promise<Proposal> {\n    const all = await this.getAll();\n    const proposals = all.filter((p) =>\n      p.proposalId.eq(BigNumber.from(proposalId)),\n    );\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  public async getAll(): Promise<Proposal[]> {\n    return Promise.all(\n      (await this.contractWrapper.readContract.getAllProposals()).map(\n        async (data) => ({\n          proposalId: data.proposalId,\n          proposer: data.proposer,\n          description: data.description,\n          startBlock: data.startBlock,\n          endBlock: data.endBlock,\n          state: await this.contractWrapper.readContract.state(data.proposalId),\n          votes: await this.getProposalVotes(data.proposalId),\n          executions: data[3].map((c, i) => ({\n            toAddress: data.targets[i],\n            nativeTokenValue: c,\n            transactionData: data.calldatas[i],\n          })),\n        }),\n      ),\n    );\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  public async getProposalVotes(\n    proposalId: BigNumber,\n  ): Promise<ProposalVote[]> {\n    const votes = await this.contractWrapper.readContract.proposalVotes(\n      proposalId,\n    );\n    return [\n      {\n        type: VoteType.Against,\n        label: \"Against\",\n        count: votes.againstVotes,\n      },\n      {\n        type: VoteType.For,\n        label: \"For\",\n        count: votes.forVotes,\n      },\n      {\n        type: VoteType.Abstain,\n        label: \"Abstain\",\n        count: votes.abstainVotes,\n      },\n    ];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  public async hasVoted(\n    proposalId: string,\n    account?: string,\n  ): Promise<boolean> {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.readContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  public async canExecute(proposalId: string): Promise<boolean> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contractWrapper\n        .callStatic()\n        .execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<CurrencyValue> {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(\n      this.contractWrapper.readContract.address,\n    );\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers.utils.formatUnits(balance, 18),\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    const erc20 = new Contract(\n      tokenAddress,\n      ERC20Abi,\n      this.contractWrapper.getProvider(),\n    ) as IERC20;\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      tokenAddress,\n      await erc20.balanceOf(this.contractWrapper.readContract.address),\n    );\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  private async ensureExists(proposalId: string): Promise<void> {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  public async settings(): Promise<VoteSettings> {\n    const [\n      votingDelay,\n      votingPeriod,\n      votingTokenAddress,\n      votingQuorumFraction,\n      proposalTokenThreshold,\n    ] = await Promise.all([\n      this.contractWrapper.readContract.votingDelay(),\n      this.contractWrapper.readContract.votingPeriod(),\n      this.contractWrapper.readContract.token(),\n      this.contractWrapper.readContract.quorumNumerator(),\n      this.contractWrapper.readContract.proposalThreshold(),\n    ]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      votingTokenAddress,\n    );\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString(),\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to setup in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  public async propose(\n    description: string,\n    executions?: ProposalExecutable[],\n  ): Promise<TransactionResultWithId> {\n    if (!executions) {\n      executions = [\n        {\n          toAddress: this.contractWrapper.readContract.address,\n          nativeTokenValue: 0,\n          transactionData: \"0x\",\n        },\n      ];\n    }\n    const tos = executions.map((p) => p.toAddress);\n    const values = executions.map((p) => p.nativeTokenValue);\n    const datas = executions.map((p) => p.transactionData);\n    const receipt = await this.contractWrapper.sendTransaction(\"propose\", [\n      tos,\n      values,\n      datas,\n      description,\n    ]);\n    const event = this.contractWrapper.parseLogs<ProposalCreatedEvent>(\n      \"ProposalCreated\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.proposalId,\n      receipt,\n    };\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  public async vote(\n    proposalId: string,\n    voteType: VoteType,\n    reason = \"\",\n  ): Promise<TransactionResult> {\n    await this.ensureExists(proposalId);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"castVoteWithReason\",\n        [proposalId, voteType, reason],\n      ),\n    };\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  public async execute(proposalId: string): Promise<TransactionResult> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"execute\", [\n        tos,\n        values,\n        datas,\n        descriptionHash,\n      ]),\n    };\n  }\n}\n","import { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { IERC20, Split as SplitContract } from \"contracts\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../core/types\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { fetchCurrencyValue } from \"../common/currency\";\nimport { BigNumber, Contract } from \"ethers\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\nimport { SplitsContractSchema } from \"../schema/contracts/splits\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport ERC20Abi from \"../../abis/IERC20.json\";\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getSplit(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Split implements UpdateableNetwork {\n  static contractType = \"split\" as const;\n  static contractAbi = require(\"../../abis/Split.json\");\n  /**\n   * @internal\n   */\n  static schema = SplitsContractSchema;\n\n  private contractWrapper: ContractWrapper<SplitContract>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<SplitContract, typeof Split.schema>;\n  public encoder: ContractEncoder<SplitContract>;\n  public estimator: GasCostEstimator<SplitContract>;\n  public events: ContractEvents<SplitContract>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<SplitContract>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<SplitContract>(\n      network,\n      address,\n      Split.contractAbi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Split.schema,\n      this.storage,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n    let index = BigNumber.from(0);\n    const totalRecipients =\n      await this.contractWrapper.readContract.payeeCount();\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(\n          index,\n        );\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  public async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: BigNumber } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  public async balanceOfTokenAllRecipients(tokenAddress: string) {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: CurrencyValue } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(\n        recipient.address,\n        tokenAddress,\n      );\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance =\n      await this.contractWrapper.readContract.provider.getBalance(\n        this.getAddress(),\n      );\n    const totalReleased = await this.contractWrapper.readContract[\n      \"totalReleased()\"\n    ]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.contractWrapper.readContract[\"released(address)\"](address),\n    );\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = new Contract(\n      tokenAddress,\n      ERC20Abi,\n      this.contractWrapper.getProvider(),\n    ) as IERC20;\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\n      \"totalReleased(address)\"\n    ](tokenAddress);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.contractWrapper.readContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      tokenAddress,\n      value,\n    );\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.contractWrapper.readContract.totalShares(),\n      this.contractWrapper.readContract.shares(address),\n    ]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  public async withdraw(walletAddress: string): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address)\", [\n        walletAddress,\n      ]),\n    };\n  }\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"release(address,address)\",\n        [tokenAddress, walletAddress],\n      ),\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  public async distribute(): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute()\", []),\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  public async distributeToken(\n    tokenAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"distribute(address)\",\n        [tokenAddress],\n      ),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.contractWrapper.readContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.contractWrapper.readContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n}\n","import { Marketplace as MarketplaceContract } from \"contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../core/types\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { MarketplaceContractSchema } from \"../schema/contracts/marketplace\";\nimport { AuctionListing, DirectListing } from \"../types/marketplace\";\nimport { ListingType } from \"../enums\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ListingNotFoundError } from \"../common\";\nimport { MarketplaceFilter } from \"../types/marketplace/MarketPlaceFilter\";\nimport { getRoleHash } from \"../common/role\";\nimport { MarketplaceDirect } from \"../core/classes/marketplace-direct\";\nimport { MarketplaceAuction } from \"../core/classes/marketplace-auction\";\nimport { DEFAULT_QUERY_ALL_COUNT } from \"../types/QueryParams\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getMarketplace(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Marketplace implements UpdateableNetwork {\n  static contractType = \"marketplace\" as const;\n  static contractRoles = [\"admin\", \"lister\", \"asset\"] as const;\n  static contractAbi = require(\"../../abis/Marketplace.json\");\n  /**\n   * @internal\n   */\n  static schema = MarketplaceContractSchema;\n\n  private contractWrapper: ContractWrapper<MarketplaceContract>;\n  private storage: IStorage;\n\n  public encoder: ContractEncoder<MarketplaceContract>;\n  public events: ContractEvents<MarketplaceContract>;\n  public estimator: GasCostEstimator<MarketplaceContract>;\n  public platformFees: ContractPlatformFee<MarketplaceContract>;\n  public metadata: ContractMetadata<\n    MarketplaceContract,\n    typeof Marketplace.schema\n  >;\n  public roles: ContractRoles<\n    MarketplaceContract,\n    typeof Marketplace.contractRoles[number]\n  >;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<MarketplaceContract>;\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the NFT contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   */\n  public direct: MarketplaceDirect;\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 2.6;\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  public auction: MarketplaceAuction;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<MarketplaceContract>(\n      network,\n      address,\n      Marketplace.contractAbi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Marketplace.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      Marketplace.contractRoles,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.direct = new MarketplaceDirect(this.contractWrapper, this.storage);\n    this.auction = new MarketplaceAuction(this.contractWrapper, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Convenience function to get either a direct or auction listing\n   *\n   * @param listingId - the listing id\n   * @returns either a direct or auction listing\n   *\n   * @remarks Get a listing by its listing id\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.getListing(listingId);\n   * ```\n   */\n  public async getListing(\n    listingId: BigNumberish,\n  ): Promise<AuctionListing | DirectListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case ListingType.Auction: {\n        return await this.auction.mapListing(listing);\n      }\n      case ListingType.Direct: {\n        return await this.direct.mapListing(listing);\n      }\n      default: {\n        throw new Error(`Unknown listing type: ${listing.listingType}`);\n      }\n    }\n  }\n\n  /**\n   * Get all active listings\n   *\n   * @remarks Fetch all the active listings from this marketplace contract. An active listing means it can be bought or bid on.\n   * @example\n   * ```javascript\n   * const listings = await contract.getActiveListings();\n   * const priceOfFirstActiveListing = listings[0].price;\n   * ```\n   * @param filter - optional filter parameters\n   */\n  public async getActiveListings(\n    filter?: MarketplaceFilter,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    const rawListings = await this.getAllListingsNoFilter(true);\n    const filtered = this.applyFilter(rawListings, filter);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    return filtered.filter((l) => {\n      return (\n        (l.type === ListingType.Auction &&\n          BigNumber.from(l.endTimeInEpochSeconds).gt(now) &&\n          BigNumber.from(l.startTimeInEpochSeconds).lte(now)) ||\n        (l.type === ListingType.Direct && l.quantity > 0)\n      );\n    });\n  }\n\n  /**\n   * Get all the listings\n   *\n   * @remarks Fetch all the listings from this marketplace contract, including sold ones.\n   * @example\n   * ```javascript\n   * const listings = await contract.getAllListings();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   */\n  public async getAllListings(\n    filter?: MarketplaceFilter,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    const rawListings = await this.getAllListingsNoFilter(false);\n    return this.applyFilter(rawListings, filter);\n  }\n\n  /**\n   * @internal\n   */\n  public getAll = this.getAllListings;\n\n  /**\n   * Get the total number of Listings\n   * @returns the total number listings on the marketplace\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalListings();\n  }\n\n  /**\n   * Get whether listing is restricted only to addresses with the Lister role\n   */\n  public async isRestrictedToListerRoleOnly(): Promise<boolean> {\n    const anyoneCanList = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"lister\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanList;\n  }\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  public async getBidBufferBps(): Promise<BigNumber> {\n    return this.contractWrapper.readContract.bidBufferBps();\n  }\n\n  /**\n   * get the buffer time in seconds between offers\n   */\n  public async getTimeBufferInSeconds(): Promise<BigNumber> {\n    return this.contractWrapper.readContract.timeBuffer();\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Purchase NFTs\n   * @remarks Buy a Direct or Auction listing on your marketplace.\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.buyoutListing(listingId, quantityDesired);\n   * ```\n   * @param listingId - the listing ID of the listing you want to buy\n   * @param quantityDesired - the quantity that you want to buy (for ERC1155 tokens)\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet (for direct listings only)\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired?: BigNumberish,\n    receiver?: string,\n  ): Promise<TransactionResult> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case ListingType.Direct: {\n        invariant(\n          quantityDesired !== undefined,\n          \"quantityDesired is required when buying out a direct listing\",\n        );\n        return await this.direct.buyoutListing(\n          listingId,\n          quantityDesired,\n          receiver,\n        );\n      }\n      case ListingType.Auction: {\n        return await this.auction.buyoutListing(listingId);\n      }\n      default:\n        throw Error(`Unknown listing type: ${listing.listingType}`);\n    }\n  }\n\n  /**\n   * Set the Auction bid buffer\n   * @remarks A percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items.\n   * @example\n   * ```javascript\n   * // the bid buffer in basis points\n   * const bufferBps = 5_00; // 5%\n   * await contract.setBidBufferBps(bufferBps);\n   * ```\n   * @param bufferBps - the bps value\n   */\n  public async setBidBufferBps(bufferBps: BigNumberish): Promise<void> {\n    await this.roles.verify(\n      [\"admin\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const timeBuffer = await this.getTimeBufferInSeconds();\n    await this.contractWrapper.sendTransaction(\"setAuctionBuffers\", [\n      timeBuffer,\n      BigNumber.from(bufferBps),\n    ]);\n  }\n\n  /**\n   * Set the Auction Time buffer:\n   * @remarks Measured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to.\n   * @example\n   * ```javascript\n   * // the time buffer in seconds\n   * const bufferInSeconds = 60;\n   * await contract.setTimeBufferInSeconds(bufferInSeconds);\n   * ```\n   * @param bufferInSeconds - the seconds value\n   */\n  public async setTimeBufferInSeconds(\n    bufferInSeconds: BigNumberish,\n  ): Promise<void> {\n    await this.roles.verify(\n      [\"admin\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const bidBuffer = await this.getBidBufferBps();\n    await this.contractWrapper.sendTransaction(\"setAuctionBuffers\", [\n      BigNumber.from(bufferInSeconds),\n      bidBuffer,\n    ]);\n  }\n\n  /**\n   * Restrict listing NFTs only from the specified NFT contract address.\n   * It is possible to allow listing from multiple contract addresses.\n   * @param contractAddress - the NFT contract address\n   */\n  public async allowListingFromSpecificAssetOnly(contractAddress: string) {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    if (members.includes(constants.AddressZero)) {\n      encoded.push(\n        this.encoder.encode(\"revokeRole\", [\n          getRoleHash(\"asset\"),\n          constants.AddressZero,\n        ]),\n      );\n    }\n    encoded.push(\n      this.encoder.encode(\"grantRole\", [getRoleHash(\"asset\"), contractAddress]),\n    );\n\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /**\n   * Allow listings from any NFT contract\n   */\n  public async allowListingFromAnyAsset() {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    for (const addr in members) {\n      encoded.push(\n        this.encoder.encode(\"revokeRole\", [getRoleHash(\"asset\"), addr]),\n      );\n    }\n    encoded.push(\n      this.encoder.encode(\"grantRole\", [\n        getRoleHash(\"asset\"),\n        constants.AddressZero,\n      ]),\n    );\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async getAllListingsNoFilter(\n    filterInvalidListings: boolean,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    const listings = await Promise.all(\n      Array.from(\n        Array(\n          (await this.contractWrapper.readContract.totalListings()).toNumber(),\n        ).keys(),\n      ).map(async (i) => {\n        let listing;\n\n        try {\n          listing = await this.getListing(i);\n        } catch (err) {\n          return undefined;\n        }\n\n        if (listing.type === ListingType.Auction) {\n          return listing;\n        }\n\n        if (filterInvalidListings) {\n          const { valid } = await this.direct.isStillValidListing(listing);\n          if (!valid) {\n            return undefined;\n          }\n        }\n\n        return listing;\n      }),\n    );\n    return listings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  private applyFilter(\n    listings: (AuctionListing | DirectListing)[],\n    filter?: MarketplaceFilter,\n  ) {\n    let rawListings = [...listings];\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const count = BigNumber.from(\n      filter?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(\n          (seller) =>\n            seller.sellerAddress.toString().toLowerCase() ===\n            filter?.seller?.toString().toLowerCase(),\n        );\n      }\n      if (filter.tokenContract) {\n        rawListings = rawListings.filter(\n          (tokenContract) =>\n            tokenContract.assetContractAddress.toString().toLowerCase() ===\n            filter?.tokenContract?.toString().toLowerCase(),\n        );\n      }\n\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(\n          (tokenContract) =>\n            tokenContract.tokenId.toString() === filter?.tokenId?.toString(),\n        );\n      }\n      rawListings = rawListings.filter((_, index) => index >= start);\n      rawListings = rawListings.slice(0, count);\n    }\n    return rawListings;\n  }\n\n  // TODO: Complete method implementation with subgraph\n  // /**\n  //  * @beta - This method is not yet complete.\n  //  *\n  //  * @param listingId\n  //  * @returns\n  //  */\n  // public async getActiveOffers(listingId: BigNumberish): Promise<Offer[]> {\n  //   const listing = await this.validateDirectListing(BigNumber.from(listingId));\n\n  //   const offers = await this.readOnlyContract.offers(listing.id, \"\");\n\n  //   return await Promise.all(\n  //     offers.map(async (offer: any) => {\n  //       return await this.mapOffer(BigNumber.from(listingId), offer);\n  //     }),\n  //   );\n  // }\n}\n","import { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { Pack as PackContract } from \"contracts\";\nimport { PackContractSchema } from \"../schema/contracts/packs\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { Erc1155 } from \"../core/classes/erc-1155\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport {\n  PackMetadataInput,\n  PackMetadataInputSchema,\n  PackMetadataOutput,\n  PackRewards,\n  PackRewardsOutput,\n} from \"../schema/tokens/pack\";\nimport {\n  ITokenBundle,\n  PackCreatedEvent,\n  PackOpenedEvent,\n} from \"contracts/Pack\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport {\n  fetchCurrencyMetadata,\n  hasERC20Allowance,\n  normalizePriceValue,\n} from \"../common/currency\";\nimport { isTokenApprovedForTransfer } from \"../common/marketplace\";\nimport { uploadOrExtractURI } from \"../common/nft\";\nimport { EditionMetadata, EditionMetadataOwner } from \"../schema\";\nimport { Erc1155Enumerable } from \"../core/classes/erc-1155-enumerable\";\nimport { QueryAllParams } from \"../types\";\nimport { getRoleHash } from \"../common/role\";\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getPack(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Pack extends Erc1155<PackContract> {\n  static contractType = \"pack\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"pauser\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/Pack.json\");\n  /**\n   * @internal\n   */\n  static schema = PackContractSchema;\n\n  public metadata: ContractMetadata<PackContract, typeof Pack.schema>;\n  public roles: ContractRoles<PackContract, typeof Pack.contractRoles[number]>;\n  public encoder: ContractEncoder<PackContract>;\n  public events: ContractEvents<PackContract>;\n  public estimator: GasCostEstimator<PackContract>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalties: ContractRoyalty<PackContract, typeof Pack.schema>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<PackContract>;\n\n  private _query = this.query as Erc1155Enumerable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<PackContract>(\n      network,\n      address,\n      Pack.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Pack.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<EditionMetadata[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  public async getOwned(\n    walletAddress?: string,\n  ): Promise<EditionMetadataOwner[]> {\n    return this._query.owned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return this._query.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      ethers.constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  public async getPackContents(\n    packId: BigNumberish,\n  ): Promise<PackRewardsOutput> {\n    const { contents, perUnitAmounts } =\n      await this.contractWrapper.readContract.getPackContents(packId);\n\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0: {\n          const tokenMetadata = await fetchCurrencyMetadata(\n            this.contractWrapper.getProvider(),\n            reward.assetContract,\n          );\n          const rewardAmount = ethers.utils.formatUnits(\n            reward.totalAmount,\n            tokenMetadata.decimals,\n          );\n          erc20Rewards.push({\n            contractAddress: reward.assetContract,\n            quantityPerReward: amount.toString(),\n            totalRewards: BigNumber.from(rewardAmount).div(amount).toString(),\n          });\n          break;\n        }\n        case 1: {\n          erc721Rewards.push({\n            contractAddress: reward.assetContract,\n            tokenId: reward.tokenId.toString(),\n          });\n          break;\n        }\n        case 2: {\n          erc1155Rewards.push({\n            contractAddress: reward.assetContract,\n            tokenId: reward.tokenId.toString(),\n            quantityPerReward: amount.toString(),\n            totalRewards: BigNumber.from(reward.totalAmount)\n              .div(amount)\n              .toString(),\n          });\n          break;\n        }\n      }\n    }\n\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards,\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n   * @remarks See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  public async create(metadataWithRewards: PackMetadataInput) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo(signerAddress, metadataWithRewards);\n  }\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  public async createTo(\n    to: string,\n    metadataWithRewards: PackMetadataInput,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    const uri = await uploadOrExtractURI(\n      metadataWithRewards.packMetadata,\n      this.storage,\n    );\n\n    const parsedMetadata = PackMetadataInputSchema.parse(metadataWithRewards);\n    const { contents, numOfRewardUnits } = await this.toPackContentArgs(\n      parsedMetadata,\n    );\n\n    const receipt = await this.contractWrapper.sendTransaction(\"createPack\", [\n      contents,\n      numOfRewardUnits,\n      uri,\n      parsedMetadata.openStartTime,\n      parsedMetadata.rewardsPerPack,\n      to,\n    ]);\n\n    const event = this.contractWrapper.parseLogs<PackCreatedEvent>(\n      \"PackCreated\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = event[0].args.packId;\n\n    return {\n      id: packId,\n      receipt,\n      data: () => this.get(packId),\n    };\n  }\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  public async open(\n    tokenId: BigNumberish,\n    amount: BigNumberish = 1,\n  ): Promise<PackRewards> {\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [\n      tokenId,\n      amount,\n    ]);\n    const event = this.contractWrapper.parseLogs<PackOpenedEvent>(\n      \"PackOpened\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0: {\n          const tokenMetadata = await fetchCurrencyMetadata(\n            this.contractWrapper.getProvider(),\n            reward.assetContract,\n          );\n          erc20Rewards.push({\n            contractAddress: reward.assetContract,\n            quantityPerReward: ethers.utils\n              .formatUnits(reward.totalAmount, tokenMetadata.decimals)\n              .toString(),\n          });\n          break;\n        }\n        case 1: {\n          erc721Rewards.push({\n            contractAddress: reward.assetContract,\n            tokenId: reward.tokenId.toString(),\n          });\n          break;\n        }\n        case 2: {\n          erc1155Rewards.push({\n            contractAddress: reward.assetContract,\n            tokenId: reward.tokenId.toString(),\n            quantityPerReward: reward.totalAmount.toString(),\n          });\n          break;\n        }\n      }\n    }\n\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards,\n    };\n  }\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async toPackContentArgs(metadataWithRewards: PackMetadataOutput) {\n    const contents: ITokenBundle.TokenStruct[] = [];\n    const numOfRewardUnits = [];\n    const { erc20Rewards, erc721Rewards, erc1155Rewards } = metadataWithRewards;\n\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(\n        provider,\n        erc20.quantityPerReward,\n        erc20.contractAddress,\n      );\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(\n        this.contractWrapper,\n        erc20.contractAddress,\n        totalQuantity,\n      );\n      if (!hasAllowance) {\n        throw new Error(\n          `ERC20 token with contract address \"${\n            erc20.contractAddress\n          }\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${\n            erc20.contractAddress\n          }\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`,\n        );\n      }\n\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0,\n      });\n    }\n\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(\n        this.contractWrapper.getProvider(),\n        this.getAddress(),\n        erc721.contractAddress,\n        erc721.tokenId,\n        owner,\n      );\n\n      if (!isApproved) {\n        throw new Error(\n          `ERC721 token \"${erc721.tokenId}\" with contract address \"${\n            erc721.contractAddress\n          }\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${\n            erc721.contractAddress\n          }\").setApprovalForToken(\"${this.getAddress()}\", ${\n            erc721.tokenId\n          });\\n\\n`,\n        );\n      }\n\n      numOfRewardUnits.push(1);\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId,\n      });\n    }\n\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(\n        this.contractWrapper.getProvider(),\n        this.getAddress(),\n        erc1155.contractAddress,\n        erc1155.tokenId,\n        owner,\n      );\n\n      if (!isApproved) {\n        throw new Error(\n          `ERC1155 token \"${erc1155.tokenId}\" with contract address \"${\n            erc1155.contractAddress\n          }\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${\n            erc1155.contractAddress\n          }\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`,\n        );\n      }\n\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(\n          BigNumber.from(erc1155.totalRewards),\n        ),\n        tokenId: erc1155.tokenId,\n      });\n    }\n\n    return {\n      contents,\n      numOfRewardUnits,\n    };\n  }\n}\n","import { ContractRoles } from \"../core/classes/contract-roles\";\nimport { BigNumber, BigNumberish, constants, ethers } from \"ethers\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { DropErc721ContractSchema } from \"../schema/contracts/drop-erc721\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport {\n  NFTMetadata,\n  NFTMetadataOrUri,\n  NFTMetadataOwner,\n} from \"../schema/tokens/common\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../types/QueryParams\";\nimport { DropClaimConditions } from \"../core/classes/drop-claim-conditions\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { prepareClaim } from \"../common/claim-conditions\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { DelayedReveal } from \"../core/classes/delayed-reveal\";\nimport { Erc721Enumerable } from \"../core/classes/erc-721-enumerable\";\nimport { Erc721Supply } from \"../core/classes/erc-721-supply\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ClaimVerification } from \"../types\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { getRoleHash } from \"../common\";\nimport {\n  DropERC721,\n  TokensClaimedEvent,\n  TokensLazyMintedEvent,\n} from \"contracts/DropERC721\";\nimport { UploadProgressEvent } from \"../types/events\";\nimport { uploadOrExtractURIs } from \"../common/nft\";\nimport { TransactionTask } from \"../core/classes/TransactionTask\";\nimport { Erc721Burnable } from \"../core/classes/erc-721-burnable\";\nimport { FEATURE_NFT_REVEALABLE } from \"../constants/erc721-features\";\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getNFTDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTDrop extends Erc721<DropERC721> {\n  static contractType = \"nft-drop\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/DropERC721.json\");\n  /**\n   * @internal\n   */\n  static schema = DropErc721ContractSchema;\n\n  public encoder: ContractEncoder<DropERC721>;\n  public estimator: GasCostEstimator<DropERC721>;\n  public metadata: ContractMetadata<DropERC721, typeof NFTDrop.schema>;\n  public sales: ContractPrimarySale<DropERC721>;\n  public platformFees: ContractPlatformFee<DropERC721>;\n  public events: ContractEvents<DropERC721>;\n  public roles: ContractRoles<DropERC721, typeof NFTDrop.contractRoles[number]>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<DropERC721>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalties: ContractRoyalty<DropERC721, typeof NFTDrop.schema>;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n  public claimConditions: DropClaimConditions<DropERC721>;\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n  public revealer: DelayedReveal<DropERC721>;\n\n  private _query = this.query as Erc721Supply;\n  private _owned = this._query.owned as Erc721Enumerable;\n  private _burn = this.burn as Erc721Burnable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC721>(\n      network,\n      address,\n      NFTDrop.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      NFTDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.revealer = new DelayedReveal<DropERC721>(\n      this.contractWrapper,\n      this.storage,\n      FEATURE_NFT_REVEALABLE.name,\n      () => this.nextTokenIdToMint(),\n    );\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(walletAddress?: string): Promise<NFTMetadataOwner[]> {\n    return this._owned.all(walletAddress);\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  public async getOwnedTokenIds(walletAddress?: string): Promise<BigNumber[]> {\n    return this._owned.tokenIds(walletAddress);\n  }\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  public async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadata[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const firstTokenId = BigNumber.from(\n      Math.max(\n        (\n          await this.contractWrapper.readContract.nextTokenIdToClaim()\n        ).toNumber(),\n        start,\n      ),\n    );\n    const maxId = BigNumber.from(\n      Math.min(\n        (\n          await this.contractWrapper.readContract.nextTokenIdToMint()\n        ).toNumber(),\n        firstTokenId.toNumber() + count,\n      ),\n    );\n\n    return await Promise.all(\n      Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map((i) =>\n        this.getTokenMetadata(firstTokenId.add(i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToClaim();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.contractWrapper.readContract.nextTokenIdToMint()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  public async createBatch(\n    metadatas: NFTMetadataOrUri[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const startFileNumber =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(\n      metadatas,\n      this.storage,\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n      options,\n    );\n    // ensure baseUri is the same for the entire batch\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n    for (let i = 0; i < batch.length; i++) {\n      const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n      if (baseUri !== uri) {\n        throw new Error(\n          `Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`,\n        );\n      }\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.length,\n      baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n      ethers.utils.toUtf8Bytes(\"\"),\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.getTokenMetadata(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   */\n  public async getClaimTransaction(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    checkERC20Allowance = true, // TODO split up allowance checks\n  ): Promise<TransactionTask> {\n    const claimVerification = await this.prepareClaim(\n      quantity,\n      checkERC20Allowance,\n    );\n    return TransactionTask.make({\n      contractWrapper: this.contractWrapper,\n      functionName: \"claim\",\n      args: [\n        destinationAddress,\n        quantity,\n        claimVerification.currencyAddress,\n        claimVerification.price,\n        claimVerification.proofs,\n        claimVerification.maxQuantityPerTransaction,\n      ],\n      overrides: claimVerification.overrides,\n    });\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claimTo(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const task = await this.getClaimTransaction(\n      destinationAddress,\n      quantity,\n      checkERC20Allowance,\n    );\n    const { receipt } = await task.execute();\n    const event = this.contractWrapper.parseLogs<TokensClaimedEvent>(\n      \"TokensClaimed\",\n      receipt?.logs,\n    );\n    const startingIndex: BigNumber = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.get(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claim(\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this.claimTo(\n      await this.contractWrapper.getSignerAddress(),\n      quantity,\n      checkERC20Allowance,\n    );\n  }\n\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   *\n   */\n  public async burnToken(tokenId: BigNumberish): Promise<TransactionResult> {\n    return this._burn.token(tokenId);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    quantity: BigNumberish,\n    checkERC20Allowance: boolean,\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.claimConditions.getActive(),\n      async () => (await this.metadata.get()).merkle,\n      0,\n      this.contractWrapper,\n      this.storage,\n      checkERC20Allowance,\n    );\n  }\n}\n","import { DropERC20 } from \"contracts\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../core/types\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { constants } from \"ethers\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { DropClaimConditions } from \"../core/classes/drop-claim-conditions\";\nimport { Erc20 } from \"../core/classes/erc-20\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { Amount, CurrencyValue } from \"../types\";\nimport { DropErc20ContractSchema } from \"../schema/contracts/drop-erc20\";\nimport { getRoleHash } from \"../common\";\nimport { Erc20Burnable } from \"../core/classes/erc-20-burnable\";\nimport { Erc20Droppable } from \"../core/classes/erc-20-droppable\";\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getTokenDrop(\"{{contract_address}}\");\n * ```\n *\n */\nexport class TokenDrop extends Erc20<DropERC20> {\n  static contractType = \"token-drop\" as const;\n  static contractRoles = [\"admin\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/DropERC20.json\");\n  /**\n   * @internal\n   */\n  static schema = DropErc20ContractSchema;\n\n  private _burn = this.burn as Erc20Burnable;\n  private _drop = this.drop as Erc20Droppable;\n\n  public metadata: ContractMetadata<DropERC20, typeof TokenDrop.schema>;\n  public roles: ContractRoles<\n    DropERC20,\n    typeof TokenDrop.contractRoles[number]\n  >;\n  public encoder: ContractEncoder<DropERC20>;\n  public estimator: GasCostEstimator<DropERC20>;\n  public sales: ContractPrimarySale<DropERC20>;\n  public platformFees: ContractPlatformFee<DropERC20>;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n  public claimConditions: DropClaimConditions<DropERC20>;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<DropERC20>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC20>(\n      network,\n      address,\n      TokenDrop.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      TokenDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      TokenDrop.contractRoles,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions<DropERC20>(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<CurrencyValue> {\n    return await this.getVoteBalanceOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.getVotes(account),\n    );\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   */\n  public async claim(\n    amount: Amount,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResult> {\n    return this.claimTo(\n      await this.contractWrapper.getSignerAddress(),\n      amount,\n      checkERC20Allowance,\n    );\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - The transaction receipt\n   */\n  public async claimTo(\n    destinationAddress: string,\n    amount: Amount,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResult> {\n    return this._drop.claimTo(destinationAddress, amount, checkERC20Allowance);\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [\n        delegateeAddress,\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  public async burnTokens(amount: Amount): Promise<TransactionResult> {\n    return this._burn.tokens(amount);\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  public async burnFrom(\n    holder: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    return this._burn.from(holder, amount);\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc20ContractInput =\n  CommonContractSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\n\nexport const DropErc20ContractOutput =\n  CommonContractOutputSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\n\nexport const DropErc20ContractDeploy = DropErc20ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc20ContractSchema = {\n  deploy: DropErc20ContractDeploy,\n  output: DropErc20ContractOutput,\n  input: DropErc20ContractInput,\n};\n","import { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { IStorage, NetworkOrSignerOrProvider } from \"../core\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { Erc1155 } from \"../core/classes/erc-1155\";\nimport { Erc20 } from \"../core/classes/erc-20\";\nimport { Erc721 } from \"../core/classes/erc-721\";\n\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  IPermissionsEnumerable,\n  IPlatformFee,\n  IPrimarySale,\n  IRoyalty,\n} from \"contracts\";\nimport { AbiSchema, CustomContractSchema } from \"../schema/contracts/custom\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { BaseContract, CallOverrides, ContractInterface } from \"ethers\";\nimport {\n  ALL_ROLES,\n  detectContractFeature,\n  extractFunctionsFromAbi,\n} from \"../common\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractPublishedMetadata } from \"../core/classes/contract-published-metadata\";\nimport { BaseERC1155, BaseERC20, BaseERC721 } from \"../types/eips\";\nimport { CallOverrideSchema } from \"../schema/index\";\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.call(\"myCustomFunction\", param1, param2);\n *\n * // if your contract follows the ERC721 standard, contract.nft will be present\n * const allNFTs = await contract.nft.query.all()\n *\n * // if your contract extends IMintableERC721, contract.nft.mint will be present\n * const tx = await contract.nft.mint.to(\"0x...\", {\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @beta\n */\nexport class SmartContract<TContract extends BaseContract = BaseContract>\n  implements UpdateableNetwork\n{\n  static contractType = \"custom\" as const;\n  /**\n   * @internal\n   */\n  static schema = CustomContractSchema;\n\n  private contractWrapper;\n  private storage;\n  private options;\n\n  // utilities\n  public events: ContractEvents<TContract>;\n  public interceptor: ContractInterceptor<TContract>;\n  public estimator: GasCostEstimator<TContract>;\n  public publishedMetadata: ContractPublishedMetadata<TContract>;\n\n  // features\n  public metadata: ContractMetadata<BaseContract, any>;\n  public royalties: ContractRoyalty<IRoyalty, any> | undefined;\n  public roles: ContractRoles<IPermissionsEnumerable, any> | undefined;\n  public sales: ContractPrimarySale<IPrimarySale> | undefined;\n  public platformFees: ContractPlatformFee<IPlatformFee> | undefined;\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  public token: Erc20 | undefined;\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  public nft: Erc721 | undefined;\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  public edition: Erc1155 | undefined;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    abi: ContractInterface,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TContract>(\n      network,\n      address,\n      abi,\n      options,\n    ),\n  ) {\n    this.options = options;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(\n      this.contractWrapper,\n      this.storage,\n    );\n\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      SmartContract.schema,\n      this.storage,\n    );\n\n    // feature detection\n    this.royalties = this.detectRoyalties();\n    this.roles = this.detectRoles();\n    this.sales = this.detectPrimarySales();\n    this.platformFees = this.detectPlatformFees();\n\n    this.token = this.detectErc20();\n    this.nft = this.detectErc721();\n    this.edition = this.detectErc1155();\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Call any function on this contract\n   * @example\n   * ```javascript\n   * // read functions will return the data from the contract\n   * const myValue = await contract.call(\"myReadFunction\");\n   * console.log(myValue);\n   *\n   * // write functions will return the transaction receipt\n   * const tx = await contract.call(\"myWriteFunction\", arg1, arg2);\n   * const receipt = tx.receipt;\n   *\n   * // Optionally override transaction options\n   * await contract.call(\"myWriteFunction\", arg1, arg2, {\n   *  gasLimit: 1000000, // override default gas limit\n   *  value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n   * };\n   * ```\n   * @param functionName - the name of the function to call\n   * @param args - the arguments of the function\n   */\n  public async call(\n    functionName: string,\n    ...args: unknown[] | [...unknown[], CallOverrides]\n  ): Promise<any> {\n    // parse last arg as tx options if present\n    let txOptions: CallOverrides | undefined;\n    try {\n      if (args.length > 0 && typeof args[args.length - 1] === \"object\") {\n        const last = args[args.length - 1];\n        txOptions = CallOverrideSchema.parse(last);\n        // if call overrides found, remove it from args array\n        args = args.slice(0, args.length - 1);\n      }\n    } catch (e) {\n      // no-op\n    }\n\n    const functions = extractFunctionsFromAbi(\n      AbiSchema.parse(this.contractWrapper.abi),\n    );\n    const fn = functions.find((f) => f.name === functionName);\n    if (!fn) {\n      throw new Error(\n        `Function \"${functionName}\" not found in contract. Check your dashboard for the list of functions available`,\n      );\n    }\n    // TODO extract this and re-use for deploy function to check constructor args\n    if (fn.inputs.length !== args.length) {\n      throw new Error(\n        `Function \"${functionName}\" requires ${fn.inputs.length} arguments, but ${args.length} were provided.\\nExpected function signature: ${fn.signature}`,\n      );\n    }\n    // TODO validate each argument\n    if (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") {\n      // read function\n      return (this.contractWrapper.readContract as any)[functionName](...args);\n    } else {\n      // write function\n      const receipt = await this.contractWrapper.sendTransaction(\n        functionName,\n        args,\n        txOptions,\n      );\n      return {\n        receipt,\n      };\n    }\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  private detectRoyalties() {\n    if (detectContractFeature<IRoyalty>(this.contractWrapper, \"Royalty\")) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(\n        this.contractWrapper,\n        SmartContract.schema,\n        this.storage,\n      );\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n\n  private detectRoles() {\n    if (\n      detectContractFeature<IPermissionsEnumerable>(\n        this.contractWrapper,\n        \"Permissions\",\n      )\n    ) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n\n  private detectPrimarySales() {\n    if (\n      detectContractFeature<IPrimarySale>(this.contractWrapper, \"PrimarySale\")\n    ) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectPlatformFees() {\n    if (\n      detectContractFeature<IPlatformFee>(this.contractWrapper, \"PlatformFee\")\n    ) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  private detectErc20() {\n    if (detectContractFeature<BaseERC20>(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.options);\n    }\n    return undefined;\n  }\n\n  private detectErc721() {\n    if (detectContractFeature<BaseERC721>(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.options);\n    }\n    return undefined;\n  }\n\n  private detectErc1155() {\n    if (detectContractFeature<BaseERC1155>(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.options);\n    }\n    return undefined;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  extractEventsFromAbi,\n  extractFunctionsFromAbi,\n  fetchContractMetadataFromAddress,\n} from \"../../common\";\nimport { IStorage } from \"../interfaces\";\nimport {\n  AbiEvent,\n  AbiFunction,\n  AbiSchema,\n  PublishedMetadata,\n} from \"../../schema/contracts/custom\";\nimport { BaseContract } from \"ethers\";\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */\nexport class ContractPublishedMetadata<TContract extends BaseContract> {\n  private contractWrapper;\n  private storage: IStorage;\n\n  private _cachedMetadata: PublishedMetadata | undefined;\n\n  constructor(contractWrapper: ContractWrapper<TContract>, storage: IStorage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  public async get(): Promise<PublishedMetadata> {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(\n      this.contractWrapper.readContract.address,\n      this.contractWrapper.getProvider(),\n      this.storage,\n    );\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  public async extractFunctions(): Promise<AbiFunction[]> {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(\n      AbiSchema.parse(this.contractWrapper.abi),\n      publishedMetadata?.metadata,\n    );\n  }\n\n  /**\n   * @public\n   */\n  public async extractEvents(): Promise<AbiEvent[]> {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractEventsFromAbi(\n      AbiSchema.parse(this.contractWrapper.abi),\n      publishedMetadata?.metadata,\n    );\n  }\n}\n","import { ContractRoles } from \"../core/classes/contract-roles\";\nimport { SignatureDrop as SignatureDropContract } from \"contracts\";\nimport { BigNumber, BigNumberish, constants } from \"ethers\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { DropErc721ContractSchema } from \"../schema/contracts/drop-erc721\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport {\n  NFTMetadata,\n  NFTMetadataOrUri,\n  NFTMetadataOwner,\n} from \"../schema/tokens/common\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../types/QueryParams\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { Erc721Enumerable } from \"../core/classes/erc-721-enumerable\";\nimport { Erc721Supply } from \"../core/classes/erc-721-supply\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { UploadProgressEvent } from \"../types\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractPlatformFee } from \"../core/classes/contract-platform-fee\";\nimport { ContractInterceptor } from \"../core/classes/contract-interceptor\";\nimport { getRoleHash } from \"../common\";\nimport {\n  DelayedReveal,\n  DropClaimConditions,\n  Erc721Claimable,\n  Erc721Droppable,\n} from \"../core/index\";\nimport { Erc721WithQuantitySignatureMintable } from \"../core/classes/erc-721-with-quantity-signature-mintable\";\nimport { TransactionTask } from \"../core/classes/TransactionTask\";\nimport { Erc721Burnable } from \"../core/classes/erc-721-burnable\";\nimport { FEATURE_NFT_REVEALABLE } from \"../constants/erc721-features\";\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getSignatureDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class SignatureDrop extends Erc721<SignatureDropContract> {\n  static contractType = \"signature-drop\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractAbi = require(\"../../abis/SignatureDrop.json\");\n  /**\n   * @internal\n   */\n  static schema = DropErc721ContractSchema;\n\n  public encoder: ContractEncoder<SignatureDropContract>;\n  public estimator: GasCostEstimator<SignatureDropContract>;\n  public metadata: ContractMetadata<\n    SignatureDropContract,\n    typeof SignatureDrop.schema\n  >;\n  public sales: ContractPrimarySale<SignatureDropContract>;\n  public platformFees: ContractPlatformFee<SignatureDropContract>;\n  public events: ContractEvents<SignatureDropContract>;\n  public roles: ContractRoles<\n    SignatureDropContract,\n    typeof SignatureDrop.contractRoles[number]\n  >;\n  /**\n   * @internal\n   */\n  public interceptor: ContractInterceptor<SignatureDropContract>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalties: ContractRoyalty<\n    SignatureDropContract,\n    typeof SignatureDrop.schema\n  >;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n  public claimConditions = this.drop?.claim\n    ?.conditions as DropClaimConditions<SignatureDropContract>;\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n  public revealer: DelayedReveal<SignatureDropContract>;\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  override signature = super.signature as Erc721WithQuantitySignatureMintable;\n\n  private _query = this.query as Erc721Supply;\n  private _owned = this._query.owned as Erc721Enumerable;\n  private _burn = this.burn as Erc721Burnable;\n  private _drop = this.drop as Erc721Droppable;\n  private _claim = this.drop?.claim as Erc721Claimable;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<SignatureDropContract>(\n      network,\n      address,\n      SignatureDrop.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      SignatureDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      SignatureDrop.contractRoles,\n    );\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.revealer = new DelayedReveal(\n      this.contractWrapper,\n      this.storage,\n      FEATURE_NFT_REVEALABLE.name,\n      () => this.nextTokenIdToMint(),\n    );\n    this.signature = new Erc721WithQuantitySignatureMintable(\n      this.contractWrapper,\n      this.storage,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(walletAddress?: string): Promise<NFTMetadataOwner[]> {\n    return this._owned.all(walletAddress);\n  }\n\n  /**\n   * {@inheritDoc Erc721Enumerable.tokendIds}\n   */\n  public async getOwnedTokenIds(walletAddress?: string): Promise<BigNumber[]> {\n    return this._owned.tokenIds(walletAddress);\n  }\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  public async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.totalClaimedSupply()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadata[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const firstTokenId = BigNumber.from(\n      Math.max((await this.totalClaimedSupply()).toNumber(), start),\n    );\n    const maxId = BigNumber.from(\n      Math.min(\n        (\n          await this.contractWrapper.readContract.nextTokenIdToMint()\n        ).toNumber(),\n        firstTokenId.toNumber() + count,\n      ),\n    );\n\n    return await Promise.all(\n      Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map((i) =>\n        this.getTokenMetadata(firstTokenId.add(i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalMinted();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    const maxSupply =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n\n    return maxSupply.sub(await this.totalClaimedSupply());\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      constants.AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  public async createBatch(\n    metadatas: NFTMetadataOrUri[],\n    options?: {\n      onProgress: (event: UploadProgressEvent) => void;\n    },\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    return this._drop.lazyMint(metadatas, options);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   */\n  public async getClaimTransaction(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    checkERC20Allowance = true, // TODO split up allowance checks\n  ): Promise<TransactionTask> {\n    return this._claim.getClaimTransaction(\n      destinationAddress,\n      quantity,\n      checkERC20Allowance,\n    );\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claimTo(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this._claim.to(destinationAddress, quantity, checkERC20Allowance);\n  }\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claim(\n    quantity: BigNumberish,\n    checkERC20Allowance = true,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this.claimTo(\n      await this.contractWrapper.getSignerAddress(),\n      quantity,\n      checkERC20Allowance,\n    );\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  public async burnToken(tokenId: BigNumberish): Promise<TransactionResult> {\n    return this._burn.token(tokenId);\n  }\n}\n","import {\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractEvents } from \"../core/classes/contract-events\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { NFTMetadataOrUri, NFTMetadataOwner, SDKOptions } from \"../schema\";\nimport { Multiwrap as MultiwrapContract } from \"contracts\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { uploadOrExtractURI } from \"../common/nft\";\nimport {\n  ERC1155Wrappable,\n  ERC20Wrappable,\n  ERC721Wrappable,\n  TokensToWrap,\n  WrappedTokens,\n} from \"../types/multiwrap\";\nimport {\n  fetchCurrencyMetadata,\n  hasERC20Allowance,\n  normalizePriceValue,\n} from \"../common/currency\";\nimport { ITokenBundle, TokensWrappedEvent } from \"contracts/Multiwrap\";\nimport { MultiwrapContractSchema } from \"../schema/contracts/multiwrap\";\nimport { BigNumberish, ethers } from \"ethers\";\nimport TokenStruct = ITokenBundle.TokenStruct;\nimport { QueryAllParams } from \"../types\";\nimport { isTokenApprovedForTransfer } from \"../common/marketplace\";\nimport { Erc721Supply } from \"../core/classes/erc-721-supply\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = sdk.getMultiwrap(\"{{contract_address}}\");\n * ```\n *\n * @beta\n */\nexport class Multiwrap extends Erc721<MultiwrapContract> {\n  static contractType = \"multiwrap\" as const;\n  static contractRoles = [\"transfer\", \"minter\", \"unwrap\", \"asset\"] as const;\n  static contractAbi = require(\"../../abis/Multiwrap.json\");\n\n  /**\n   * @internal\n   */\n  static schema = MultiwrapContractSchema;\n\n  public encoder: ContractEncoder<MultiwrapContract>;\n  public estimator: GasCostEstimator<MultiwrapContract>;\n  public metadata: ContractMetadata<MultiwrapContract, typeof Multiwrap.schema>;\n  public events: ContractEvents<MultiwrapContract>;\n  public roles: ContractRoles<\n    MultiwrapContract,\n    typeof Multiwrap.contractRoles[number]\n  >;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalties: ContractRoyalty<MultiwrapContract, typeof Multiwrap.schema>;\n\n  private _query = this.query as Erc721Supply;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<MultiwrapContract>(\n      network,\n      address,\n      Multiwrap.contractAbi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Multiwrap.schema,\n      this.storage,\n    );\n\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      Multiwrap.contractRoles,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Wrapped Token Bundles\n   *\n   * @remarks Get all the data associated with every token bundle in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const wrappedBundles = await contract.getAll();\n   * console.log(wrappedBundles);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    return this._query.all(queryParams);\n  }\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  public async getWrappedContents(\n    wrappedTokenId: BigNumberish,\n  ): Promise<WrappedTokens> {\n    const wrappedTokens =\n      await this.contractWrapper.readContract.getWrappedContents(\n        wrappedTokenId,\n      );\n\n    const erc20Tokens: ERC20Wrappable[] = [];\n    const erc721Tokens: ERC721Wrappable[] = [];\n    const erc1155Tokens: ERC1155Wrappable[] = [];\n\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0: {\n          const tokenMetadata = await fetchCurrencyMetadata(\n            this.contractWrapper.getProvider(),\n            token.assetContract,\n          );\n          erc20Tokens.push({\n            contractAddress: token.assetContract,\n            quantity: ethers.utils.formatUnits(\n              token.totalAmount,\n              tokenMetadata.decimals,\n            ),\n          });\n          break;\n        }\n        case 1: {\n          erc721Tokens.push({\n            contractAddress: token.assetContract,\n            tokenId: token.tokenId,\n          });\n          break;\n        }\n        case 2: {\n          erc1155Tokens.push({\n            contractAddress: token.assetContract,\n            tokenId: token.tokenId,\n            quantity: token.totalAmount.toString(),\n          });\n          break;\n        }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens,\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  public async wrap(\n    contents: TokensToWrap,\n    wrappedTokenMetadata: NFTMetadataOrUri,\n    recipientAddress?: string,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    const uri = await uploadOrExtractURI(wrappedTokenMetadata, this.storage);\n\n    const recipient = recipientAddress\n      ? recipientAddress\n      : await this.contractWrapper.getSignerAddress();\n\n    const tokens = await this.toTokenStructList(contents);\n    const receipt = await this.contractWrapper.sendTransaction(\"wrap\", [\n      tokens,\n      uri,\n      recipient,\n    ]);\n\n    const event = this.contractWrapper.parseLogs<TokensWrappedEvent>(\n      \"TokensWrapped\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TokensWrapped event not found\");\n    }\n    const tokenId = event[0].args.tokenIdOfWrappedToken;\n    return {\n      id: tokenId,\n      receipt,\n      data: () => this.get(tokenId),\n    };\n  }\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  public async unwrap(\n    wrappedTokenId: BigNumberish,\n    recipientAddress?: string,\n  ): Promise<TransactionResult> {\n    const recipient = recipientAddress\n      ? recipientAddress\n      : await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"unwrap\", [\n        wrappedTokenId,\n        recipient,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async toTokenStructList(contents: TokensToWrap) {\n    const tokens: TokenStruct[] = [];\n\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(\n          provider,\n          erc20.quantity,\n          erc20.contractAddress,\n        );\n        const hasAllowance = await hasERC20Allowance(\n          this.contractWrapper,\n          erc20.contractAddress,\n          normalizedQuantity,\n        );\n        if (!hasAllowance) {\n          throw new Error(\n            `ERC20 token with contract address \"${\n              erc20.contractAddress\n            }\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${\n              erc20.contractAddress\n            }\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`,\n          );\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0,\n        });\n      }\n    }\n\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(\n          this.contractWrapper.getProvider(),\n          this.getAddress(),\n          erc721.contractAddress,\n          erc721.tokenId,\n          owner,\n        );\n\n        if (!isApproved) {\n          throw new Error(\n            `ERC721 token \"${erc721.tokenId}\" with contract address \"${\n              erc721.contractAddress\n            }\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${\n              erc721.contractAddress\n            }\").setApprovalForToken(\"${this.getAddress()}\", ${\n              erc721.tokenId\n            });\\n\\n`,\n          );\n        }\n\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1,\n        });\n      }\n    }\n\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(\n          this.contractWrapper.getProvider(),\n          this.getAddress(),\n          erc1155.contractAddress,\n          erc1155.tokenId,\n          owner,\n        );\n\n        if (!isApproved) {\n          throw new Error(\n            `ERC1155 token \"${erc1155.tokenId}\" with contract address \"${\n              erc1155.contractAddress\n            }\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${\n              erc1155.contractAddress\n            }\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`,\n          );\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2,\n        });\n      }\n    }\n    return tokens;\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const MultiwrapContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const MultiwrapContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const MultiwrapContractDeploy = MultiwrapContractInput.merge(\n  CommonTrustedForwarderSchema,\n);\n\nexport const MultiwrapContractSchema = {\n  deploy: MultiwrapContractDeploy,\n  output: MultiwrapContractOutput,\n  input: MultiwrapContractInput,\n};\n","import { ContractInterface, ethers, Signer } from \"ethers\";\nimport { IStorage } from \"./interfaces/IStorage\";\nimport { RemoteStorage } from \"./classes/remote-storage\";\nimport {\n  Edition,\n  EditionDrop,\n  KNOWN_CONTRACTS_MAP,\n  Marketplace,\n  NFTCollection,\n  NFTDrop,\n  Pack,\n  REMOTE_CONTRACT_TO_CONTRACT_TYPE,\n  SignatureDrop,\n  Split,\n  Token,\n  Vote,\n} from \"../contracts\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { IpfsStorage } from \"./classes/ipfs-storage\";\nimport { RPCConnectionHandler } from \"./classes/rpc-connection-handler\";\nimport type {\n  ContractForContractType,\n  ContractType,\n  NetworkOrSignerOrProvider,\n  SignerOrProvider,\n  ValidContractInstance,\n} from \"./types\";\nimport { IThirdwebContract__factory } from \"contracts\";\nimport { ContractDeployer } from \"./classes/contract-deployer\";\nimport { SmartContract } from \"../contracts/smart-contract\";\nimport invariant from \"tiny-invariant\";\nimport { TokenDrop } from \"../contracts/token-drop\";\nimport { ContractPublisher } from \"./classes/contract-publisher\";\nimport { ContractMetadata } from \"./classes\";\nimport {\n  ChainOrRpc,\n  getProviderForNetwork,\n  getReadOnlyProvider,\n  NATIVE_TOKEN_ADDRESS,\n} from \"../constants\";\nimport { UserWallet } from \"./wallet/UserWallet\";\nimport { Multiwrap } from \"../contracts/multiwrap\";\nimport { WalletAuthenticator } from \"./auth/wallet-authenticator\";\nimport { CurrencyValue } from \"../types/index\";\nimport { fetchCurrencyValue } from \"../common/currency\";\n\n/**\n * The main entry point for the thirdweb SDK\n * @public\n */\nexport class ThirdwebSDK extends RPCConnectionHandler {\n  /**\n   * Get an instance of the thirdweb SDK based on an existing ethers signer\n   *\n   * @example\n   * ```javascript\n   * // get a signer from somewhere (createRandom is being used purely for example purposes)\n   * const signer = ethers.Wallet.createRandom();\n   *\n   * // get an instance of the SDK with the signer already setup\n   * const sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");\n   * ```\n   *\n   * @param signer - a ethers Signer to be used for transactions\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @returns an instance of the SDK\n   *\n   * @beta\n   */\n  static fromSigner(\n    signer: Signer,\n    network?: ChainOrRpc,\n    options: SDKOptions = {},\n    storage: IStorage = new IpfsStorage(),\n  ): ThirdwebSDK {\n    const sdk = new ThirdwebSDK(network || signer, options, storage);\n    sdk.updateSignerOrProvider(signer);\n    return sdk;\n  }\n\n  /**\n   * Get an instance of the thirdweb SDK based on a private key.\n   *\n   * @remarks\n   * This should only be used for backend services or scripts, with the private key stored in a secure way.\n   * **NEVER** expose your private key to the public in any way.\n   *\n   * @example\n   * ```javascript\n   * const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");\n   * ```\n   *\n   * @param privateKey - the private key - **DO NOT EXPOSE THIS TO THE PUBLIC**\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @returns an instance of the SDK\n   *\n   * @beta\n   */\n  static fromPrivateKey(\n    privateKey: string,\n    network: ChainOrRpc,\n    options: SDKOptions = {},\n    storage: IStorage = new IpfsStorage(),\n  ): ThirdwebSDK {\n    const signerOrProvider = getProviderForNetwork(network);\n    const provider = Signer.isSigner(signerOrProvider)\n      ? signerOrProvider.provider\n      : typeof signerOrProvider === \"string\"\n      ? getReadOnlyProvider(signerOrProvider)\n      : signerOrProvider;\n    const signer = new ethers.Wallet(privateKey, provider);\n    return ThirdwebSDK.fromSigner(signer, network, options, storage);\n  }\n\n  /**\n   * @internal\n   * the cache of contracts that we have already seen\n   */\n  private contractCache = new Map<\n    string,\n    ValidContractInstance | SmartContract\n  >();\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ThirdwebSDK.getPublisher} instead\n   */\n  private _publisher: ContractPublisher;\n  /**\n   * Internal handler for uploading and downloading files\n   */\n  private storageHandler: IStorage;\n  /**\n   * New contract deployer\n   */\n  public deployer: ContractDeployer;\n  /**\n   * Interact with the connected wallet\n   */\n  public wallet: UserWallet;\n  /**\n   * Upload and download files from IPFS or from your own storage service\n   */\n  public storage: RemoteStorage;\n  /**\n   * Enable authentication with the connected wallet\n   */\n  public auth: WalletAuthenticator;\n\n  constructor(\n    network: ChainOrRpc | SignerOrProvider,\n    options: SDKOptions = {},\n    storage: IStorage = new IpfsStorage(),\n  ) {\n    const signerOrProvider = getProviderForNetwork(network);\n    super(signerOrProvider, options);\n    this.storageHandler = storage;\n    this.storage = new RemoteStorage(storage);\n    this.wallet = new UserWallet(signerOrProvider, options);\n    this.deployer = new ContractDeployer(signerOrProvider, options, storage);\n    this.auth = new WalletAuthenticator(signerOrProvider, this.wallet, options);\n    this._publisher = new ContractPublisher(\n      signerOrProvider,\n      this.options,\n      this.storageHandler,\n    );\n  }\n\n  /**\n   * Get an instance of a Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @returns the contract\n   */\n  public getNFTDrop(contractAddress: string): NFTDrop {\n    return this.getBuiltInContract(\n      contractAddress,\n      NFTDrop.contractType,\n    ) as NFTDrop;\n  }\n\n  /**\n   * Get an instance of a SignatureDrop contract\n   * @param contractAddress - the address of the deployed contract\n   * @returns the contract\n   * @internal\n   */\n  public getSignatureDrop(contractAddress: string): SignatureDrop {\n    return this.getBuiltInContract(\n      contractAddress,\n      SignatureDrop.contractType,\n    ) as SignatureDrop;\n  }\n\n  /**\n   * Get an instance of a NFT Collection contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getNFTCollection(address: string): NFTCollection {\n    return this.getBuiltInContract(\n      address,\n      NFTCollection.contractType,\n    ) as NFTCollection;\n  }\n\n  /**\n   * Get an instance of a Edition Drop contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getEditionDrop(address: string): EditionDrop {\n    return this.getBuiltInContract(\n      address,\n      EditionDrop.contractType,\n    ) as EditionDrop;\n  }\n\n  /**\n   * Get an instance of an Edition contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getEdition(address: string): Edition {\n    return this.getBuiltInContract(address, Edition.contractType) as Edition;\n  }\n\n  /**\n   * Get an instance of a Token Drop contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getTokenDrop(address: string): TokenDrop {\n    return this.getBuiltInContract(\n      address,\n      TokenDrop.contractType,\n    ) as TokenDrop;\n  }\n\n  /**\n   * Get an instance of a Token contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getToken(address: string): Token {\n    return this.getBuiltInContract(address, Token.contractType) as Token;\n  }\n\n  /**\n   * Get an instance of a Vote contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getVote(address: string): Vote {\n    return this.getBuiltInContract(address, Vote.contractType) as Vote;\n  }\n\n  /**\n   * Get an instance of a Splits contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getSplit(address: string): Split {\n    return this.getBuiltInContract(address, Split.contractType) as Split;\n  }\n\n  /**\n   * Get an instance of a Marketplace contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getMarketplace(address: string): Marketplace {\n    return this.getBuiltInContract(\n      address,\n      Marketplace.contractType,\n    ) as Marketplace;\n  }\n\n  /**\n   * Get an instance of a Pack contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getPack(address: string): Pack {\n    return this.getBuiltInContract(address, Pack.contractType) as Pack;\n  }\n\n  /**\n   * Get an instance of a Multiwrap contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   * @beta\n   */\n  public getMultiwrap(address: string): Multiwrap {\n    return this.getBuiltInContract(\n      address,\n      Multiwrap.contractType,\n    ) as Multiwrap;\n  }\n\n  /**\n   *\n   * @internal\n   * @param address - the address of the contract to instantiate\n   * @param contractType - optional, the type of contract to instantiate\n   * @returns a promise that resolves with the contract instance\n   */\n  public getBuiltInContract<TContractType extends ContractType = ContractType>(\n    address: string,\n    contractType: TContractType,\n  ): ContractForContractType<TContractType> {\n    // if we have a contract in the cache we will return it\n    // we will do this **without** checking any contract type things for simplicity, this may have to change in the future?\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(\n        address,\n      ) as ContractForContractType<TContractType>;\n    }\n\n    if (contractType === \"custom\") {\n      throw new Error(\n        \"To get an instance of a custom contract, use getContract(address)\",\n      );\n    }\n\n    const newContract = new KNOWN_CONTRACTS_MAP[\n      contractType as keyof typeof KNOWN_CONTRACTS_MAP\n    ](this.getSignerOrProvider(), address, this.storageHandler, this.options);\n\n    this.contractCache.set(address, newContract);\n\n    // return the new contract\n    return newContract as ContractForContractType<TContractType>;\n  }\n\n  /**\n   * @param contractAddress - the address of the contract to attempt to resolve the contract type for\n   * @returns the {@link ContractType} for the given contract address\n   * @throws if the contract type cannot be determined (is not a valid thirdweb contract)\n   */\n  public async resolveContractType(\n    contractAddress: string,\n  ): Promise<Exclude<ContractType, \"custom\">> {\n    const contract = IThirdwebContract__factory.connect(\n      contractAddress,\n      this.getSignerOrProvider(),\n    );\n    const remoteContractType = ethers.utils\n      .toUtf8String(await contract.contractType())\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\x00/g, \"\");\n    invariant(\n      remoteContractType in REMOTE_CONTRACT_TO_CONTRACT_TYPE,\n      `${remoteContractType} is not a valid contract type, falling back to custom contract`,\n    );\n    return REMOTE_CONTRACT_TO_CONTRACT_TYPE[\n      remoteContractType as keyof typeof REMOTE_CONTRACT_TO_CONTRACT_TYPE\n    ];\n  }\n\n  /**\n   * Return all the contracts deployed by the specified address\n   * @param walletAddress - the deployed address\n   */\n  public async getContractList(walletAddress: string) {\n    const addresses = await (\n      await this.deployer.getRegistry()\n    ).getContractAddresses(walletAddress);\n\n    const addressesWithContractTypes = await Promise.all(\n      addresses.map(async (address) => {\n        let contractType: ContractType = \"custom\";\n        try {\n          contractType = await this.resolveContractType(address);\n        } catch (e) {\n          // this going to happen frequently and be OK, we'll just catch it and ignore it\n        }\n        let metadata: ContractMetadata<any, any> | undefined;\n        if (contractType === \"custom\") {\n          try {\n            metadata = (await this.getContract(address)).metadata;\n          } catch (e) {\n            console.log(\n              `Couldn't get contract metadata for custom contract: ${address}`,\n            );\n          }\n        } else {\n          metadata = this.getBuiltInContract(address, contractType).metadata;\n        }\n        return {\n          address,\n          contractType,\n          metadata,\n        };\n      }),\n    );\n\n    return addressesWithContractTypes\n      .filter((e) => e.metadata)\n      .map(({ address, contractType, metadata }) => {\n        invariant(metadata, \"All ThirdwebContracts require metadata\");\n        return {\n          address,\n          contractType,\n          metadata: () => metadata.get(),\n        };\n      });\n  }\n\n  /**\n   * Update the active signer or provider for all contracts\n   * @param network - the new signer or provider\n   */\n  public override updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n\n  private updateContractSignerOrProvider() {\n    this.auth.updateSignerOrProvider(this.getSignerOrProvider());\n    this.wallet.onNetworkUpdated(this.getSignerOrProvider());\n    this.deployer.updateSignerOrProvider(this.getSignerOrProvider());\n    this._publisher.updateSignerOrProvider(this.getSignerOrProvider());\n    for (const [, contract] of this.contractCache) {\n      contract.onNetworkUpdated(this.getSignerOrProvider());\n    }\n  }\n\n  /**\n   * Get an instance of a Custom ThirdwebContract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   * @beta\n   */\n  public async getContract(address: string) {\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(address) as SmartContract;\n    }\n    try {\n      // try built in contract first, eventually all our contracts will have bytecode metadata\n      const contractType = await this.resolveContractType(address);\n      const abi = KNOWN_CONTRACTS_MAP[contractType].contractAbi;\n      return this.getContractFromAbi(address, abi);\n    } catch (err) {\n      try {\n        const publisher = this.getPublisher();\n        const metadata = await publisher.fetchCompilerMetadataFromAddress(\n          address,\n        );\n        return this.getContractFromAbi(address, metadata.abi);\n      } catch (e) {\n        throw new Error(`Error fetching ABI for this contract\\n\\n${err}`);\n      }\n    }\n  }\n\n  /**\n   * Get an instance of a Custom contract from a json ABI\n   * @param address - the address of the deployed contract\n   * @param abi - the JSON abi\n   * @returns the contract\n   * @beta\n   */\n  public getContractFromAbi(address: string, abi: ContractInterface) {\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(address) as SmartContract;\n    }\n    const contract = new SmartContract(\n      this.getSignerOrProvider(),\n      address,\n      abi,\n      this.storageHandler,\n      this.options,\n    );\n    this.contractCache.set(address, contract);\n    return contract;\n  }\n\n  /**\n   * Get the native balance of a given address (wallet or contract)\n   * @example\n   * ```javascript\n   * const balance = await sdk.getBalance(\"0x...\");\n   * console.log(balance.displayValue);\n   * ```\n   * @param address - the address to check the balance for\n   */\n  public async getBalance(address: string): Promise<CurrencyValue> {\n    return fetchCurrencyValue(\n      this.getProvider(),\n      NATIVE_TOKEN_ADDRESS,\n      await this.getProvider().getBalance(address),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  public getPublisher(): ContractPublisher {\n    return this._publisher;\n  }\n}\n","import { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport { constants, utils } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport {\n  extractConstructorParams,\n  extractFunctions,\n  fetchContractMetadataFromAddress,\n  fetchExtendedReleaseMetadata,\n  fetchPreDeployMetadata,\n  fetchRawPredeployMetadata,\n  fetchSourceFilesFromMetadata,\n} from \"../../common/feature-detection\";\nimport {\n  AbiFunction,\n  ContractParam,\n  ContractSource,\n  ExtraPublishMetadata,\n  FullPublishMetadata,\n  FullPublishMetadataSchema,\n  PreDeployMetadataFetched,\n  ProfileMetadata,\n  ProfileMetadataInput,\n  ProfileSchemaOutput,\n  PublishedContract,\n  PublishedContractFetched,\n  PublishedContractSchema,\n} from \"../../schema/contracts/custom\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  ContractPublisher as OnChainContractPublisher,\n  IContractPublisher,\n} from \"contracts\";\nimport { getContractPublisherAddress } from \"../../constants\";\nimport ContractPublisherAbi from \"../../../abis/ContractPublisher.json\";\nimport { ContractPublishedEvent } from \"contracts/ContractPublisher\";\nimport { isIncrementalVersion } from \"../../common/version-checker\";\n\n/**\n * Handles publishing contracts (EXPERIMENTAL)\n * @internal\n */\nexport class ContractPublisher extends RPCConnectionHandler {\n  private storage: IStorage;\n  private publisher: ContractWrapper<OnChainContractPublisher>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n    storage: IStorage,\n  ) {\n    super(network, options);\n    this.storage = storage;\n    this.publisher = new ContractWrapper<OnChainContractPublisher>(\n      network,\n      getContractPublisherAddress(),\n      ContractPublisherAbi,\n      options,\n    );\n  }\n\n  public override updateSignerOrProvider(\n    network: NetworkOrSignerOrProvider,\n  ): void {\n    super.updateSignerOrProvider(network);\n    this.publisher.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   * @param metadataUri\n   */\n  public async extractConstructorParams(\n    metadataUri: string,\n  ): Promise<ContractParam[]> {\n    return extractConstructorParams(metadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployMetadataUri\n   */\n  public async extractFunctions(\n    predeployMetadataUri: string,\n  ): Promise<AbiFunction[]> {\n    return extractFunctions(predeployMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployUri\n   */\n  public async fetchCompilerMetadataFromPredeployURI(\n    predeployUri: string,\n  ): Promise<PreDeployMetadataFetched> {\n    return fetchPreDeployMetadata(predeployUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param prepublishUri\n   * @param publisherAddress\n   */\n  public async fetchPrePublishMetadata(\n    prepublishUri: string,\n    publisherAddress: string,\n  ): Promise<{\n    preDeployMetadata: PreDeployMetadataFetched;\n    latestPublishedContractMetadata?: PublishedContractFetched;\n  }> {\n    const preDeployMetadataFetched = await fetchPreDeployMetadata(\n      prepublishUri,\n      this.storage,\n    );\n    const latestPublishedContract = publisherAddress\n      ? await this.getLatest(publisherAddress, preDeployMetadataFetched.name)\n      : undefined;\n    const latestPublishedContractMetadata = latestPublishedContract\n      ? await this.fetchPublishedContractInfo(latestPublishedContract)\n      : undefined;\n    return {\n      preDeployMetadata: preDeployMetadataFetched,\n      latestPublishedContractMetadata,\n    };\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  public async fetchCompilerMetadataFromAddress(address: string) {\n    return fetchContractMetadataFromAddress(\n      address,\n      this.getProvider(),\n      this.storage,\n    );\n  }\n\n  /**\n   * @internal\n   * Get the full information about a published contract\n   * @param contract\n   */\n  public async fetchPublishedContractInfo(\n    contract: PublishedContract,\n  ): Promise<PublishedContractFetched> {\n    return {\n      name: contract.id,\n      publishedTimestamp: contract.timestamp,\n      publishedMetadata: await this.fetchFullPublishMetadata(\n        contract.metadataUri,\n      ),\n    };\n  }\n\n  /**\n   * @internal\n   * @param publishedMetadataUri\n   */\n  public async fetchFullPublishMetadata(\n    publishedMetadataUri: string,\n  ): Promise<FullPublishMetadata> {\n    return fetchExtendedReleaseMetadata(publishedMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * // TODO expose a resolvePublishMetadata(contractAddress, chainId) that handles the dual chain case\n   * // TODO will be easy to do with the multichain pattern of 3.0\n   * @param compilerMetadataUri\n   */\n  public async resolvePublishMetadataFromCompilerMetadata(\n    compilerMetadataUri: string,\n  ): Promise<FullPublishMetadata[]> {\n    const publishedMetadataUri =\n      await this.publisher.readContract.getPublishedUriFromCompilerUri(\n        compilerMetadataUri,\n      );\n    if (publishedMetadataUri.length === 0) {\n      throw Error(\n        `Could not resolve published metadata URI from ${compilerMetadataUri}`,\n      );\n    }\n    return await Promise.all(\n      publishedMetadataUri\n        .filter((uri) => uri.length > 0)\n        .map((uri) => this.fetchFullPublishMetadata(uri)),\n    );\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  public async fetchContractSourcesFromAddress(\n    address: string,\n  ): Promise<ContractSource[]> {\n    const metadata = await this.fetchCompilerMetadataFromAddress(address);\n    return await fetchSourceFilesFromMetadata(metadata, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param profileMetadata\n   */\n  public async updatePublisherProfile(\n    profileMetadata: ProfileMetadataInput,\n  ): Promise<TransactionResult> {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const publisher = await signer.getAddress();\n    const profileUri = await this.storage.uploadMetadata(profileMetadata);\n    return {\n      receipt: await this.publisher.sendTransaction(\"setPublisherProfileUri\", [\n        publisher,\n        profileUri,\n      ]),\n    };\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  public async getPublisherProfile(\n    publisherAddress: string,\n  ): Promise<ProfileMetadata> {\n    const profileUri = await this.publisher.readContract.getPublisherProfileUri(\n      publisherAddress,\n    );\n    if (!profileUri || profileUri.length === 0) {\n      return {};\n    }\n    return ProfileSchemaOutput.parse(await this.storage.get(profileUri));\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  public async getAll(publisherAddress: string): Promise<PublishedContract[]> {\n    const data = await this.publisher.readContract.getAllPublishedContracts(\n      publisherAddress,\n    );\n    // since we can fetch from multiple publisher contracts, just keep the latest one in the list\n    const map = data.reduce<\n      Record<string, IContractPublisher.CustomContractInstanceStruct>\n    >((acc, curr) => {\n      // replaces the previous contract with the latest one\n      acc[curr.contractId] = curr;\n      return acc;\n    }, {});\n    return Object.entries(map).map(([_, struct]) =>\n      this.toPublishedContract(struct),\n    );\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   * @param contractId\n   */\n  public async getAllVersions(\n    publisherAddress: string,\n    contractId: string,\n  ): Promise<PublishedContract[]> {\n    const contractStructs =\n      await this.publisher.readContract.getPublishedContractVersions(\n        publisherAddress,\n        contractId,\n      );\n    if (contractStructs.length === 0) {\n      throw Error(\"Not found\");\n    }\n    return contractStructs.map((d) => this.toPublishedContract(d));\n  }\n\n  public async getLatest(\n    publisherAddress: string,\n    contractId: string,\n  ): Promise<PublishedContract> {\n    const model = await this.publisher.readContract.getPublishedContract(\n      publisherAddress,\n      contractId,\n    );\n    return this.toPublishedContract(model);\n  }\n\n  public async publish(\n    predeployUri: string,\n    extraMetadata: ExtraPublishMetadata,\n  ): Promise<TransactionResult<PublishedContract>> {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const publisher = await signer.getAddress();\n\n    const predeployMetadata = await fetchRawPredeployMetadata(\n      predeployUri,\n      this.storage,\n    );\n\n    // ensure version is incremental\n    const latestContract = await this.getLatest(\n      publisher,\n      predeployMetadata.name,\n    );\n    if (latestContract && latestContract.metadataUri) {\n      const latestMetadata = await this.fetchPublishedContractInfo(\n        latestContract,\n      );\n      const latestVersion = latestMetadata.publishedMetadata.version;\n      if (!isIncrementalVersion(latestVersion, extraMetadata.version)) {\n        throw Error(\n          `Version ${extraMetadata.version} is not greater than ${latestVersion}`,\n        );\n      }\n    }\n\n    const fetchedBytecode = await this.storage.getRaw(\n      predeployMetadata.bytecodeUri,\n    );\n    const bytecode = fetchedBytecode.startsWith(\"0x\")\n      ? fetchedBytecode\n      : `0x${fetchedBytecode}`;\n\n    const bytecodeHash = utils.solidityKeccak256([\"bytes\"], [bytecode]);\n    const contractId = predeployMetadata.name;\n\n    const fullMetadata = FullPublishMetadataSchema.parse({\n      ...extraMetadata,\n      ...predeployMetadata,\n      publisher,\n    });\n    const fullMetadataUri = await this.storage.uploadMetadata(fullMetadata);\n    const receipt = await this.publisher.sendTransaction(\"publishContract\", [\n      publisher,\n      contractId,\n      fullMetadataUri,\n      predeployMetadata.metadataUri,\n      bytecodeHash,\n      constants.AddressZero,\n    ]);\n    const events = this.publisher.parseLogs<ContractPublishedEvent>(\n      \"ContractPublished\",\n      receipt.logs,\n    );\n    if (events.length < 1) {\n      throw new Error(\"No ContractPublished event found\");\n    }\n    const contract = events[0].args.publishedContract;\n    return {\n      receipt,\n      data: async () => this.toPublishedContract(contract),\n    };\n  }\n\n  public async unpublish(\n    publisher: string,\n    contractId: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.publisher.sendTransaction(\"unpublishContract\", [\n        publisher,\n        contractId,\n      ]),\n    };\n  }\n\n  private toPublishedContract(\n    contractModel: IContractPublisher.CustomContractInstanceStruct,\n  ): PublishedContract {\n    return PublishedContractSchema.parse({\n      id: contractModel.contractId,\n      timestamp: contractModel.publishTimestamp,\n      metadataUri: contractModel.publishMetadataUri,\n    });\n  }\n}\n","import { RPCConnectionHandler } from \"../classes/rpc-connection-handler\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { SDKOptions } from \"../../schema\";\nimport invariant from \"tiny-invariant\";\nimport { Amount, CurrencyValue } from \"../../types\";\nimport {\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n} from \"../../common/currency\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../constants\";\nimport ERC20Abi from \"../../../abis/IERC20.json\";\nimport { ContractWrapper } from \"../classes/contract-wrapper\";\nimport { IERC20 } from \"contracts\";\nimport { ethers, BigNumber, providers } from \"ethers\";\n\n/**\n * Connect and Interact with a user wallet\n * @example\n * ```javascript\n * const balance = await sdk.wallet.balance();\n * ```\n * @public\n */\nexport class UserWallet {\n  private connection: RPCConnectionHandler;\n  private options: SDKOptions;\n\n  constructor(network: NetworkOrSignerOrProvider, options: SDKOptions) {\n    this.connection = new RPCConnectionHandler(network, options);\n    this.options = options;\n  }\n\n  // TODO connect()\n  // TODO disconnect()\n  // TODO switchChain()\n  // TODO event listener\n  // TODO tokens()\n  // TODO NFTs()\n\n  // TODO this will become the source of truth of the signer and have every contract read from it\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.connection.updateSignerOrProvider(network);\n  }\n\n  /**\n   * Transfer native or ERC20 tokens from this wallet to another wallet\n   * @example\n   * ```javascript\n   *  // transfer 0.8 ETH\n   * await sdk.wallet.transfer(\"0x...\", 0.8);\n   *  // transfer 0.8 tokens of `tokenContractAddress`\n   * await sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);\n   * ```\n   * @param to - the account to send funds to\n   * @param amount - the amount in tokens\n   * @param currencyAddress - Optional - ERC20 contract address of the token to transfer\n   */\n  async transfer(\n    to: string,\n    amount: Amount,\n    currencyAddress = NATIVE_TOKEN_ADDRESS,\n  ): Promise<TransactionResult> {\n    const signer = this.requireWallet();\n    const amountInWei = await normalizePriceValue(\n      this.connection.getProvider(),\n      amount,\n      currencyAddress,\n    );\n    if (isNativeToken(currencyAddress)) {\n      // native token transfer\n      const from = await signer.getAddress();\n      const tx = await signer.sendTransaction({\n        from,\n        to,\n        value: amountInWei,\n      });\n      return {\n        receipt: await tx.wait(),\n      };\n    } else {\n      // ERC20 token transfer\n      return {\n        receipt: await this.createErc20(currencyAddress).sendTransaction(\n          \"transfer\",\n          [to, amountInWei],\n        ),\n      };\n    }\n  }\n\n  /**\n   * Fetch the native or ERC20 token balance of this wallet\n   * @example\n   * ```javascript\n   * // native currency balance\n   * const balance = await sdk.wallet.balance();\n   * // ERC20 token balance\n   * const erc20balance = await sdk.wallet.balance(tokenContractAddress);\n   *\n   * ```\n   */\n  async balance(\n    currencyAddress = NATIVE_TOKEN_ADDRESS,\n  ): Promise<CurrencyValue> {\n    this.requireWallet();\n    const provider = this.connection.getProvider();\n    let balance: BigNumber;\n    if (isNativeToken(currencyAddress)) {\n      balance = await provider.getBalance(await this.getAddress());\n    } else {\n      balance = await this.createErc20(currencyAddress).readContract.balanceOf(\n        await this.getAddress(),\n      );\n    }\n    return await fetchCurrencyValue(provider, currencyAddress, balance);\n  }\n\n  /**\n   * Get the currently connected address\n   * @example\n   * ```javascript\n   * const address = await sdk.wallet.getAddress();\n   * ```\n   */\n  async getAddress(): Promise<string> {\n    return await this.requireWallet().getAddress();\n  }\n\n  /**\n   * Sign any message with the connected wallet private key\n   * @param message - the message to sign\n   * @returns the signed message\n   *\n   * @example\n   * ```javascript\n   * // This is the message to be signed\n   * const message = \"Sign this message...\";\n   *\n   * // Now we can sign the message with the connected wallet\n   * const signature = await sdk.wallet.sign(message);\n   * ```\n   */\n  async sign(message: string): Promise<string> {\n    const signer = this.requireWallet();\n    return await signer.signMessage(message);\n  }\n\n  /**\n   * Recover the signing address from a signed message\n   * @param message - the original message that was signed\n   * @param signature - the signature to recover the address from\n   * @returns the address that signed the message\n   *\n   * @example\n   * ```javascript\n   * const message = \"Sign this message...\";\n   * const signature = await sdk.wallet.sign(message);\n   *\n   * // Now we can recover the signing address\n   * const address = sdk.wallet.recoverAddress(message, signature);\n   * ```\n   */\n  public recoverAddress(message: string, signature: string): string {\n    const messageHash = ethers.utils.hashMessage(message);\n    const messageHashBytes = ethers.utils.arrayify(messageHash);\n    return ethers.utils.recoverAddress(messageHashBytes, signature);\n  }\n\n  /**\n   * Send a raw transaction to the blockchain from the connected wallet\n   * @param transactionRequest - raw transaction data to send to the blockchain\n   */\n  async sendRawTransaction(\n    transactionRequest: providers.TransactionRequest,\n  ): Promise<TransactionResult> {\n    const signer = this.requireWallet();\n    const tx = await signer.sendTransaction(transactionRequest);\n    return {\n      receipt: await tx.wait(),\n    };\n  }\n\n  /** ***********************\n   * PRIVATE FUNCTIONS\n   * ***********************/\n\n  private requireWallet() {\n    const signer = this.connection.getSigner();\n    invariant(\n      signer,\n      \"This action requires a connected wallet. Please pass a valid signer to the SDK.\",\n    );\n    return signer;\n  }\n\n  private createErc20(currencyAddress: string) {\n    return new ContractWrapper<IERC20>(\n      this.connection.getSignerOrProvider(),\n      currencyAddress,\n      ERC20Abi,\n      this.options,\n    );\n  }\n}\n"]}